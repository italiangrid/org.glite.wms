#! /usr/bin/env python2.2

from py2man import *


# General Variables
VERSION = "1.0.0"
DEBUG = 0
MAN_OUTPUT=""
TXT_OUTPUT="../../org.egee.jra1.deliverables/users-guide/WMPROXY/"
options2descriptionFile  = "options_description.txt"
commands2descriptionFile = "commands_description.txt"


# Iterate over commands:

errors=[]
endl= "\n"
TAGS ={"normal":["<<<",">>>"] , "high":["###","###"]}


def debug(*args):
	if DEBUG:
		if len(args)>1:
			print ">>>DEBUG"
			for arg in args:
				print "\t",arg
		else:
			print ">>>DEBUG" , args


def comment(line, man):
	""" Generate a comment line """
	if man:
		return '.\\" ' + line + endl
	else:
		return "% " + line + endl

def title(line, man):
	""" Generate a title """
	#debug ("writing title: ", line)
	if man:
		return '.SH ' + line +endl
	else:
		return endl+'\\medskip'+endl + "\\textbf{"+line+"}" + endl +'\\smallskip' +endl +endl

def parseSpecial(line, man):
	if man:
		return line
	else:
		# Special latex characters:
		for sp in ["_","$","#","&"]:
			line=line.replace(sp,'\\'+sp)
			#line = line.replace(sp, "-")
		return line+endl


def shortOptBis(line,man):
	result = ""
	ln,st,vl = line
	if man:
		return shortOpt(line, man) + endl + ".IP"
	else:
		# long option (mandatory)
		result = '\\textbf{' + "--" + ln +"}"
		# shortcut (optional)
		if st:
			result+= ', '+'\\textbf{'+ "-" +st+"}"
		# value (optional)
		if vl:
			result+= " <" + vl +">"
		result =parseSpecial(result,man)
	return result


def shortOpt(line,man):
	result = ""
	ln,st,vl = line
	if man:
		result+='.HP'+ endl
		# long option (mandatory)
		result+='\\fB' +"--" +ln +'\\fR'
		# shortcut (optional)
		if st:
			result+=', \\fB' +"-" +st +'\\fR'
		# value (optional)
		if vl:
			result+=endl+"<"+vl+">"
		result +=endl
	else:
		# long option (mandatory)
		result = "\t--"+ ln
		# shortcut (optional)
		if st:
			result+= ', ' + "-" +st
		# value (optional)
		if vl:
			result+= " <" + vl+">"
		result +=endl
	return result




"""
PARSING MEGHODS
"""
def getTag(line, TAGS):
	LEN  = len(TAGS[0])
	if line[0:LEN]==TAGS[0]  and   line[-LEN:]==TAGS[1] :
		return line[LEN:-LEN]
	return ""

def parseDescriptionFile(fi, tags):
	debug ("Parsing FILE: ", fi, tags)
	infile = open(fi)
	lines=infile.readlines()
	infile.close()
	return parseDescriptionLines(lines,tags)
def parseDescriptionLines(lines, tags):
	"""
	Parses the input description files and returns
	a python dictionary
	FILE FORMAT:
		TAGS[0] tag name TAGS[1]
		description
		TAGS[0] tag name TAGS[1]
	returns a dictionary
	"""
	dict ={}
	names=[]
	name = ""
	soFar=""
	for line in lines:
			#debug ("ARRIVED LINE:" , ln)
			#for line in ln.split("\n"):
			if name:
				#Begin tag already found, look for end
				tmp = getTag(line.strip(), tags)
				if tmp==name:
					# END TAG, update dict
					dict[name]=soFar
					name = ""
					soFar=""
				elif tmp:
					error= "Warning tag " + tags[0] + tmp +tags[1]+ \
					" init but "+tags[0] + name +tags[1] + " not yet finished"
					errors.append(error)
					name = tmp
				else:
					# Keep description
					soFar += "\n" +line.strip()
			else:
				# Name not yet found:
				name = getTag(line.strip(), tags)
				if name:
					if DEBUG:
						names.append(name)
	debug ("Gotcha Names: ", names)
	return dict



"""  STATIC VARIABLES: """
COMMENT = "PLEASE DO NOT MODIFY THIS FILE! It was generated by raskman version: " + VERSION
options2description  = parseDescriptionFile(options2descriptionFile , TAGS["normal"])
commands2description = parseDescriptionFile(commands2descriptionFile, TAGS["high"])
debug("OPTIONS KEYS = " , options2description.keys())
debug("COMMAND KEYS = " , commands2description.keys())

#DEBUG =1
class RaskMan:
	def __init__(self,command, options, commandTags):
		""" the name of the command"""
		self.command = command
		""" List of options available by command"""
		self.options = options
		""" Dictonary of TAGS available by command"""
		self.commandTags = commandTags
		self.manFile = MAN_OUTPUT + command + ".1"
		self.texFile = TXT_OUTPUT + command + ".tex"
		self.manStream = open(self.manFile,"w")
		self.texStream = open(self.texFile,"w")

	def write(self, method,arg):
		self.manStream.write(method(arg,True))
		self.texStream.write(method(arg,False))
	def writeArg(self,arg):
		self.manStream.write(arg)
		self.manStream.write(endl)
		self.texStream.write(arg)
		self.texStream.write(endl)


	def headerTag (self, line, man):
		debug (self.command,"headerTag(..)")
		result=""
		if man:
			result += ".TH " + self.command.upper() +' "1" '
			result += '"' + self.command.upper()+'" '
			result +='"'+line+'"'
		else:
			#result +="\\documentclass[12pt]{article}"
			#result +="\\begin{document}"+endl
			result +="\\subsection{"+self.command +"}"+ endl
			result +="\\label{"+ self.command +"}"
		return result +endl

	def synopsisTag(self, line, man):
		debug (self.command,"synopsisTag(..)")
		"""
		Create Synopsis
		"""
		result =""
  		if man:
			line = line.replace("[", "[\\fI")
			line = line.replace("]", "\\fR]")
			line = line.replace("<", "<\\fI")
			line = line.replace(">", "\\fR>")
			result +=".B "+self.command + endl + line.strip()
		else:
			line = line.replace("<", "$<$")
			line = line.replace(">", "$>$")
			result +="\\textbf{"+self.command + " " + line.strip().replace("_",'\\'+"_") +"}" +endl
			result +"\\medskip"+endl
			result +='{\\begin{verbatim}'
		result += endl			
		# Common Options
		if not man:
			result +=endl+"options:"
		result += endl
		for opt in common_options:
			result+=shortOpt(options2short[opt],man)
		# Command specific options
		for opt in self.options:
			result+=shortOpt(options2short[opt],man)
		if not man:
			result +='\\end{verbatim}'
		return result +endl

	def optionTag(self,options, man):
		debug (self.command,"optionTag(..)")
		result =""
		for opt in options:
			""" Parses option 2 short """
			try:
				result+=shortOptBis(options2short[opt],man)
			except KeyError:
				errors.append(self.command+"->  FATAL ERROR, missing in options2short: "+opt)
			""" Parses option 2 descripiton """
			try:
				result+=parseSpecial(options2description[opt]+endl,man)
			except KeyError:
				errors.append(self.command+"->  option not found among options2description: "+opt)
			if man:
				result+=".PP"+endl
		return result


	def create(self):
		"""
		MAIN method: create the desired man pages
		"""
		try:
			debug (self.command,"create")
			"""   header  """
			self.write(comment,COMMENT)
			self.write(self.headerTag,"GLITE WMS User Command")
			self.write(title, "NAME: \n "+ self.command)
			"""  synopsis """
			section="SYNOPSIS"
			self.write(title,section)
			self.write(self.synopsisTag,self.commandTags[section])
			del self.commandTags[section]
			"""  description """
			section="DESCRIPTION"
			self.write(title,section)
			self.write(parseSpecial,self.commandTags[section])
			del self.commandTags[section]
			"""  options  """
			section="OPTIONS"
			self.write (title, section)
			self.write(self.optionTag,common_options)
			self.write(self.optionTag,self.options)
			"""  Environment,Files, Author"""
			for section in ["ENVIRONMENT", "FILES","AUTHORS","EXAMPLES"]:
				self.write(title,section)
				self.write(parseSpecial,self.commandTags[section])
				del self.commandTags[section]
			"""  Other Unkwnown sections..."""
			for section in commandTags.keys():
				self.write(title,section)
				self.write(parseSpecial,self.commandTags[section])
				del self.commandTags[section]
				errors.append(self.command+"-> (Warning) appending unknwon section: " + section)
		except KeyError:
			errors.append(self.command+"-> section not found: " + section)
		"""  see also """
		self.end()

	def end(self):
		""" Terminate documents and close """
		# MAN PAGES:
		self.manStream.write(endl)
		self.manStream.close()
		# TEX PAGES:
		#self.texStream.write("\n\\end{document}")
		self.texStream.write(endl)
		self.texStream.close()


for command in commands2options.keys():
	try:
		debug ("Parsing command:" ,command)
		print "creating man pages for:" , command
		commandTags =  parseDescriptionLines(commands2description[command].split("\n"), TAGS["normal"])
		try:
			raskman = RaskMan(command,commands2options[command],commandTags)
			raskman.create()
		except KeyError:
			errors.append(command+ "-> Fatal description ERROR for command")
	except KeyError:
		errors.append(command+ "-> Unable to find command inside commands2description")
		pass

if errors:
	print "ERRORS FOUND:"
	for err in errors:
		print err
else:
	print "Documentation properly created in the following directories:"
	print "MAN documtentation: (to view man pages please issue: groff -man -Tascii <input file>)"
	if MAN_OUTPUT:
		print MAN_OUTPUT
	else:
		print "(locally created)"
	print "TXT documtentation: "
	if TXT_OUTPUT:
		print TXT_OUTPUT
	else:
		print "(locally created)"
