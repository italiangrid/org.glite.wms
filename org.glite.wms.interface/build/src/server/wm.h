// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* wm.h
   Generated by wsdl2h 1.2.16 from ../../../src/server/WMProxy.wsdl and ../../../src/server/wmptypemap.dat
   2012-11-09 09:44:12 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Build Notes

NOTE:

 - Run soapcpp2 on wm.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://glite.org/wms/wmproxy                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://glite.org/wms/wmproxy"
jsdl = "http://schemas.ggf.org/jsdl/2005/11/jsdl"
jsdlposix = "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix"
jsdlposix = "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix"
delegationns = "http://www.gridsite.org/namespaces/delegation-2"
delegation1 = "http://www.gridsite.org/namespaces/delegation-1"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://glite.org/wms/wmproxy"
//gsoap ns1   schema namespace:	http://glite.org/wms/wmproxy
//gsoap ns1   schema form:	unqualified

#define SOAP_NAMESPACE_OF_jsdl	"http://schemas.ggf.org/jsdl/2005/11/jsdl"
//gsoap jsdl  schema namespace:	http://schemas.ggf.org/jsdl/2005/11/jsdl
//gsoap jsdl  schema form:	unqualified

#define SOAP_NAMESPACE_OF_jsdlposix	"http://schemas.ggf.org/jsdl/2005/11/jsdl-posix"
//gsoap jsdlposix schema namespace:	http://schemas.ggf.org/jsdl/2005/11/jsdl-posix
//gsoap jsdlposix schema form:	unqualified

#define SOAP_NAMESPACE_OF_jsdlposix	"http://schemas.ggf.org/jsdl/2005/11/jsdl-posix"
//gsoap jsdlposix schema namespace:	http://schemas.ggf.org/jsdl/2005/11/jsdl-posix
//gsoap jsdlposix schema form:	unqualified

#define SOAP_NAMESPACE_OF_delegationns	"http://www.gridsite.org/namespaces/delegation-2"
//gsoap delegationns schema namespace:	http://www.gridsite.org/namespaces/delegation-2
//gsoap delegationns schema form:	unqualified

#define SOAP_NAMESPACE_OF_delegation1	"http://www.gridsite.org/namespaces/delegation-1"
//gsoap delegation1 schema namespace:	http://www.gridsite.org/namespaces/delegation-1
//gsoap delegation1 schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:ID"
typedef std::string xsd__ID;

/// Primitive built-in type "xs:NCName"
typedef std::string xsd__NCName;

/// Primitive built-in type "xs:anyURI"
typedef std::string xsd__anyURI;

/// Primitive built-in type "xs:nonNegativeInteger"
typedef std::string xsd__nonNegativeInteger;

/// Primitive built-in type "xs:normalizedString"
typedef std::string xsd__normalizedString;

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns1__JobTypeList.
class ns1__JobTypeList;

//  Forward declaration of class ns1__StringList.
class ns1__StringList;

//  Forward declaration of class ns1__DestURIStructType.
class ns1__DestURIStructType;

//  Forward declaration of class ns1__DestURIsStructType.
class ns1__DestURIsStructType;

//  Forward declaration of class ns1__StringAndLongType.
class ns1__StringAndLongType;

//  Forward declaration of class ns1__StringAndLongList.
class ns1__StringAndLongList;

//  Forward declaration of class ns1__JobStatusStructType.
class ns1__JobStatusStructType;

//  Forward declaration of class ns1__JobIdStructType.
class ns1__JobIdStructType;

//  Forward declaration of class ns1__GraphStructType.
class ns1__GraphStructType;

//  Forward declaration of class ns1__VOProxyInfoStructType.
class ns1__VOProxyInfoStructType;

//  Forward declaration of class ns1__ProxyInfoStructType.
class ns1__ProxyInfoStructType;

//  Forward declaration of class ns1__BaseFaultType.
class ns1__BaseFaultType;

//  Forward declaration of class ns1__GenericFaultType.
class ns1__GenericFaultType;

//  Forward declaration of class ns1__AuthenticationFaultType.
class ns1__AuthenticationFaultType;

//  Forward declaration of class ns1__AuthorizationFaultType.
class ns1__AuthorizationFaultType;

//  Forward declaration of class ns1__InvalidArgumentFaultType.
class ns1__InvalidArgumentFaultType;

//  Forward declaration of class ns1__GetQuotaManagementFaultType.
class ns1__GetQuotaManagementFaultType;

//  Forward declaration of class ns1__NoSuitableResourcesFaultType.
class ns1__NoSuitableResourcesFaultType;

//  Forward declaration of class ns1__JobUnknownFaultType.
class ns1__JobUnknownFaultType;

//  Forward declaration of class ns1__OperationNotAllowedFaultType.
class ns1__OperationNotAllowedFaultType;

//  Forward declaration of class ns1__ServerOverloadedFaultType.
class ns1__ServerOverloadedFaultType;

//  Forward declaration of class jsdl__Boundary_USCOREType.
class jsdl__Boundary_USCOREType;

//  Forward declaration of class jsdl__Exact_USCOREType.
class jsdl__Exact_USCOREType;

//  Forward declaration of class jsdl__Range_USCOREType.
class jsdl__Range_USCOREType;

//  Forward declaration of class jsdl__RangeValue_USCOREType.
class jsdl__RangeValue_USCOREType;

//  Forward declaration of class jsdl__JobDefinition_USCOREType.
class jsdl__JobDefinition_USCOREType;

//  Forward declaration of class jsdl__JobDescription_USCOREType.
class jsdl__JobDescription_USCOREType;

//  Forward declaration of class jsdl__JobIdentification_USCOREType.
class jsdl__JobIdentification_USCOREType;

//  Forward declaration of class jsdl__Application_USCOREType.
class jsdl__Application_USCOREType;

//  Forward declaration of class jsdl__Resources_USCOREType.
class jsdl__Resources_USCOREType;

//  Forward declaration of class jsdl__CandidateHosts_USCOREType.
class jsdl__CandidateHosts_USCOREType;

//  Forward declaration of class jsdl__CPUArchitecture_USCOREType.
class jsdl__CPUArchitecture_USCOREType;

//  Forward declaration of class jsdl__FileSystem_USCOREType.
class jsdl__FileSystem_USCOREType;

//  Forward declaration of class jsdl__OperatingSystem_USCOREType.
class jsdl__OperatingSystem_USCOREType;

//  Forward declaration of class jsdl__OperatingSystemType_USCOREType.
class jsdl__OperatingSystemType_USCOREType;

//  Forward declaration of class jsdl__DataStaging_USCOREType.
class jsdl__DataStaging_USCOREType;

//  Forward declaration of class jsdl__SourceTarget_USCOREType.
class jsdl__SourceTarget_USCOREType;

//  Forward declaration of class jsdlposix__Environment_USCOREType.
class jsdlposix__Environment_USCOREType;

//  Forward declaration of class jsdlposix__Argument_USCOREType.
class jsdlposix__Argument_USCOREType;

//  Forward declaration of class jsdlposix__FileName_USCOREType.
class jsdlposix__FileName_USCOREType;

//  Forward declaration of class jsdlposix__DirectoryName_USCOREType.
class jsdlposix__DirectoryName_USCOREType;

//  Forward declaration of class jsdlposix__Limits_USCOREType.
class jsdlposix__Limits_USCOREType;

//  Forward declaration of class jsdlposix__UserName_USCOREType.
class jsdlposix__UserName_USCOREType;

//  Forward declaration of class jsdlposix__GroupName_USCOREType.
class jsdlposix__GroupName_USCOREType;

//  Forward declaration of class jsdlposix__POSIXApplication_USCOREType.
class jsdlposix__POSIXApplication_USCOREType;

//  Forward declaration of class delegationns__NewProxyReq.
class delegationns__NewProxyReq;

//  Forward declaration of class _delegationns__DelegationException.
class _delegationns__DelegationException;

//  Forward declaration of class delegation1__DelegationExceptionType.
class delegation1__DelegationExceptionType;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://glite.org/wms/wmproxy                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.ggf.org/jsdl/2005/11/jsdl                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.ggf.org/jsdl/2005/11/jsdl-posix                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.ggf.org/jsdl/2005/11/jsdl-posix                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.gridsite.org/namespaces/delegation-2                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.gridsite.org/namespaces/delegation-1                          *
 *                                                                            *
\******************************************************************************/


/// "http://glite.org/wms/wmproxy":ObjectType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__ObjectType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__ObjectType
{
	ns1__ObjectType__JOB,	///< xs:string value="JOB"
	ns1__ObjectType__DAG,	///< xs:string value="DAG"
	ns1__ObjectType__COLLECTION,	///< xs:string value="COLLECTION"
};

/// "http://glite.org/wms/wmproxy":JobType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__JobType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__JobType
{
	ns1__JobType__NORMAL,	///< xs:string value="NORMAL"
	ns1__JobType__PARAMETRIC,	///< xs:string value="PARAMETRIC"
	ns1__JobType__INTERACTIVE,	///< xs:string value="INTERACTIVE"
	ns1__JobType__MPI,	///< xs:string value="MPI"
	ns1__JobType__PARTITIONABLE,	///< xs:string value="PARTITIONABLE"
	ns1__JobType__CHECKPOINTABLE,	///< xs:string value="CHECKPOINTABLE"
};

/// "http://glite.org/wms/wmproxy":JdlType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__JdlType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__JdlType
{
	ns1__JdlType__ORIGINAL,	///< xs:string value="ORIGINAL"
	ns1__JdlType__REGISTERED,	///< xs:string value="REGISTERED"
};

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.ggf.org/jsdl/2005/11/jsdl                                 *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":ProcessorArchitectureEnumeration is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'jsdl__ProcessorArchitectureEnumeration' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum jsdl__ProcessorArchitectureEnumeration
{
	jsdl__ProcessorArchitectureEnumeration__sparc,	///< xs:string value="sparc"
	jsdl__ProcessorArchitectureEnumeration__powerpc,	///< xs:string value="powerpc"
	jsdl__ProcessorArchitectureEnumeration__x86,	///< xs:string value="x86"
	jsdl__ProcessorArchitectureEnumeration__x86_USCORE32,	///< xs:string value="x86_32"
	jsdl__ProcessorArchitectureEnumeration__x86_USCORE64,	///< xs:string value="x86_64"
	jsdl__ProcessorArchitectureEnumeration__parisc,	///< xs:string value="parisc"
	jsdl__ProcessorArchitectureEnumeration__mips,	///< xs:string value="mips"
	jsdl__ProcessorArchitectureEnumeration__ia64,	///< xs:string value="ia64"
	jsdl__ProcessorArchitectureEnumeration__arm,	///< xs:string value="arm"
	jsdl__ProcessorArchitectureEnumeration__other,	///< xs:string value="other"
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":OperatingSystemTypeEnumeration is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'jsdl__OperatingSystemTypeEnumeration' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum jsdl__OperatingSystemTypeEnumeration
{
	jsdl__OperatingSystemTypeEnumeration__Unknown,	///< xs:string value="Unknown"
	jsdl__OperatingSystemTypeEnumeration__MACOS,	///< xs:string value="MACOS"
	jsdl__OperatingSystemTypeEnumeration__ATTUNIX,	///< xs:string value="ATTUNIX"
	jsdl__OperatingSystemTypeEnumeration__DGUX,	///< xs:string value="DGUX"
	jsdl__OperatingSystemTypeEnumeration__DECNT,	///< xs:string value="DECNT"
	jsdl__OperatingSystemTypeEnumeration__Tru64_USCOREUNIX,	///< xs:string value="Tru64_UNIX"
	jsdl__OperatingSystemTypeEnumeration__OpenVMS,	///< xs:string value="OpenVMS"
	jsdl__OperatingSystemTypeEnumeration__HPUX,	///< xs:string value="HPUX"
	jsdl__OperatingSystemTypeEnumeration__AIX,	///< xs:string value="AIX"
	jsdl__OperatingSystemTypeEnumeration__MVS,	///< xs:string value="MVS"
	jsdl__OperatingSystemTypeEnumeration__OS400,	///< xs:string value="OS400"
	jsdl__OperatingSystemTypeEnumeration__OS_USCORE2,	///< xs:string value="OS_2"
	jsdl__OperatingSystemTypeEnumeration__JavaVM,	///< xs:string value="JavaVM"
	jsdl__OperatingSystemTypeEnumeration__MSDOS,	///< xs:string value="MSDOS"
	jsdl__OperatingSystemTypeEnumeration__WIN3x,	///< xs:string value="WIN3x"
	jsdl__OperatingSystemTypeEnumeration__WIN95,	///< xs:string value="WIN95"
	jsdl__OperatingSystemTypeEnumeration__WIN98,	///< xs:string value="WIN98"
	jsdl__OperatingSystemTypeEnumeration__WINNT,	///< xs:string value="WINNT"
	jsdl__OperatingSystemTypeEnumeration__WINCE,	///< xs:string value="WINCE"
	jsdl__OperatingSystemTypeEnumeration__NCR3000,	///< xs:string value="NCR3000"
	jsdl__OperatingSystemTypeEnumeration__NetWare,	///< xs:string value="NetWare"
	jsdl__OperatingSystemTypeEnumeration__OSF,	///< xs:string value="OSF"
	jsdl__OperatingSystemTypeEnumeration__DC_USCOREOS,	///< xs:string value="DC_OS"
	jsdl__OperatingSystemTypeEnumeration__Reliant_USCOREUNIX,	///< xs:string value="Reliant_UNIX"
	jsdl__OperatingSystemTypeEnumeration__SCO_USCOREUnixWare,	///< xs:string value="SCO_UnixWare"
	jsdl__OperatingSystemTypeEnumeration__SCO_USCOREOpenServer,	///< xs:string value="SCO_OpenServer"
	jsdl__OperatingSystemTypeEnumeration__Sequent,	///< xs:string value="Sequent"
	jsdl__OperatingSystemTypeEnumeration__IRIX,	///< xs:string value="IRIX"
	jsdl__OperatingSystemTypeEnumeration__Solaris,	///< xs:string value="Solaris"
	jsdl__OperatingSystemTypeEnumeration__SunOS,	///< xs:string value="SunOS"
	jsdl__OperatingSystemTypeEnumeration__U6000,	///< xs:string value="U6000"
	jsdl__OperatingSystemTypeEnumeration__ASERIES,	///< xs:string value="ASERIES"
	jsdl__OperatingSystemTypeEnumeration__TandemNSK,	///< xs:string value="TandemNSK"
	jsdl__OperatingSystemTypeEnumeration__TandemNT,	///< xs:string value="TandemNT"
	jsdl__OperatingSystemTypeEnumeration__BS2000,	///< xs:string value="BS2000"
	jsdl__OperatingSystemTypeEnumeration__LINUX,	///< xs:string value="LINUX"
	jsdl__OperatingSystemTypeEnumeration__Lynx,	///< xs:string value="Lynx"
	jsdl__OperatingSystemTypeEnumeration__XENIX,	///< xs:string value="XENIX"
	jsdl__OperatingSystemTypeEnumeration__VM,	///< xs:string value="VM"
	jsdl__OperatingSystemTypeEnumeration__Interactive_USCOREUNIX,	///< xs:string value="Interactive_UNIX"
	jsdl__OperatingSystemTypeEnumeration__BSDUNIX,	///< xs:string value="BSDUNIX"
	jsdl__OperatingSystemTypeEnumeration__FreeBSD,	///< xs:string value="FreeBSD"
	jsdl__OperatingSystemTypeEnumeration__NetBSD,	///< xs:string value="NetBSD"
	jsdl__OperatingSystemTypeEnumeration__GNU_USCOREHurd,	///< xs:string value="GNU_Hurd"
	jsdl__OperatingSystemTypeEnumeration__OS9,	///< xs:string value="OS9"
	jsdl__OperatingSystemTypeEnumeration__MACH_USCOREKernel,	///< xs:string value="MACH_Kernel"
	jsdl__OperatingSystemTypeEnumeration__Inferno,	///< xs:string value="Inferno"
	jsdl__OperatingSystemTypeEnumeration__QNX,	///< xs:string value="QNX"
	jsdl__OperatingSystemTypeEnumeration__EPOC,	///< xs:string value="EPOC"
	jsdl__OperatingSystemTypeEnumeration__IxWorks,	///< xs:string value="IxWorks"
	jsdl__OperatingSystemTypeEnumeration__VxWorks,	///< xs:string value="VxWorks"
	jsdl__OperatingSystemTypeEnumeration__MiNT,	///< xs:string value="MiNT"
	jsdl__OperatingSystemTypeEnumeration__BeOS,	///< xs:string value="BeOS"
	jsdl__OperatingSystemTypeEnumeration__HP_USCOREMPE,	///< xs:string value="HP_MPE"
	jsdl__OperatingSystemTypeEnumeration__NextStep,	///< xs:string value="NextStep"
	jsdl__OperatingSystemTypeEnumeration__PalmPilot,	///< xs:string value="PalmPilot"
	jsdl__OperatingSystemTypeEnumeration__Rhapsody,	///< xs:string value="Rhapsody"
	jsdl__OperatingSystemTypeEnumeration__Windows_USCORE2000,	///< xs:string value="Windows_2000"
	jsdl__OperatingSystemTypeEnumeration__Dedicated,	///< xs:string value="Dedicated"
	jsdl__OperatingSystemTypeEnumeration__OS_USCORE390,	///< xs:string value="OS_390"
	jsdl__OperatingSystemTypeEnumeration__VSE,	///< xs:string value="VSE"
	jsdl__OperatingSystemTypeEnumeration__TPF,	///< xs:string value="TPF"
	jsdl__OperatingSystemTypeEnumeration__Windows_USCORER_USCOREMe,	///< xs:string value="Windows_R_Me"
	jsdl__OperatingSystemTypeEnumeration__Caldera_USCOREOpen_USCOREUNIX,	///< xs:string value="Caldera_Open_UNIX"
	jsdl__OperatingSystemTypeEnumeration__OpenBSD,	///< xs:string value="OpenBSD"
	jsdl__OperatingSystemTypeEnumeration__Not_USCOREApplicable,	///< xs:string value="Not_Applicable"
	jsdl__OperatingSystemTypeEnumeration__Windows_USCOREXP,	///< xs:string value="Windows_XP"
	jsdl__OperatingSystemTypeEnumeration__z_USCOREOS,	///< xs:string value="z_OS"
	jsdl__OperatingSystemTypeEnumeration__other,	///< xs:string value="other"
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":FileSystemTypeEnumeration is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'jsdl__FileSystemTypeEnumeration' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum jsdl__FileSystemTypeEnumeration
{
	jsdl__FileSystemTypeEnumeration__swap,	///< xs:string value="swap"
	jsdl__FileSystemTypeEnumeration__temporary,	///< xs:string value="temporary"
	jsdl__FileSystemTypeEnumeration__spool,	///< xs:string value="spool"
	jsdl__FileSystemTypeEnumeration__normal,	///< xs:string value="normal"
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":CreationFlagEnumeration is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'jsdl__CreationFlagEnumeration' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum jsdl__CreationFlagEnumeration
{
	jsdl__CreationFlagEnumeration__overwrite,	///< xs:string value="overwrite"
	jsdl__CreationFlagEnumeration__append,	///< xs:string value="append"
	jsdl__CreationFlagEnumeration__dontOverwrite,	///< xs:string value="dontOverwrite"
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":Description_Type is a simpleType restriction of xs:string.
typedef std::string jsdl__Description_USCOREType;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.ggf.org/jsdl/2005/11/jsdl-posix                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.ggf.org/jsdl/2005/11/jsdl-posix                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.gridsite.org/namespaces/delegation-2                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.gridsite.org/namespaces/delegation-1                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://glite.org/wms/wmproxy                                             *
 *                                                                            *
\******************************************************************************/


/// "http://glite.org/wms/wmproxy":JobTypeList is a complexType.
class ns1__JobTypeList
{ public:
/// Vector of enum ns1__JobType with length 0..unbounded
    std::vector<enum ns1__JobType      > jobType                        0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://glite.org/wms/wmproxy":StringList is a complexType.
class ns1__StringList
{ public:
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > Item                           0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://glite.org/wms/wmproxy":DestURIStructType is a complexType.
class ns1__DestURIStructType
{ public:
/// Element id of type xs:string.
    std::string                          id                             1;	///< Required element.
/// Vector of std::string with length 1..unbounded
    std::vector<std::string            > Item                           1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://glite.org/wms/wmproxy":DestURIsStructType is a complexType.
class ns1__DestURIsStructType
{ public:
/// Vector of ns1__DestURIStructType* with length 1..unbounded
    std::vector<ns1__DestURIStructType*> Item                           1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://glite.org/wms/wmproxy":StringAndLongType is a complexType.
class ns1__StringAndLongType
{ public:
/// Element name of type xs:string.
    std::string                          name                           1;	///< Required element.
/// Element size of type xs:long.
    LONG64                               size                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://glite.org/wms/wmproxy":StringAndLongList is a complexType.
class ns1__StringAndLongList
{ public:
/// Vector of ns1__StringAndLongType* with length 0..unbounded
    std::vector<ns1__StringAndLongType*> file                           0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://glite.org/wms/wmproxy":JobStatusStructType is a complexType.
class ns1__JobStatusStructType
{ public:
/// Element jobid of type xs:string.
    std::string                          jobid                          1;	///< Required element.
/// Element status of type xs:string.
    std::string                          status                         1;	///< Required element.
/// Vector of ns1__JobStatusStructType* with length 0..unbounded
    std::vector<ns1__JobStatusStructType*> childrenJob                    0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://glite.org/wms/wmproxy":JobIdStructType is a complexType.
class ns1__JobIdStructType
{ public:
/// Element id of type xs:string.
    std::string                          id                             1;	///< Required element.
/// Element name of type xs:string.
    std::string*                         name                           1;	///< Nullable pointer.
/// Element path of type xs:string.
    std::string*                         path                           1;	///< Nullable pointer.
/// Vector of ns1__JobIdStructType* with length 0..unbounded
    std::vector<ns1__JobIdStructType*  > childrenJob                    0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://glite.org/wms/wmproxy":GraphStructType is a complexType.
class ns1__GraphStructType
{ public:
/// Element name of type xs:string.
    std::string*                         name                           1;	///< Nullable pointer.
/// Vector of ns1__GraphStructType* with length 0..unbounded
    std::vector<ns1__GraphStructType*  > childrenJob                    0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://glite.org/wms/wmproxy":VOProxyInfoStructType is a complexType.
class ns1__VOProxyInfoStructType
{ public:
/// Element User of type xs:string.
    std::string                          User                           1;	///< Required element.
/// Element UserCA of type xs:string.
    std::string                          UserCA                         1;	///< Required element.
/// Element Server of type xs:string.
    std::string                          Server                         1;	///< Required element.
/// Element ServerCA of type xs:string.
    std::string                          ServerCA                       1;	///< Required element.
/// Element VOName of type xs:string.
    std::string                          VOName                         1;	///< Required element.
/// Element URI of type xs:string.
    std::string                          URI                            1;	///< Required element.
/// Element StartTime of type xs:string.
    std::string                          StartTime                      1;	///< Required element.
/// Element EndTime of type xs:string.
    std::string                          EndTime                        1;	///< Required element.
/// Vector of std::string with length 1..unbounded
    std::vector<std::string            > Attribute                      1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://glite.org/wms/wmproxy":ProxyInfoStructType is a complexType.
class ns1__ProxyInfoStructType
{ public:
/// Element Subject of type xs:string.
    std::string                          Subject                        1;	///< Required element.
/// Element Issuer of type xs:string.
    std::string                          Issuer                         1;	///< Required element.
/// Element Identity of type xs:string.
    std::string                          Identity                       1;	///< Required element.
/// Element Type of type xs:string.
    std::string                          Type                           1;	///< Required element.
/// Element Strength of type xs:string.
    std::string                          Strength                       1;	///< Required element.
/// Element StartTime of type xs:string.
    std::string                          StartTime                      1;	///< Required element.
/// Element EndTime of type xs:string.
    std::string                          EndTime                        1;	///< Required element.
/// Vector of ns1__VOProxyInfoStructType* with length 0..unbounded
    std::vector<ns1__VOProxyInfoStructType*> VOsInfo                        0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://glite.org/wms/wmproxy":BaseFaultType is a complexType.
class ns1__BaseFaultType
{ public:
/// Element methodName of type xs:string.
    std::string                          methodName                     1;	///< Required element.
/// Element Timestamp of type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element ErrorCode of type xs:string.
    std::string*                         ErrorCode                      0;	///< Optional element.
/// Element Description of type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > FaultCause                     0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.ggf.org/jsdl/2005/11/jsdl                                 *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":Range_Type is a complexType.
class jsdl__Range_USCOREType
{ public:
/// Element LowerBound of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":Boundary_Type.
    jsdl__Boundary_USCOREType*           LowerBound                     1;	///< Required element.
/// Element UpperBound of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":Boundary_Type.
    jsdl__Boundary_USCOREType*           UpperBound                     1;	///< Required element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":RangeValue_Type is a complexType.
class jsdl__RangeValue_USCOREType
{ public:
/// Element UpperBoundedRange of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":Boundary_Type.
    jsdl__Boundary_USCOREType*           UpperBoundedRange              0;	///< Optional element.
/// Element LowerBoundedRange of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":Boundary_Type.
    jsdl__Boundary_USCOREType*           LowerBoundedRange              0;	///< Optional element.
/// Vector of jsdl__Exact_USCOREType* with length 0..unbounded
    std::vector<jsdl__Exact_USCOREType*> Exact                          0;
/// Vector of jsdl__Range_USCOREType* with length 0..unbounded
    std::vector<jsdl__Range_USCOREType*> Range                          0;
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":JobDefinition_Type is a complexType.
class jsdl__JobDefinition_USCOREType
{ public:
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":JobDescription.
    jsdl__JobDescription_USCOREType*     JobDescription                 1;	///< Required element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Attribute id of type xs:ID.
   @xsd__ID*                             id                             0;	///< Optional attribute.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":JobDescription_Type is a complexType.
class jsdl__JobDescription_USCOREType
{ public:
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":JobIdentification.
    jsdl__JobIdentification_USCOREType*  JobIdentification              0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":Application.
    jsdl__Application_USCOREType*        Application                    0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":Resources.
    jsdl__Resources_USCOREType*          Resources                      0;	///< Optional element.
/// Vector of jsdl__DataStaging_USCOREType* element refs with length 0..unbounded
    std::vector<jsdl__DataStaging_USCOREType*> DataStaging                    0;
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":JobIdentification_Type is a complexType.
class jsdl__JobIdentification_USCOREType
{ public:
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":JobName.
    std::string*                         JobName                        0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":Description.
    jsdl__Description_USCOREType*        Description                    0;	///< Optional element.
/// Vector of std::string element refs with length 0..unbounded
    std::vector<std::string            > JobAnnotation                  0;
/// Vector of std::string element refs with length 0..unbounded
    std::vector<std::string            > JobProject                     0;
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":Application_Type is a complexType.
class jsdl__Application_USCOREType
{ public:
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":ApplicationName.
    std::string*                         ApplicationName                0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":ApplicationVersion.
    std::string*                         ApplicationVersion             0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":Description.
    jsdl__Description_USCOREType*        Description                    0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":Resources_Type is a complexType.
class jsdl__Resources_USCOREType
{ public:
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":CandidateHosts.
    jsdl__CandidateHosts_USCOREType*     CandidateHosts                 0;	///< Optional element.
/// Vector of jsdl__FileSystem_USCOREType* element refs with length 0..unbounded
    std::vector<jsdl__FileSystem_USCOREType*> FileSystem                     0;
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":ExclusiveExecution.
    bool*                                ExclusiveExecution             0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":OperatingSystem.
    jsdl__OperatingSystem_USCOREType*    OperatingSystem                0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":CPUArchitecture.
    jsdl__CPUArchitecture_USCOREType*    CPUArchitecture                0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":IndividualCPUSpeed.
    jsdl__RangeValue_USCOREType*         IndividualCPUSpeed             0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":IndividualCPUTime.
    jsdl__RangeValue_USCOREType*         IndividualCPUTime              0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":IndividualCPUCount.
    jsdl__RangeValue_USCOREType*         IndividualCPUCount             0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":IndividualNetworkBandwidth.
    jsdl__RangeValue_USCOREType*         IndividualNetworkBandwidth     0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":IndividualPhysicalMemory.
    jsdl__RangeValue_USCOREType*         IndividualPhysicalMemory       0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":IndividualVirtualMemory.
    jsdl__RangeValue_USCOREType*         IndividualVirtualMemory        0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":IndividualDiskSpace.
    jsdl__RangeValue_USCOREType*         IndividualDiskSpace            0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":TotalCPUTime.
    jsdl__RangeValue_USCOREType*         TotalCPUTime                   0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":TotalCPUCount.
    jsdl__RangeValue_USCOREType*         TotalCPUCount                  0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":TotalPhysicalMemory.
    jsdl__RangeValue_USCOREType*         TotalPhysicalMemory            0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":TotalVirtualMemory.
    jsdl__RangeValue_USCOREType*         TotalVirtualMemory             0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":TotalDiskSpace.
    jsdl__RangeValue_USCOREType*         TotalDiskSpace                 0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":TotalResourceCount.
    jsdl__RangeValue_USCOREType*         TotalResourceCount             0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":CandidateHosts_Type is a complexType.
class jsdl__CandidateHosts_USCOREType
{ public:
/// Vector of std::string element refs with length 1..unbounded
    std::vector<std::string            > HostName                       1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":CPUArchitecture_Type is a complexType.
class jsdl__CPUArchitecture_USCOREType
{ public:
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":CPUArchitectureName.
    enum jsdl__ProcessorArchitectureEnumeration  CPUArchitectureName            1;	///< Required element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":FileSystem_Type is a complexType.
class jsdl__FileSystem_USCOREType
{ public:
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":FileSystemType.
    enum jsdl__FileSystemTypeEnumeration*  FileSystemType                 0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":Description.
    jsdl__Description_USCOREType*        Description                    0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":MountPoint.
    std::string*                         MountPoint                     0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":DiskSpace.
    jsdl__RangeValue_USCOREType*         DiskSpace                      0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Attribute name of type xs:NCName.
   @xsd__NCName                          name                           1;	///< Required attribute.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":OperatingSystem_Type is a complexType.
class jsdl__OperatingSystem_USCOREType
{ public:
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":OperatingSystemType.
    jsdl__OperatingSystemType_USCOREType*  OperatingSystemType            0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":OperatingSystemVersion.
    std::string*                         OperatingSystemVersion         0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":Description.
    jsdl__Description_USCOREType*        Description                    0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":OperatingSystemType_Type is a complexType.
class jsdl__OperatingSystemType_USCOREType
{ public:
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":OperatingSystemName.
    enum jsdl__OperatingSystemTypeEnumeration  OperatingSystemName            1;	///< Required element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":DataStaging_Type is a complexType.
class jsdl__DataStaging_USCOREType
{ public:
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":FileName.
    std::string                          FileName                       1;	///< Required element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":FilesystemName.
    xsd__NCName*                         FilesystemName                 0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":CreationFlag.
    enum jsdl__CreationFlagEnumeration   CreationFlag                   1;	///< Required element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":DeleteOnTermination.
    bool*                                DeleteOnTermination            0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":Source.
    jsdl__SourceTarget_USCOREType*       Source                         0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":Target.
    jsdl__SourceTarget_USCOREType*       Target                         0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Attribute name of type xs:NCName.
   @xsd__NCName*                         name                           0;	///< Optional attribute.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":SourceTarget_Type is a complexType.
class jsdl__SourceTarget_USCOREType
{ public:
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl":URI.
    xsd__anyURI*                         URI                            0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.ggf.org/jsdl/2005/11/jsdl-posix                           *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":POSIXApplication_Type is a complexType.
class jsdlposix__POSIXApplication_USCOREType
{ public:
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Executable.
    jsdlposix__FileName_USCOREType*      Executable                     0;	///< Optional element.
/// Vector of jsdlposix__Argument_USCOREType* element refs with length 0..unbounded
    std::vector<jsdlposix__Argument_USCOREType*> Argument                       0;
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Input.
    jsdlposix__FileName_USCOREType*      Input                          0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Output.
    jsdlposix__FileName_USCOREType*      Output                         0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Error.
    jsdlposix__FileName_USCOREType*      Error                          0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":WorkingDirectory.
    jsdlposix__DirectoryName_USCOREType*  WorkingDirectory               0;	///< Optional element.
/// Vector of jsdlposix__Environment_USCOREType* element refs with length 0..unbounded
    std::vector<jsdlposix__Environment_USCOREType*> Environment                    0;
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":WallTimeLimit.
    jsdlposix__Limits_USCOREType*        WallTimeLimit                  0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":FileSizeLimit.
    jsdlposix__Limits_USCOREType*        FileSizeLimit                  0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":CoreDumpLimit.
    jsdlposix__Limits_USCOREType*        CoreDumpLimit                  0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":DataSegmentLimit.
    jsdlposix__Limits_USCOREType*        DataSegmentLimit               0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":LockedMemoryLimit.
    jsdlposix__Limits_USCOREType*        LockedMemoryLimit              0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":MemoryLimit.
    jsdlposix__Limits_USCOREType*        MemoryLimit                    0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":OpenDescriptorsLimit.
    jsdlposix__Limits_USCOREType*        OpenDescriptorsLimit           0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":PipeSizeLimit.
    jsdlposix__Limits_USCOREType*        PipeSizeLimit                  0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":StackSizeLimit.
    jsdlposix__Limits_USCOREType*        StackSizeLimit                 0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":CPUTimeLimit.
    jsdlposix__Limits_USCOREType*        CPUTimeLimit                   0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":ProcessCountLimit.
    jsdlposix__Limits_USCOREType*        ProcessCountLimit              0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":VirtualMemoryLimit.
    jsdlposix__Limits_USCOREType*        VirtualMemoryLimit             0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":ThreadCountLimit.
    jsdlposix__Limits_USCOREType*        ThreadCountLimit               0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":UserName.
    jsdlposix__UserName_USCOREType*      UserName                       0;	///< Optional element.
/// Element reference "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":GroupName.
    jsdlposix__GroupName_USCOREType*     GroupName                      0;	///< Optional element.
/// Attribute name of type xs:NCName.
   @xsd__NCName*                         name                           0;	///< Optional attribute.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.ggf.org/jsdl/2005/11/jsdl-posix                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.gridsite.org/namespaces/delegation-2                          *
 *                                                                            *
\******************************************************************************/


/// "http://www.gridsite.org/namespaces/delegation-2":NewProxyReq is a complexType.
/// @brief New proxy certificate request, containing the certificate request and a generated delegation ID.
class delegationns__NewProxyReq
{ public:
/// @brief The new RFC 3280 style proxy certificate request in PEM format with Base64 encoding.
/// Element proxyRequest of type xs:string.
    std::string*                         proxyRequest                  ;	///< Nullable pointer.
/// @brief The ID associated with the new delegation session.
/// Element delegationID of type xs:string.
    std::string*                         delegationID                  ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.gridsite.org/namespaces/delegation-2":DelegationException

/// "http://www.gridsite.org/namespaces/delegation-2":DelegationException is a complexType.
class _delegationns__DelegationException
{ public:
/// @brief The cause of the delegation exception on the server side.
/// Element msg of type xs:string.
    std::string*                         msg                           ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.gridsite.org/namespaces/delegation-1                          *
 *                                                                            *
\******************************************************************************/


/// "http://www.gridsite.org/namespaces/delegation-1":DelegationExceptionType is a complexType.
class delegation1__DelegationExceptionType
{ public:
/// Element message of type xs:string.
    std::string*                         message                       ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://glite.org/wms/wmproxy":GenericFaultType is a complexType with complexContent extension of "http://glite.org/wms/wmproxy":BaseFaultType.
class ns1__GenericFaultType : public ns1__BaseFaultType
{ public:
/*  INHERITED FROM ns1__BaseFaultType:
/// Element methodName of type xs:string.
    std::string                          methodName                     1;	///< Required element.
/// Element Timestamp of type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element ErrorCode of type xs:string.
    std::string*                         ErrorCode                      0;	///< Optional element.
/// Element Description of type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > FaultCause                     0;
    END OF INHERITED */
};

/// "http://glite.org/wms/wmproxy":AuthenticationFaultType is a complexType with complexContent extension of "http://glite.org/wms/wmproxy":BaseFaultType.
class ns1__AuthenticationFaultType : public ns1__BaseFaultType
{ public:
/*  INHERITED FROM ns1__BaseFaultType:
/// Element methodName of type xs:string.
    std::string                          methodName                     1;	///< Required element.
/// Element Timestamp of type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element ErrorCode of type xs:string.
    std::string*                         ErrorCode                      0;	///< Optional element.
/// Element Description of type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > FaultCause                     0;
    END OF INHERITED */
};

/// "http://glite.org/wms/wmproxy":AuthorizationFaultType is a complexType with complexContent extension of "http://glite.org/wms/wmproxy":BaseFaultType.
class ns1__AuthorizationFaultType : public ns1__BaseFaultType
{ public:
/*  INHERITED FROM ns1__BaseFaultType:
/// Element methodName of type xs:string.
    std::string                          methodName                     1;	///< Required element.
/// Element Timestamp of type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element ErrorCode of type xs:string.
    std::string*                         ErrorCode                      0;	///< Optional element.
/// Element Description of type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > FaultCause                     0;
    END OF INHERITED */
};

/// "http://glite.org/wms/wmproxy":InvalidArgumentFaultType is a complexType with complexContent extension of "http://glite.org/wms/wmproxy":BaseFaultType.
class ns1__InvalidArgumentFaultType : public ns1__BaseFaultType
{ public:
/*  INHERITED FROM ns1__BaseFaultType:
/// Element methodName of type xs:string.
    std::string                          methodName                     1;	///< Required element.
/// Element Timestamp of type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element ErrorCode of type xs:string.
    std::string*                         ErrorCode                      0;	///< Optional element.
/// Element Description of type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > FaultCause                     0;
    END OF INHERITED */
};

/// "http://glite.org/wms/wmproxy":GetQuotaManagementFaultType is a complexType with complexContent extension of "http://glite.org/wms/wmproxy":BaseFaultType.
class ns1__GetQuotaManagementFaultType : public ns1__BaseFaultType
{ public:
/*  INHERITED FROM ns1__BaseFaultType:
/// Element methodName of type xs:string.
    std::string                          methodName                     1;	///< Required element.
/// Element Timestamp of type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element ErrorCode of type xs:string.
    std::string*                         ErrorCode                      0;	///< Optional element.
/// Element Description of type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > FaultCause                     0;
    END OF INHERITED */
};

/// "http://glite.org/wms/wmproxy":NoSuitableResourcesFaultType is a complexType with complexContent extension of "http://glite.org/wms/wmproxy":BaseFaultType.
class ns1__NoSuitableResourcesFaultType : public ns1__BaseFaultType
{ public:
/*  INHERITED FROM ns1__BaseFaultType:
/// Element methodName of type xs:string.
    std::string                          methodName                     1;	///< Required element.
/// Element Timestamp of type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element ErrorCode of type xs:string.
    std::string*                         ErrorCode                      0;	///< Optional element.
/// Element Description of type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > FaultCause                     0;
    END OF INHERITED */
};

/// "http://glite.org/wms/wmproxy":JobUnknownFaultType is a complexType with complexContent extension of "http://glite.org/wms/wmproxy":BaseFaultType.
class ns1__JobUnknownFaultType : public ns1__BaseFaultType
{ public:
/*  INHERITED FROM ns1__BaseFaultType:
/// Element methodName of type xs:string.
    std::string                          methodName                     1;	///< Required element.
/// Element Timestamp of type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element ErrorCode of type xs:string.
    std::string*                         ErrorCode                      0;	///< Optional element.
/// Element Description of type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > FaultCause                     0;
    END OF INHERITED */
};

/// "http://glite.org/wms/wmproxy":OperationNotAllowedFaultType is a complexType with complexContent extension of "http://glite.org/wms/wmproxy":BaseFaultType.
class ns1__OperationNotAllowedFaultType : public ns1__BaseFaultType
{ public:
/*  INHERITED FROM ns1__BaseFaultType:
/// Element methodName of type xs:string.
    std::string                          methodName                     1;	///< Required element.
/// Element Timestamp of type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element ErrorCode of type xs:string.
    std::string*                         ErrorCode                      0;	///< Optional element.
/// Element Description of type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > FaultCause                     0;
    END OF INHERITED */
};

/// "http://glite.org/wms/wmproxy":ServerOverloadedFaultType is a complexType with complexContent extension of "http://glite.org/wms/wmproxy":BaseFaultType.
class ns1__ServerOverloadedFaultType : public ns1__BaseFaultType
{ public:
/*  INHERITED FROM ns1__BaseFaultType:
/// Element methodName of type xs:string.
    std::string                          methodName                     1;	///< Required element.
/// Element Timestamp of type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element ErrorCode of type xs:string.
    std::string*                         ErrorCode                      0;	///< Optional element.
/// Element Description of type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > FaultCause                     0;
    END OF INHERITED */
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":Boundary_Type is a complexType with simpleContent.
class jsdl__Boundary_USCOREType
{ public:
/// __item wraps 'xs:double' simpleContent.
    double                               __item                        ;
/// Attribute exclusiveBound of type xs:boolean.
   @bool*                                exclusiveBound                 0;	///< Optional attribute.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl":Exact_Type is a complexType with simpleContent.
class jsdl__Exact_USCOREType
{ public:
/// __item wraps 'xs:double' simpleContent.
    double                               __item                        ;
/// Attribute epsilon of type xs:double.
   @double*                              epsilon                        0;	///< Optional attribute.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Environment_Type is a complexType with simpleContent.
class jsdlposix__Environment_USCOREType
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute name of type xs:NCName.
   @xsd__NCName                          name                           1;	///< Required attribute.
/// Attribute filesystemName of type xs:NCName.
   @xsd__NCName*                         filesystemName                 0;	///< Optional attribute.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Argument_Type is a complexType with simpleContent.
class jsdlposix__Argument_USCOREType
{ public:
/// __item wraps 'xs:normalizedString' simpleContent.
    xsd__normalizedString                __item                        ;
/// Attribute filesystemName of type xs:NCName.
   @xsd__NCName*                         filesystemName                 0;	///< Optional attribute.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":FileName_Type is a complexType with simpleContent.
class jsdlposix__FileName_USCOREType
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute filesystemName of type xs:NCName.
   @xsd__NCName*                         filesystemName                 0;	///< Optional attribute.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":DirectoryName_Type is a complexType with simpleContent.
class jsdlposix__DirectoryName_USCOREType
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute filesystemName of type xs:NCName.
   @xsd__NCName*                         filesystemName                 0;	///< Optional attribute.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Limits_Type is a complexType with simpleContent.
class jsdlposix__Limits_USCOREType
{ public:
/// __item wraps 'xs:nonNegativeInteger' simpleContent.
    xsd__nonNegativeInteger              __item                        ;
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":UserName_Type is a complexType with simpleContent.
class jsdlposix__UserName_USCOREType
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":GroupName_Type is a complexType with simpleContent.
class jsdlposix__GroupName_USCOREType
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://glite.org/wms/wmproxy                                             *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://glite.org/wms/wmproxy":AuthenticationFault of type "http://glite.org/wms/wmproxy":AuthenticationFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://glite.org/wms/wmproxy":AuthorizationFault of type "http://glite.org/wms/wmproxy":AuthorizationFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://glite.org/wms/wmproxy":InvalidArgumentFault of type "http://glite.org/wms/wmproxy":InvalidArgumentFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://glite.org/wms/wmproxy":GetQuotaManagementFault of type "http://glite.org/wms/wmproxy":GetQuotaManagementFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://glite.org/wms/wmproxy":NoSuitableResourcesFault of type "http://glite.org/wms/wmproxy":NoSuitableResourcesFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://glite.org/wms/wmproxy":GenericFault of type "http://glite.org/wms/wmproxy":GenericFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://glite.org/wms/wmproxy":JobUnknownFault of type "http://glite.org/wms/wmproxy":JobUnknownFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://glite.org/wms/wmproxy":OperationNotAllowedFault of type "http://glite.org/wms/wmproxy":OperationNotAllowedFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://glite.org/wms/wmproxy":ServerOverloadedFault of type "http://glite.org/wms/wmproxy":ServerOverloadedFaultType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://glite.org/wms/wmproxy                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.ggf.org/jsdl/2005/11/jsdl                                 *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":JobDefinition of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":JobDefinition_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":JobDescription of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":JobDescription_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":JobIdentification of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":JobIdentification_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":JobName of type xs:string.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":Description of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":Description_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":JobAnnotation of type xs:string.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":JobProject of type xs:string.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":Application of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":Application_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":ApplicationName of type xs:string.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":ApplicationVersion of type xs:string.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":Resources of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":Resources_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":CandidateHosts of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":CandidateHosts_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":HostName of type xs:string.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":OperatingSystem of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":OperatingSystem_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":OperatingSystemType of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":OperatingSystemType_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":OperatingSystemVersion of type xs:string.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":OperatingSystemName of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":OperatingSystemTypeEnumeration.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":ExclusiveExecution of type xs:boolean.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":CPUArchitecture of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":CPUArchitecture_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":CPUArchitectureName of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":ProcessorArchitectureEnumeration.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":FileSystem of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":FileSystem_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":FileSystemType of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":FileSystemTypeEnumeration.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":MountPoint of type xs:string.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":DiskSpace of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":RangeValue_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":IndividualCPUTime of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":RangeValue_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":IndividualCPUSpeed of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":RangeValue_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":IndividualCPUCount of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":RangeValue_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":IndividualPhysicalMemory of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":RangeValue_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":IndividualVirtualMemory of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":RangeValue_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":IndividualNetworkBandwidth of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":RangeValue_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":IndividualDiskSpace of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":RangeValue_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":TotalCPUTime of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":RangeValue_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":TotalCPUCount of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":RangeValue_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":TotalPhysicalMemory of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":RangeValue_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":TotalVirtualMemory of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":RangeValue_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":TotalDiskSpace of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":RangeValue_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":TotalResourceCount of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":RangeValue_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":DataStaging of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":DataStaging_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":FileName of type xs:string.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":FilesystemName of type xs:NCName.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":CreationFlag of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":CreationFlagEnumeration.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":DeleteOnTermination of type xs:boolean.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":Source of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":SourceTarget_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":Target of type "http://schemas.ggf.org/jsdl/2005/11/jsdl":SourceTarget_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl":URI of type xs:anyURI.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.ggf.org/jsdl/2005/11/jsdl                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.ggf.org/jsdl/2005/11/jsdl-posix                           *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":POSIXApplication of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":POSIXApplication_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Executable of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":FileName_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Argument of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Argument_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Input of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":FileName_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Output of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":FileName_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Error of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":FileName_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":WorkingDirectory of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":DirectoryName_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Environment of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Environment_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":WallTimeLimit of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Limits_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":FileSizeLimit of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Limits_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":CoreDumpLimit of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Limits_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":DataSegmentLimit of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Limits_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":LockedMemoryLimit of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Limits_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":MemoryLimit of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Limits_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":OpenDescriptorsLimit of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Limits_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":PipeSizeLimit of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Limits_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":StackSizeLimit of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Limits_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":CPUTimeLimit of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Limits_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":ProcessCountLimit of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Limits_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":VirtualMemoryLimit of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Limits_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":ThreadCountLimit of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":Limits_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":UserName of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":UserName_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":GroupName of type "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix":GroupName_Type.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.ggf.org/jsdl/2005/11/jsdl-posix                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.ggf.org/jsdl/2005/11/jsdl-posix                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.ggf.org/jsdl/2005/11/jsdl-posix                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.gridsite.org/namespaces/delegation-2                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.gridsite.org/namespaces/delegation-2                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.gridsite.org/namespaces/delegation-1                          *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://www.gridsite.org/namespaces/delegation-1":DelegationException of type "http://www.gridsite.org/namespaces/delegation-1":DelegationExceptionType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.gridsite.org/namespaces/delegation-1                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap delegation1 service name:	Delegation1SoapBinding 
//gsoap delegation1 service type:	Delegation 
//gsoap delegation1 service port:	https://localhost:8443/glite-security-delegation 
//gsoap delegation1 service namespace:	http://www.gridsite.org/namespaces/delegation-1 
//gsoap delegation1 service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap delegationns service name:	DelegationSoapBinding 
//gsoap delegationns service type:	Delegation 
//gsoap delegationns service port:	https://localhost:8443/glite-security-delegation 
//gsoap delegationns service namespace:	http://www.gridsite.org/namespaces/delegation-2 
//gsoap delegationns service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns1  service name:	WMProxy 
//gsoap ns1  service type:	WMProxy_USCOREPortType 
//gsoap ns1  service port:	https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server 
//gsoap ns1  service namespace:	http://glite.org/wms/wmproxy 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage WMProxy Definitions

@section WMProxy_bindings Service Bindings
  - @ref Delegation1SoapBinding
  - @ref DelegationSoapBinding
  - @ref WMProxy

@section WMProxy_more More Information
- @ref page_notes "Notes"
- @ref page_XMLDataBinding "XML Data Binding"
- @ref SOAP_ENV__Header "SOAP Header Content"
- @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page Delegation1SoapBinding Binding "Delegation1SoapBinding"

@section Delegation1SoapBinding_operations Operations of Binding  "Delegation1SoapBinding"
  - @ref delegation1__getProxyReq
  - @ref delegation1__putProxy

@section Delegation1SoapBinding_ports Endpoints of Binding  "Delegation1SoapBinding"
  - https://localhost:8443/glite-security-delegation

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page DelegationSoapBinding Binding "DelegationSoapBinding"

@section DelegationSoapBinding_operations Operations of Binding  "DelegationSoapBinding"
  - @ref delegationns__getVersion
  - @ref delegationns__getInterfaceVersion
  - @ref delegationns__getServiceMetadata
  - @ref delegationns__getProxyReq
  - @ref delegationns__getNewProxyReq
  - @ref delegationns__renewProxyReq
  - @ref delegationns__putProxy
  - @ref delegationns__getTerminationTime
  - @ref delegationns__destroy

@section DelegationSoapBinding_ports Endpoints of Binding  "DelegationSoapBinding"
  - https://localhost:8443/glite-security-delegation

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page WMProxy Binding "WMProxy"

@section WMProxy_USCOREPortType_port Port Documentation "WMProxy_PortType"

					Workload Manager Proxy service
					This is the service that allows accessing the submission and control functionalities of the WMS
			

@section WMProxy_operations Operations of Binding  "WMProxy"
  - @ref ns1__getProxyReq
  - @ref ns1__putProxy
  - @ref ns1__getVersion
  - @ref ns1__getJDL
  - @ref ns1__jobRegister
  - @ref ns1__jobRegisterJSDL
  - @ref ns1__jobStart
  - @ref ns1__jobSubmit
  - @ref ns1__jobSubmitJSDL
  - @ref ns1__jobCancel
  - @ref ns1__getMaxInputSandboxSize
  - @ref ns1__getSandboxDestURI
  - @ref ns1__getSandboxBulkDestURI
  - @ref ns1__getTotalQuota
  - @ref ns1__getFreeQuota
  - @ref ns1__jobPurge
  - @ref ns1__getOutputFileList
  - @ref ns1__jobListMatch
  - @ref ns1__jobListMatchJSDL
  - @ref ns1__getJobTemplate
  - @ref ns1__getDAGTemplate
  - @ref ns1__getCollectionTemplate
  - @ref ns1__getIntParametricJobTemplate
  - @ref ns1__getStringParametricJobTemplate
  - @ref ns1__getACLItems
  - @ref ns1__addACLItems
  - @ref ns1__removeACLItem
  - @ref ns1__getDelegatedProxyInfo
  - @ref ns1__getJobProxyInfo
  - @ref ns1__enableFilePerusal
  - @ref ns1__getPerusalFiles
  - @ref ns1__getTransferProtocols
  - @ref ns1__getJobStatus

@section WMProxy_ports Endpoints of Binding  "WMProxy"
  - https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use option -j to omit.

*/
struct SOAP_ENV__Detail
{
// xsd:anyAttribute omitted: to parse attribute content of the Detail element into DOM anyAttribute, use wsdl2h option -d.
    delegation1__DelegationExceptionType*  delegation1__DelegationException;
///< SOAP Fault element ""http://www.gridsite.org/namespaces/delegation-1":DelegationException" part "fault"
    _delegationns__DelegationException*  delegationns__DelegationException;
///< SOAP Fault element ""http://www.gridsite.org/namespaces/delegation-2":DelegationException" part "fault"
    ns1__AuthenticationFaultType*        ns1__AuthenticationFault      ;
///< SOAP Fault element ""http://glite.org/wms/wmproxy":AuthenticationFault" part "fault"
    ns1__AuthorizationFaultType*         ns1__AuthorizationFault       ;
///< SOAP Fault element ""http://glite.org/wms/wmproxy":AuthorizationFault" part "fault"
    ns1__GenericFaultType*               ns1__GenericFault             ;
///< SOAP Fault element ""http://glite.org/wms/wmproxy":GenericFault" part "GenericFault"
    ns1__GetQuotaManagementFaultType*    ns1__GetQuotaManagementFault  ;
///< SOAP Fault element ""http://glite.org/wms/wmproxy":GetQuotaManagementFault" part "fault"
    ns1__InvalidArgumentFaultType*       ns1__InvalidArgumentFault     ;
///< SOAP Fault element ""http://glite.org/wms/wmproxy":InvalidArgumentFault" part "fault"
    ns1__JobUnknownFaultType*            ns1__JobUnknownFault          ;
///< SOAP Fault element ""http://glite.org/wms/wmproxy":JobUnknownFault" part "fault"
    ns1__NoSuitableResourcesFaultType*   ns1__NoSuitableResourcesFault ;
///< SOAP Fault element ""http://glite.org/wms/wmproxy":NoSuitableResourcesFault" part "fault"
    ns1__OperationNotAllowedFaultType*   ns1__OperationNotAllowedFault ;
///< SOAP Fault element ""http://glite.org/wms/wmproxy":OperationNotAllowedFault" part "fault"
    ns1__ServerOverloadedFaultType*      ns1__ServerOverloadedFault    ;
///< SOAP Fault element ""http://glite.org/wms/wmproxy":ServerOverloadedFault" part "fault"
    int                                  __type                        ;	///< set to SOAP_TYPE_X for a serializable type X
    void                                *fault                         ;	///< points to serializable object X or NULL
    _XML                                 __any                         ;	///< Catch any element content in XML string.
};

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   Delegation1SoapBinding                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   delegation1__getProxyReq                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "delegation1__getProxyReqResponse" of service binding "Delegation1SoapBinding" operation "delegation1__getProxyReq"
struct delegation1__getProxyReqResponse
{
    std::string                         _getProxyReqReturn;
};

/// Operation "delegation1__getProxyReq" of service binding "Delegation1SoapBinding"

/**

Operation details:


            Starts the delegation procedure by asking for a certificate 
            signing request from the server. The server answers with a
            certificate signing request which includes the public key 
            for the new delegated credentials.
         
  - SOAP RPC literal style
  - SOAP Fault: "http://www.gridsite.org/namespaces/delegation-1":DelegationException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_delegation1__getProxyReq(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         delegationID,
    // response parameters:
    struct delegation1__getProxyReqResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int delegation1__getProxyReq(
    struct soap *soap,
    // request parameters:
    std::string                         delegationID,
    // response parameters:
    struct delegation1__getProxyReqResponse&
  );
@endcode

C++ proxy class (defined in soapDelegation1SoapBindingProxy.h):
@code
  class Delegation1SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDelegation1SoapBindingService.h):
@code
  class Delegation1SoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap delegation1 service method-style:	getProxyReq rpc
//gsoap delegation1 service method-encoding:	getProxyReq literal
//gsoap delegation1 service method-action:	getProxyReq ""
//gsoap delegation1 service method-fault:	getProxyReq delegation1__DelegationException
int delegation1__getProxyReq(
    std::string                         _delegationID,	///< Request parameter
    struct delegation1__getProxyReqResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   delegation1__putProxy                                                    *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "delegation1__putProxyResponse" of service binding "Delegation1SoapBinding" operation "delegation1__putProxy"
struct delegation1__putProxyResponse
{
};

/// Operation "delegation1__putProxy" of service binding "Delegation1SoapBinding"

/**

Operation details:


            Finishes the delegation procedure by sending the signed 
            proxy certificate to the server.
         
  - SOAP RPC literal style
  - SOAP Fault: "http://www.gridsite.org/namespaces/delegation-1":DelegationException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_delegation1__putProxy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         delegationID,
    std::string                         proxy,
    // response parameters:
    struct delegation1__putProxyResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int delegation1__putProxy(
    struct soap *soap,
    // request parameters:
    std::string                         delegationID,
    std::string                         proxy,
    // response parameters:
    struct delegation1__putProxyResponse&
  );
@endcode

C++ proxy class (defined in soapDelegation1SoapBindingProxy.h):
@code
  class Delegation1SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDelegation1SoapBindingService.h):
@code
  class Delegation1SoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap delegation1 service method-style:	putProxy rpc
//gsoap delegation1 service method-encoding:	putProxy literal
//gsoap delegation1 service method-action:	putProxy ""
//gsoap delegation1 service method-fault:	putProxy delegation1__DelegationException
int delegation1__putProxy(
    std::string                         _delegationID,	///< Request parameter
    std::string                         _proxy,	///< Request parameter
    struct delegation1__putProxyResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   DelegationSoapBinding                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   delegationns__getVersion                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "delegationns__getVersionResponse" of service binding "DelegationSoapBinding" operation "delegationns__getVersion"
struct delegationns__getVersionResponse
{
/**  getVersionReturn parameter documentation:

            The version number of the service implementation.
        
*/

    std::string                         getVersionReturn;
};

/// Operation "delegationns__getVersion" of service binding "DelegationSoapBinding"

/**

Operation details:


            This method can be used to query the version of the service.
         
  - SOAP RPC literal style
  - SOAP Fault: "http://www.gridsite.org/namespaces/delegation-2":DelegationException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_delegationns__getVersion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct delegationns__getVersionResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int delegationns__getVersion(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct delegationns__getVersionResponse&
  );
@endcode

C++ proxy class (defined in soapDelegationSoapBindingProxy.h):
@code
  class DelegationSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDelegationSoapBindingService.h):
@code
  class DelegationSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap delegationns service method-style:	getVersion rpc
//gsoap delegationns service method-encoding:	getVersion literal
//gsoap delegationns service method-action:	getVersion ""
//gsoap delegationns service method-fault:	getVersion delegationns__DelegationException
int delegationns__getVersion(
    struct delegationns__getVersionResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   delegationns__getInterfaceVersion                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "delegationns__getInterfaceVersionResponse" of service binding "DelegationSoapBinding" operation "delegationns__getInterfaceVersion"
struct delegationns__getInterfaceVersionResponse
{
/**  getInterfaceVersionReturn parameter documentation:

            The version number of the supported interface.
        
*/

    std::string                         getInterfaceVersionReturn;
};

/// Operation "delegationns__getInterfaceVersion" of service binding "DelegationSoapBinding"

/**

Operation details:


            This method can be used to query the version of 
            the supported interface.
         
  - SOAP RPC literal style
  - SOAP Fault: "http://www.gridsite.org/namespaces/delegation-2":DelegationException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_delegationns__getInterfaceVersion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct delegationns__getInterfaceVersionResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int delegationns__getInterfaceVersion(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct delegationns__getInterfaceVersionResponse&
  );
@endcode

C++ proxy class (defined in soapDelegationSoapBindingProxy.h):
@code
  class DelegationSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDelegationSoapBindingService.h):
@code
  class DelegationSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap delegationns service method-style:	getInterfaceVersion rpc
//gsoap delegationns service method-encoding:	getInterfaceVersion literal
//gsoap delegationns service method-action:	getInterfaceVersion ""
//gsoap delegationns service method-fault:	getInterfaceVersion delegationns__DelegationException
int delegationns__getInterfaceVersion(
    struct delegationns__getInterfaceVersionResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   delegationns__getServiceMetadata                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "delegationns__getServiceMetadataResponse" of service binding "DelegationSoapBinding" operation "delegationns__getServiceMetadata"
struct delegationns__getServiceMetadataResponse
{
/**  getServiceMetadataReturn parameter documentation:

            The value for the queried key.
        
*/

    std::string                         _getServiceMetadataReturn;
};

/// Operation "delegationns__getServiceMetadata" of service binding "DelegationSoapBinding"

/**

Operation details:


            This method can be used to query implementation specific
            meta information about the service.
         
  - SOAP RPC literal style
  - SOAP Fault: "http://www.gridsite.org/namespaces/delegation-2":DelegationException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_delegationns__getServiceMetadata(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         key,
    // response parameters:
    struct delegationns__getServiceMetadataResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int delegationns__getServiceMetadata(
    struct soap *soap,
    // request parameters:
    std::string                         key,
    // response parameters:
    struct delegationns__getServiceMetadataResponse&
  );
@endcode

C++ proxy class (defined in soapDelegationSoapBindingProxy.h):
@code
  class DelegationSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDelegationSoapBindingService.h):
@code
  class DelegationSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap delegationns service method-style:	getServiceMetadata rpc
//gsoap delegationns service method-encoding:	getServiceMetadata literal
//gsoap delegationns service method-action:	getServiceMetadata ""
//gsoap delegationns service method-fault:	getServiceMetadata delegationns__DelegationException
int delegationns__getServiceMetadata(
/**  key parameter documentation:

            The key of the queried service metadata, for example
            'features', 'timestamp' or 'glueinfo'.
        
*/

    std::string                         _key,	///< Request parameter
    struct delegationns__getServiceMetadataResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   delegationns__getProxyReq                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "delegationns__getProxyReqResponse" of service binding "DelegationSoapBinding" operation "delegationns__getProxyReq"
struct delegationns__getProxyReqResponse
{
/**  getProxyReqReturn parameter documentation:

            The new RFC 3280 style proxy certificate request 
            in PEM format with Base64 encoding.
        
*/

    std::string                         _getProxyReqReturn;
};

/// Operation "delegationns__getProxyReq" of service binding "DelegationSoapBinding"

/**

Operation details:


            <para>
                Starts the delegation procedure by asking for a certificate 
                signing request from the server. The server answers with a
                certificate signing request which includes the public key 
                for the new delegated credentials. putProxy() has to be
                called to finish the procedure.
            </para>
            <orderedlist>
                <listitem><para>
                    Check if a delegation ID was provided.  If not, generate a delegation
                    id by hashing the client DN and client VOMS attributes.
                </para></listitem>
                <listitem><para>
                    Check if the delegation ID already exists in the
                    <emphasis>storage-area</emphasis>.  If it does 
                    (a credential renewal is happening), check
                    existing info (DN and VOMS attributes) against client info.
                    Throw exception if they do not match.
                </para></listitem>
                <listitem><para>
                    Create a new private/public key-pair (see also <emphasis>Key
                    Generation Semantics</emphasis>).
                </para></listitem>
                <listitem><para>
                    Generate a new proxy certificate request.
                </para></listitem>
                <listitem><para>
                    Store private key and cert request in
                    <emphasis>storage-cache-area</emphasis>, along with the
                    requesting DN and VOMS attributes.
                </para></listitem>
            </orderedlist>
         
  - SOAP RPC literal style
  - SOAP Fault: "http://www.gridsite.org/namespaces/delegation-2":DelegationException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_delegationns__getProxyReq(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         delegationID,
    // response parameters:
    struct delegationns__getProxyReqResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int delegationns__getProxyReq(
    struct soap *soap,
    // request parameters:
    std::string                         delegationID,
    // response parameters:
    struct delegationns__getProxyReqResponse&
  );
@endcode

C++ proxy class (defined in soapDelegationSoapBindingProxy.h):
@code
  class DelegationSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDelegationSoapBindingService.h):
@code
  class DelegationSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap delegationns service method-style:	getProxyReq rpc
//gsoap delegationns service method-encoding:	getProxyReq literal
//gsoap delegationns service method-action:	getProxyReq ""
//gsoap delegationns service method-fault:	getProxyReq delegationns__DelegationException
int delegationns__getProxyReq(
/**  delegationID parameter documentation:

            The ID of the new delegation session, specified by the client.
            The ID can be empty.
        
*/

    std::string                         _delegationID,	///< Request parameter
    struct delegationns__getProxyReqResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   delegationns__getNewProxyReq                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "delegationns__getNewProxyReqResponse" of service binding "DelegationSoapBinding" operation "delegationns__getNewProxyReq"
struct delegationns__getNewProxyReqResponse
{
/**  getNewProxyReqReturn parameter documentation:

            The server side generated ID of the new delegation
            session and the new RFC 3280 style proxy certificate 
            request in PEM format with Base64 encoding.
        
*/

    delegationns__NewProxyReq*          getNewProxyReqReturn;
};

/// Operation "delegationns__getNewProxyReq" of service binding "DelegationSoapBinding"

/**

Operation details:


            <para>
                Starts the delegation procedure by asking for a certificate
                signing request from the server. The server answers with a
                certificate signing request which includes the public key
                for the new delegated credentials. putProxy() has to be
                called to finish the procedure.
            </para>
            <orderedlist>
                <listitem><para>
                    Generate a delegation
                    ID by hashing the client DN and client VOMS attributes.
                </para></listitem>
                <listitem><para>
                    Check if the delegation ID already exists in the
                    <emphasis>storage-area</emphasis>.  If it does, check
                    existing info (DN and VOMS attributes) against client info.
                    Throw exception if they do not match, because then this is 
                    the rare case of hash collision, i.e. two different clients 
                    are mapped to the same delegation ID.
                </para></listitem>
                <listitem><para>
                    Create a new private/public key-pair (see also <emphasis>Key
                    Generation Semantics</emphasis>).
                </para></listitem>
                <listitem><para>
                    Generate a new certificate request.
                </para></listitem>
                <listitem><para>
                    Store private key and cert request in
                    <emphasis>storage-cache-area</emphasis>, along with the
                    requesting DN and VOMS attributes.
                </para></listitem>
            </orderedlist>
         
  - SOAP RPC literal style
  - SOAP Fault: "http://www.gridsite.org/namespaces/delegation-2":DelegationException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_delegationns__getNewProxyReq(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct delegationns__getNewProxyReqResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int delegationns__getNewProxyReq(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct delegationns__getNewProxyReqResponse&
  );
@endcode

C++ proxy class (defined in soapDelegationSoapBindingProxy.h):
@code
  class DelegationSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDelegationSoapBindingService.h):
@code
  class DelegationSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap delegationns service method-style:	getNewProxyReq rpc
//gsoap delegationns service method-encoding:	getNewProxyReq literal
//gsoap delegationns service method-action:	getNewProxyReq ""
//gsoap delegationns service method-fault:	getNewProxyReq delegationns__DelegationException
int delegationns__getNewProxyReq(
    struct delegationns__getNewProxyReqResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   delegationns__renewProxyReq                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "delegationns__renewProxyReqResponse" of service binding "DelegationSoapBinding" operation "delegationns__renewProxyReq"
struct delegationns__renewProxyReqResponse
{
/**  renewProxyReqReturn parameter documentation:

            The new RFC 3280 style proxy certificate request,
            which is to replace the existing one,
            in PEM format with Base64 encoding.
        
*/

    std::string                         _renewProxyReqReturn;
};

/// Operation "delegationns__renewProxyReq" of service binding "DelegationSoapBinding"

/**

Operation details:


            <para>
            Restarts the delegation procedure by asking for a certificate
            signing request from the server for an already existing delegation ID.
            The server answers with a certificate signing request which includes 
            the public key for new delegated credentials. putProxy() has to be
            called to finish the procedure.
            </para>
            <orderedlist>
                <listitem><para>
                    Check if a delegation ID was provided. If not, generate a delegation
                    id by hashing the client DN and client VOMS attributes.
                </para></listitem>
                <listitem><para>
                    Check if the delegation ID already exists in the
                    <emphasis>storage-area</emphasis>. If it does
                    not, then throw an exception.
                </para></listitem>
                <listitem><para>
                    Check if the existing info (DN and VOMS attributes) against client info.
                    Throw exception if they do not match.
                </para></listitem>
                <listitem><para>
                    Create a new private/public key-pair (see also <emphasis>Key
                    Generation Semantics</emphasis>).
                </para></listitem>
                <listitem><para>
                    Generate a new certificate request.
                </para></listitem>
                <listitem><para>
                    Store private key and cert request in
                    <emphasis>storage-cache-area</emphasis>, along with the
                    requesting DN and VOMS attributes.
                </para></listitem>
            </orderedlist>
         
  - SOAP RPC literal style
  - SOAP Fault: "http://www.gridsite.org/namespaces/delegation-2":DelegationException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_delegationns__renewProxyReq(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         delegationID,
    // response parameters:
    struct delegationns__renewProxyReqResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int delegationns__renewProxyReq(
    struct soap *soap,
    // request parameters:
    std::string                         delegationID,
    // response parameters:
    struct delegationns__renewProxyReqResponse&
  );
@endcode

C++ proxy class (defined in soapDelegationSoapBindingProxy.h):
@code
  class DelegationSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDelegationSoapBindingService.h):
@code
  class DelegationSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap delegationns service method-style:	renewProxyReq rpc
//gsoap delegationns service method-encoding:	renewProxyReq literal
//gsoap delegationns service method-action:	renewProxyReq ""
//gsoap delegationns service method-fault:	renewProxyReq delegationns__DelegationException
int delegationns__renewProxyReq(
/**  delegationID parameter documentation:

            The ID of an already existing delegation session,
            where the client wants to renew the delegated 
            credential.
        
*/

    std::string                         _delegationID,	///< Request parameter
    struct delegationns__renewProxyReqResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   delegationns__putProxy                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "delegationns__putProxyResponse" of service binding "DelegationSoapBinding" operation "delegationns__putProxy"
struct delegationns__putProxyResponse
{
};

/// Operation "delegationns__putProxy" of service binding "DelegationSoapBinding"

/**

Operation details:


            <para>
            Finishes the delegation procedure by sending the signed 
            proxy certificate to the server.
            </para>
            <orderedlist>
                <listitem><para>
                    Check if a delegation ID was provided.  If not, generate a
                    delegation id by hashing the client DN and client VOMS
                    attributes.
                </para></listitem>
                <listitem><para>
                    Check if the delegation ID already exists in the
                    <emphasis>storage-area</emphasis>.  If it does, check
                    existing info (DN and VOMS attributes) against client info.
                    Throw exception if it does not match.
                </para></listitem>
                <listitem><para>
                    Check, if client information matches proxy information.
                </para></listitem>
                <listitem><para>
                    Check given proxy against private key of delegation ID in
                    <emphasis>storage-cache-area</emphasis>.  If they do not
                    match, throw exception.
                </para></listitem>
                <listitem><para>
                    Store proxy in <emphasis>storage-area</emphasis>
                    and clean up the <emphasis>storage-cache-area</emphasis>.
                </para></listitem>
            </orderedlist>
         
  - SOAP RPC literal style
  - SOAP Fault: "http://www.gridsite.org/namespaces/delegation-2":DelegationException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_delegationns__putProxy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         delegationID,
    std::string                         proxy,
    // response parameters:
    struct delegationns__putProxyResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int delegationns__putProxy(
    struct soap *soap,
    // request parameters:
    std::string                         delegationID,
    std::string                         proxy,
    // response parameters:
    struct delegationns__putProxyResponse&
  );
@endcode

C++ proxy class (defined in soapDelegationSoapBindingProxy.h):
@code
  class DelegationSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDelegationSoapBindingService.h):
@code
  class DelegationSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap delegationns service method-style:	putProxy rpc
//gsoap delegationns service method-encoding:	putProxy literal
//gsoap delegationns service method-action:	putProxy ""
//gsoap delegationns service method-fault:	putProxy delegationns__DelegationException
int delegationns__putProxy(
/**  delegationID parameter documentation:

            The ID of an already existing delegation session, 
            initiated by getProxyReq() or getNewProxyReq().
        
*/

    std::string                         _delegationID,	///< Request parameter
/**  proxy parameter documentation:

            RFC 3280 style proxy certificate, signed by the
            client, in PEM format with Base64 encoding.
        
*/

    std::string                         _proxy,	///< Request parameter
    struct delegationns__putProxyResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   delegationns__getTerminationTime                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "delegationns__getTerminationTimeResponse" of service binding "DelegationSoapBinding" operation "delegationns__getTerminationTime"
struct delegationns__getTerminationTimeResponse
{
/**  getTerminationTimeReturn parameter documentation:

            The date and time when the delegated credentials will expire.
        
*/

    time_t                              _getTerminationTimeReturn;
};

/// Operation "delegationns__getTerminationTime" of service binding "DelegationSoapBinding"

/**

Operation details:


            Returns the termination (expiration) date and time of the credential,
            associated with the given delegaion ID. If there was no delegation ID, 
            then generate one by hashing the client DN and client VOMS attributes.
         
  - SOAP RPC literal style
  - SOAP Fault: "http://www.gridsite.org/namespaces/delegation-2":DelegationException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_delegationns__getTerminationTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         delegationID,
    // response parameters:
    struct delegationns__getTerminationTimeResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int delegationns__getTerminationTime(
    struct soap *soap,
    // request parameters:
    std::string                         delegationID,
    // response parameters:
    struct delegationns__getTerminationTimeResponse&
  );
@endcode

C++ proxy class (defined in soapDelegationSoapBindingProxy.h):
@code
  class DelegationSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDelegationSoapBindingService.h):
@code
  class DelegationSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap delegationns service method-style:	getTerminationTime rpc
//gsoap delegationns service method-encoding:	getTerminationTime literal
//gsoap delegationns service method-action:	getTerminationTime ""
//gsoap delegationns service method-fault:	getTerminationTime delegationns__DelegationException
int delegationns__getTerminationTime(
/**  delegationID parameter documentation:

            The ID of an already existing delegation session to be queried.
        
*/

    std::string                         _delegationID,	///< Request parameter
    struct delegationns__getTerminationTimeResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   delegationns__destroy                                                    *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "delegationns__destroyResponse" of service binding "DelegationSoapBinding" operation "delegationns__destroy"
struct delegationns__destroyResponse
{
};

/// Operation "delegationns__destroy" of service binding "DelegationSoapBinding"

/**

Operation details:


            Destroys the delegated credentials associated with the
            given delegation ID immediately. If there was no delegation ID, 
            then generate one by hashing the client DN and client VOMS attributes.
         
  - SOAP RPC literal style
  - SOAP Fault: "http://www.gridsite.org/namespaces/delegation-2":DelegationException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_delegationns__destroy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         delegationID,
    // response parameters:
    struct delegationns__destroyResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int delegationns__destroy(
    struct soap *soap,
    // request parameters:
    std::string                         delegationID,
    // response parameters:
    struct delegationns__destroyResponse&
  );
@endcode

C++ proxy class (defined in soapDelegationSoapBindingProxy.h):
@code
  class DelegationSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDelegationSoapBindingService.h):
@code
  class DelegationSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap delegationns service method-style:	destroy rpc
//gsoap delegationns service method-encoding:	destroy literal
//gsoap delegationns service method-action:	destroy ""
//gsoap delegationns service method-fault:	destroy delegationns__DelegationException
int delegationns__destroy(
/**  delegationID parameter documentation:

            The ID of an already existing delegation session to be destroyed.
        
*/

    std::string                         _delegationID,	///< Request parameter
    struct delegationns__destroyResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   WMProxy                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getProxyReq                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getProxyReqResponse" of service binding "WMProxy" operation "ns1__getProxyReq"
struct ns1__getProxyReqResponse
{
    std::string                         _request;
};

/// Operation "ns1__getProxyReq" of service binding "WMProxy"

/**

Operation details:


				
				
				This operation starts the delegation procedure by asking for a certificate
     			signing request from the server. The server answers with a
     			certificate signing request which includes the public key
     			for the new delegated credentials.
     
				Input: string containing the delegationID (i.e. the id used to identify 
					the delegation process and the resulting delegated credentials 
					in the server).
     
				Output: string containing the certificate signing request for the client 
					to sign using the user's credentials.

				Faults:
				AuthenticationFault: 	a generic authentication problem occured.
				GenericFault: 		another problem occured.
				AuthorizationFault: 	client is not authorized to perform this operation.

			
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getProxyReq(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         delegationID,
    // response parameters:
    struct ns1__getProxyReqResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getProxyReq(
    struct soap *soap,
    // request parameters:
    std::string                         delegationID,
    // response parameters:
    struct ns1__getProxyReqResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getProxyReq rpc
//gsoap ns1  service method-encoding:	getProxyReq literal
//gsoap ns1  service method-action:	getProxyReq ""
//gsoap ns1  service method-fault:	getProxyReq ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getProxyReq ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getProxyReq ns1__GenericFault
//gsoap ns1  service method-fault:	getProxyReq ns1__ServerOverloadedFault
int ns1__getProxyReq(
    std::string                         _delegationID,	///< Request parameter
    struct ns1__getProxyReqResponse    &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__putProxy                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__putProxyResponse" of service binding "WMProxy" operation "ns1__putProxy"
struct ns1__putProxyResponse
{
};

/// Operation "ns1__putProxy" of service binding "WMProxy"

/**

Operation details:


				

     			This operation finishes the delegation procedure by sending the signed
     			proxy certificate to the server.

				Input: string containing the delegationID (i.e. the id used to identify the
					delegation process and the resulting delegated credentials
					in the server).
				Input: string containing the signed proxy certificate.

				Output: no output.

				Faults:
				AuthenticationFault: 	a generic authentication problem occured.
				GenericFault: 		another problem occured.
				AuthorizationFault: 	client is not authorized to perform this operation.

			
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__putProxy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         delegationID,
    std::string                         proxy,
    // response parameters:
    struct ns1__putProxyResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__putProxy(
    struct soap *soap,
    // request parameters:
    std::string                         delegationID,
    std::string                         proxy,
    // response parameters:
    struct ns1__putProxyResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	putProxy rpc
//gsoap ns1  service method-encoding:	putProxy literal
//gsoap ns1  service method-action:	putProxy ""
//gsoap ns1  service method-fault:	putProxy ns1__AuthenticationFault
//gsoap ns1  service method-fault:	putProxy ns1__AuthorizationFault
//gsoap ns1  service method-fault:	putProxy ns1__GenericFault
//gsoap ns1  service method-fault:	putProxy ns1__ServerOverloadedFault
int ns1__putProxy(
    std::string                         _delegationID,	///< Request parameter
    std::string                         _proxy,	///< Request parameter
    struct ns1__putProxyResponse       &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getVersion                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getVersionResponse" of service binding "WMProxy" operation "ns1__getVersion"
struct ns1__getVersionResponse
{
    std::string                         version;
};

/// Operation "ns1__getVersion" of service binding "WMProxy"

/**

Operation details:


					This operation gets the version of the service.
					Format of the version string is "major.minor.patch".
					
					Input: no input.
					
					Output: string containing the version.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					GenericFault: 					another problem occured.
					
             
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getVersion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns1__getVersionResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getVersion(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns1__getVersionResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getVersion rpc
//gsoap ns1  service method-encoding:	getVersion literal
//gsoap ns1  service method-action:	getVersion ""
//gsoap ns1  service method-fault:	getVersion ns1__GenericFault
//gsoap ns1  service method-fault:	getVersion ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getVersion ns1__ServerOverloadedFault
int ns1__getVersion(
    struct ns1__getVersionResponse     &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getJDL                                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getJDLResponse" of service binding "WMProxy" operation "ns1__getJDL"
struct ns1__getJDLResponse
{
    std::string                         _jdl;
};

/// Operation "ns1__getJDL" of service binding "WMProxy"

/**

Operation details:


					This operation gets the jdl.
					
					Input: string containing the JobId.
					Input: the jdl type to get.
					
					Output: string containing the jdl.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 	client is not authorized to perform this operation.
					JobUnknownFault:		the provided job has not been registered to the system.
					GenericFault: 					another problem occured.
					
             
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":JobUnknownFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getJDL(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         jobId,
    enum ns1__JdlType                   type,
    // response parameters:
    struct ns1__getJDLResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getJDL(
    struct soap *soap,
    // request parameters:
    std::string                         jobId,
    enum ns1__JdlType                   type,
    // response parameters:
    struct ns1__getJDLResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getJDL rpc
//gsoap ns1  service method-encoding:	getJDL literal
//gsoap ns1  service method-action:	getJDL ""
//gsoap ns1  service method-fault:	getJDL ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getJDL ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getJDL ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getJDL ns1__JobUnknownFault
//gsoap ns1  service method-fault:	getJDL ns1__GenericFault
//gsoap ns1  service method-fault:	getJDL ns1__ServerOverloadedFault
int ns1__getJDL(
    std::string                         _jobId,	///< Request parameter
    enum ns1__JdlType                   _type,	///< Request parameter
    struct ns1__getJDLResponse         &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__jobRegister                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__jobRegisterResponse" of service binding "WMProxy" operation "ns1__jobRegister"
struct ns1__jobRegisterResponse
{
    ns1__JobIdStructType*               _jobIdStruct;
};

/// Operation "ns1__jobRegister" of service binding "WMProxy"

/**

Operation details:


					This operation registers a job for submission. The JDL description of the job provided by the client is first validated by the service and then registered to the LB.
					The unique identifier assigned to the job is returned to the client. Note that this operation only registers the job and assign it with an identifier.
					The actual submission of the job has to be triggered by a call to the jobStart operation after all preparation activities, such as the Input sandbox files upload, have been completed.
					The service supports registration of simple jobs, parametric jobs, partitionable jobs, DAGs and collections of jobs;
					the description is always provided through a single JDL description (see "GLite JDL Attributes" document for details).
					When a clients requests for registration of a complex object, i.e. parametric and partitionable jobs, DAGs and collections of jobs (all those requests represent in fact a set of jobs),
					the operations returns a structure containing the main identifier of the complex object and the identifiers of all related sub jobs.
					 
					Input: string containing the job jdl representation.
					Input: string containing the Id of the delegated proxy associated to the job.

					Output: string containing the unique jobId assigned to the job.
		
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 		client is not authorized to perform this operation.
					InvalidArgumentFault: 	the provided job JDL expression is not valid.
					GenericFault: 			another problem occured. 
					
			
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__jobRegister(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         jdl,
    std::string                         delegationId,
    // response parameters:
    struct ns1__jobRegisterResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__jobRegister(
    struct soap *soap,
    // request parameters:
    std::string                         jdl,
    std::string                         delegationId,
    // response parameters:
    struct ns1__jobRegisterResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	jobRegister rpc
//gsoap ns1  service method-encoding:	jobRegister literal
//gsoap ns1  service method-action:	jobRegister ""
//gsoap ns1  service method-fault:	jobRegister ns1__AuthenticationFault
//gsoap ns1  service method-fault:	jobRegister ns1__AuthorizationFault
//gsoap ns1  service method-fault:	jobRegister ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	jobRegister ns1__GenericFault
//gsoap ns1  service method-fault:	jobRegister ns1__ServerOverloadedFault
int ns1__jobRegister(
    std::string                         _jdl,	///< Request parameter
    std::string                         _delegationId,	///< Request parameter
    struct ns1__jobRegisterResponse    &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__jobRegisterJSDL                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__jobRegisterJSDLResponse" of service binding "WMProxy" operation "ns1__jobRegisterJSDL"
struct ns1__jobRegisterJSDLResponse
{
    ns1__JobIdStructType*               _jobIdStruct;
};

/// Operation "ns1__jobRegisterJSDL" of service binding "WMProxy"

/**

Operation details:


					This operation registers a job for submission. The JDL description of the job provided by the client is first validated by the service and then registered to the LB.
					The unique identifier assigned to the job is returned to the client. Note that this operation only registers the job and assign it with an identifier.
					The actual submission of the job has to be triggered by a call to the jobStart operation after all preparation activities, such as the Input sandbox files upload, have been completed.
					The service supports registration of simple jobs, parametric jobs, partitionable jobs, DAGs and collections of jobs;
					the description is always provided through a single JDL description (see "GLite JDL Attributes" document for details). 
					When a clients requests for registration of a complex object, i.e. parametric and partitionable jobs, DAGs and collections of jobs (all those requests represent in fact a set of jobs),
					the operations returns a structure containing the main identifier of the complex object and the identifiers of all related sub jobs.
					 
					Input: string containing the job jsdl representation.
					Input: string containing the Id of the delegated proxy associated to the job.

					Output: string containing the unique jobId assigned to the job.
		
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 		client is not authorized to perform this operation.
					InvalidArgumentFault: 	the provided job JDL expression is not valid.
					GenericFault: 			another problem occured. 
					
			
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__jobRegisterJSDL(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    jsdl__JobDefinition_USCOREType*     jsdl,
    std::string                         delegationId,
    // response parameters:
    struct ns1__jobRegisterJSDLResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__jobRegisterJSDL(
    struct soap *soap,
    // request parameters:
    jsdl__JobDefinition_USCOREType*     jsdl,
    std::string                         delegationId,
    // response parameters:
    struct ns1__jobRegisterJSDLResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	jobRegisterJSDL rpc
//gsoap ns1  service method-encoding:	jobRegisterJSDL literal
//gsoap ns1  service method-action:	jobRegisterJSDL ""
//gsoap ns1  service method-fault:	jobRegisterJSDL ns1__AuthenticationFault
//gsoap ns1  service method-fault:	jobRegisterJSDL ns1__AuthorizationFault
//gsoap ns1  service method-fault:	jobRegisterJSDL ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	jobRegisterJSDL ns1__GenericFault
//gsoap ns1  service method-fault:	jobRegisterJSDL ns1__ServerOverloadedFault
int ns1__jobRegisterJSDL(
    jsdl__JobDefinition_USCOREType*     _jsdl,	///< Request parameter
    std::string                         _delegationId,	///< Request parameter
    struct ns1__jobRegisterJSDLResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__jobStart                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__jobStartResponse" of service binding "WMProxy" operation "ns1__jobStart"
struct ns1__jobStartResponse
{
};

/// Operation "ns1__jobStart" of service binding "WMProxy"

/**

Operation details:


					This operation triggers the submission a previously registered job. It starts the actual processing of the registered job within the Workload Manager.
					It is assumed that when this operation is called, all the work preparatory to the job (e.g. input sandbox upload, registration of input data to the Data Management service etc.) has been completed by the client.
					To better clarify, an example of the correct sequence of operations for submitting a job could be:
						1.  jobId = jobRegist(JDL)
						2.  destURI = getSandboxDestURI(jobID)
						3.  transfer InputSandbox file to destURI (e.g. using GridFTP)
						4.  jobStart(jobId)

					Note that the jobStart operation is not allowed on subjobs of a complex object, i.e. the input parameter must be either the id of a simple job or the main id of a complex object.
					
					Input: string containing the jobId.

					Output: no output.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 		client is not authorized to perform this operation.
					InvalidArgumentFault: 	the provided job Id expression is not valid.
					JobUnknownFault:		the provided job has not been registered to the system.
					OperationNotAllowedFault: current job status does not allow requested operation.
					GenericFault: 			another problem occured. 
					
			
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":JobUnknownFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":OperationNotAllowedFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__jobStart(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         jobId,
    // response parameters:
    struct ns1__jobStartResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__jobStart(
    struct soap *soap,
    // request parameters:
    std::string                         jobId,
    // response parameters:
    struct ns1__jobStartResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	jobStart rpc
//gsoap ns1  service method-encoding:	jobStart literal
//gsoap ns1  service method-action:	jobStart ""
//gsoap ns1  service method-fault:	jobStart ns1__AuthenticationFault
//gsoap ns1  service method-fault:	jobStart ns1__AuthorizationFault
//gsoap ns1  service method-fault:	jobStart ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	jobStart ns1__GenericFault
//gsoap ns1  service method-fault:	jobStart ns1__JobUnknownFault
//gsoap ns1  service method-fault:	jobStart ns1__OperationNotAllowedFault
//gsoap ns1  service method-fault:	jobStart ns1__ServerOverloadedFault
int ns1__jobStart(
    std::string                         _jobId,	///< Request parameter
    struct ns1__jobStartResponse       &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__jobSubmit                                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__jobSubmitResponse" of service binding "WMProxy" operation "ns1__jobSubmit"
struct ns1__jobSubmitResponse
{
    ns1__JobIdStructType*               _jobIdStruct;
};

/// Operation "ns1__jobSubmit" of service binding "WMProxy"

/**

Operation details:


					This operation submits a job. The JDL description of the job provided by the client is validated by the service, registered to the LB and finally passed to the Workload Manager.
					The unique identifier assigned to the job is returned to the client.
					This operation assumes that all the work preparatory to the job (e.g. input sandbox upload, registration of input data to the Data Management service etc.) has been completed by the client.
					Usage of this operation (instead of jobRegister + jobStart) is indeed recommended when the job identifier is not needed prior to its submission
					(e.g. jobs without input sandbox or with a sandbox entirely available on a GridFTP server managed by the client).
					The service supports submission of simple jobs, parametric jobs, partitionable jobs, DAGs and collections of jobs; the description is always provided through a single JDL description (see "GLite JDL Attributes" document for details).
					When a clients requests for submission of a complex object, i.e. parametric and partitionable jobs, DAGs and collections of jobs (all those requests represent in fact a set of jobs),
					the operations returns a structure containing the main identifier of the complex object and the identifiers of all related sub jobs.
					
					Input: string containing the job jdl representation.
					Input: string containing the Id of the delegated proxy associated to the job.
					
					Output: no output.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 		client is not authorized to perform this operation.
					InvalidArgumentFault: 	the provided job JDL expression is not valid.
					GenericFault: 			another problem occured. 
					
			
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__jobSubmit(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         jdl,
    std::string                         delegationId,
    // response parameters:
    struct ns1__jobSubmitResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__jobSubmit(
    struct soap *soap,
    // request parameters:
    std::string                         jdl,
    std::string                         delegationId,
    // response parameters:
    struct ns1__jobSubmitResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	jobSubmit rpc
//gsoap ns1  service method-encoding:	jobSubmit literal
//gsoap ns1  service method-action:	jobSubmit ""
//gsoap ns1  service method-fault:	jobSubmit ns1__AuthenticationFault
//gsoap ns1  service method-fault:	jobSubmit ns1__AuthorizationFault
//gsoap ns1  service method-fault:	jobSubmit ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	jobSubmit ns1__GenericFault
//gsoap ns1  service method-fault:	jobSubmit ns1__ServerOverloadedFault
int ns1__jobSubmit(
    std::string                         _jdl,	///< Request parameter
    std::string                         _delegationId,	///< Request parameter
    struct ns1__jobSubmitResponse      &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__jobSubmitJSDL                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__jobSubmitJSDLResponse" of service binding "WMProxy" operation "ns1__jobSubmitJSDL"
struct ns1__jobSubmitJSDLResponse
{
    ns1__JobIdStructType*               _jobIdStruct;
};

/// Operation "ns1__jobSubmitJSDL" of service binding "WMProxy"

/**

Operation details:


					This operation submits a job. The JSDL description of the job provided by the client is validated by the service, registered to the LB and finally passed to the Workload Manager.
					The unique identifier assigned to the job is returned to the client.
					This operation assumes that all the work preparatory to the job (e.g. input sandbox upload, registration of input data to the Data Management service etc.) has been completed by the client.
					Usage of this operation (instead of jobRegister + jobStart) is indeed recommended when the job identifier is not needed prior to its submission
					(e.g. jobs without input sandbox or with a sandbox entirely available on a GridFTP server managed by the client).
					The service supports submission of simple jobs, parametric jobs, partitionable jobs, DAGs and collections of jobs; the description is always provided through a single JDL description (see "GLite JDL Attributes" document for details).
					When a clients requests for submission of a complex object, i.e. parametric and partitionable jobs, DAGs and collections of jobs (all those requests represent in fact a set of jobs),
					the operations returns a structure containing the main identifier of the complex object and the identifiers of all related sub jobs.
					
					Input: string containing the job jdl representation.
					Input: string containing the Id of the delegated proxy associated to the job.
					
					Output: no output.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 		client is not authorized to perform this operation.
					InvalidArgumentFault: 	the provided job JDL expression is not valid.
					GenericFault: 			another problem occured. 
					
			
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__jobSubmitJSDL(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         delegationId,
    jsdl__JobDefinition_USCOREType*     jsdl,
    // response parameters:
    struct ns1__jobSubmitJSDLResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__jobSubmitJSDL(
    struct soap *soap,
    // request parameters:
    std::string                         delegationId,
    jsdl__JobDefinition_USCOREType*     jsdl,
    // response parameters:
    struct ns1__jobSubmitJSDLResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	jobSubmitJSDL rpc
//gsoap ns1  service method-encoding:	jobSubmitJSDL literal
//gsoap ns1  service method-action:	jobSubmitJSDL ""
//gsoap ns1  service method-fault:	jobSubmitJSDL ns1__AuthenticationFault
//gsoap ns1  service method-fault:	jobSubmitJSDL ns1__AuthorizationFault
//gsoap ns1  service method-fault:	jobSubmitJSDL ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	jobSubmitJSDL ns1__GenericFault
//gsoap ns1  service method-fault:	jobSubmitJSDL ns1__ServerOverloadedFault
int ns1__jobSubmitJSDL(
    std::string                         _delegationId,	///< Request parameter
    jsdl__JobDefinition_USCOREType*     _jsdl,	///< Request parameter
    struct ns1__jobSubmitJSDLResponse  &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__jobCancel                                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__jobCancelResponse" of service binding "WMProxy" operation "ns1__jobCancel"
struct ns1__jobCancelResponse
{
};

/// Operation "ns1__jobCancel" of service binding "WMProxy"

/**

Operation details:


					This operation cancels a previously submitted job identified by its JobId.
					If the job is still maaged by the WM then it is removed from the WM tasks queue. If the job has been already sent to the CE, the WM simply forwards the request to the CE.
					For suspending/eleasing and sending signals to a submitted job the user has to chek that the job has been scheduled to a CE and access directly the corresponding operations made avalable by the CE service.
					
					Input: string containing the JobId.
					
					Output: no output.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					InvalidArgumentFault: 	the provided job Id is not valid.
					JobUnknownFault:			the provided job has not been registerd to the system.
					OperationNotAllowedFault: current job status does not allow requested operation.
					GenericFault: 					another problem occured. 
					
            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":JobUnknownFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":OperationNotAllowedFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__jobCancel(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         jobId,
    // response parameters:
    struct ns1__jobCancelResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__jobCancel(
    struct soap *soap,
    // request parameters:
    std::string                         jobId,
    // response parameters:
    struct ns1__jobCancelResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	jobCancel rpc
//gsoap ns1  service method-encoding:	jobCancel literal
//gsoap ns1  service method-action:	jobCancel ""
//gsoap ns1  service method-fault:	jobCancel ns1__AuthenticationFault
//gsoap ns1  service method-fault:	jobCancel ns1__AuthorizationFault
//gsoap ns1  service method-fault:	jobCancel ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	jobCancel ns1__GenericFault
//gsoap ns1  service method-fault:	jobCancel ns1__JobUnknownFault
//gsoap ns1  service method-fault:	jobCancel ns1__OperationNotAllowedFault
//gsoap ns1  service method-fault:	jobCancel ns1__ServerOverloadedFault
int ns1__jobCancel(
    std::string                         _jobId,	///< Request parameter
    struct ns1__jobCancelResponse      &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getMaxInputSandboxSize                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getMaxInputSandboxSizeResponse" of service binding "WMProxy" operation "ns1__getMaxInputSandboxSize"
struct ns1__getMaxInputSandboxSizeResponse
{
    LONG64                              size;
};

/// Operation "ns1__getMaxInputSandboxSize" of service binding "WMProxy"

/**

Operation details:


					This operation returns the maximum Input sandbox size (in bytes) a user can count-on for a job submission if using the space managed by the WM.
					This is a static value in the WM configuration (on a job-basis) set by the VO administrator.
					No assumption should be made on the input sandboxes space managed by the WM. It is managed  transparently to the user; it can be either local to the WM or remote.

					Input: no input.

					Output: long containing the size in bytes.

					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					GenericFault: 					another problem occured.

            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getMaxInputSandboxSize(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns1__getMaxInputSandboxSizeResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getMaxInputSandboxSize(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns1__getMaxInputSandboxSizeResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getMaxInputSandboxSize rpc
//gsoap ns1  service method-encoding:	getMaxInputSandboxSize literal
//gsoap ns1  service method-action:	getMaxInputSandboxSize ""
//gsoap ns1  service method-fault:	getMaxInputSandboxSize ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getMaxInputSandboxSize ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getMaxInputSandboxSize ns1__GenericFault
//gsoap ns1  service method-fault:	getMaxInputSandboxSize ns1__ServerOverloadedFault
int ns1__getMaxInputSandboxSize(
    struct ns1__getMaxInputSandboxSizeResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getSandboxDestURI                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getSandboxDestURIResponse" of service binding "WMProxy" operation "ns1__getSandboxDestURI"
struct ns1__getSandboxDestURIResponse
{
    ns1__StringList*                    _path;
};

/// Operation "ns1__getSandboxDestURI" of service binding "WMProxy"

/**

Operation details:


					This operation returns a destination URI associated to the job, identified by the jobId provided as input, where the job input sandbox files can be uploaded by the client on the WMS node.
					The location is created in the storage managed by the WM and the corresponding URI is returned to the operation caller if no problems has been arised during creation.
					Files of the job input sandbox that have been referenced in the JDL as relative or absolute paths are expected to be found in the returned location when the job lands on the CE.
					Note that the WM service only provides a the URI of a location where the job input sandbox files can be stored but does not perform any file transfer.
					File upload is indeed responsibility of the client (through the GridFTP service available on the WMS node). 
					The user can also specify in the JDL the complete URI of files that are stored on a GridFTP server (e.g. managed by her organisation);
					those files will be directly downloaded (by the JobWrapper) on the WN where the job will run without transiting on the WM machine.
					The same applies to the output sandbox files list, i.e. the user can specify in the JDL the complete URIs for the files of the output sandbox;
					those files will be directly uploaded (by the JobWrapper) from the WN to the specified GridFTP servers without transiting on the WMS machine.
					
					Input: string containing the JobId.
					Input: string containing the protocol to use in the returned URIs.
					       Server available protocols are those returned by getAvailableProtocols operation.
					       Possible standard values are:
					       - "all" to get URIs with all available protocols
					       - "default" to get URIs with the server default protocol
					       not mandatory, default value is "all".
					
					Output: a vector containing the string representation of the Destination 
							URI in the requested protocol.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					InvalidArgumentFault: 	the provided job Id is not valid or the provided protocol is not available.
					GenericFault: 					another problem occured. 
					JobUnknownFault:			the provided job has not been registered to the system.
					OperationNotAllowedFault: current job status does not allow requested operation.

            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":JobUnknownFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":OperationNotAllowedFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getSandboxDestURI(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         jobId,
    std::string                         protocol,
    // response parameters:
    struct ns1__getSandboxDestURIResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getSandboxDestURI(
    struct soap *soap,
    // request parameters:
    std::string                         jobId,
    std::string                         protocol,
    // response parameters:
    struct ns1__getSandboxDestURIResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getSandboxDestURI rpc
//gsoap ns1  service method-encoding:	getSandboxDestURI literal
//gsoap ns1  service method-action:	getSandboxDestURI ""
//gsoap ns1  service method-fault:	getSandboxDestURI ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getSandboxDestURI ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getSandboxDestURI ns1__GenericFault
//gsoap ns1  service method-fault:	getSandboxDestURI ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getSandboxDestURI ns1__JobUnknownFault
//gsoap ns1  service method-fault:	getSandboxDestURI ns1__OperationNotAllowedFault
//gsoap ns1  service method-fault:	getSandboxDestURI ns1__ServerOverloadedFault
int ns1__getSandboxDestURI(
    std::string                         _jobId,	///< Request parameter
    std::string                         _protocol,	///< Request parameter
    struct ns1__getSandboxDestURIResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getSandboxBulkDestURI                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getSandboxBulkDestURIResponse" of service binding "WMProxy" operation "ns1__getSandboxBulkDestURI"
struct ns1__getSandboxBulkDestURIResponse
{
    ns1__DestURIsStructType*            _DestURIsStructType;
};

/// Operation "ns1__getSandboxBulkDestURI" of service binding "WMProxy"

/**

Operation details:


					This operation returns the list of destination URIs associated to a compound job (i.e. a DAG a Collection or a parametric jobs) and all of its sub-jobs in a vector of structures each one containing:
					- the job id
					- the corresponding list of destination URIs (can be more than one if different transfer protocols are supported, e.g. gsiftp, https etc.)

					The vector contains an element (structure above) for the compound job id provided (at first position) and one further element for any sub nodes. It contains only one element if the job id provided as imnput is the identifier of a simple job.
					
					The location is created in the storage managed by the WMS and the corresponding URI is returned to the operation caller if no problems has been arised during creation.
					Files of the job input sandbox that have been referenced in the JDL as relative or absolute paths are expected to be found in the returned location when the job lands on the CE.
					Note that the WMS service only provides a the URI of a location where the job input sandbox files can be stored but does not perform any file transfer.
					File upload is indeed responsibility of the client (through the GridFTP/HTTPS server available on the WMS node).
					The user can also specify in the JDL the complete URI of files that are stored on a GridFTP/HTTPS server (e.g. managed by her organisation);
					those files will be directly downloaded (by the JobWrapper) on the WN where the job will run without transiting on the WMS machine.
					The same applies to the output sandbox files list, i.e. the user can specify in the JDL the complete URIs for the files of the output sandbox;
					those files will be directly uploaded (by the JobWrapper) from the WN to the specified GridFTP/HTTPS servers without transiting on the WMS machine.
					
					Input: string containing the JobId.
					Input: string containing the protocol to use in the returned URIs.
					       Server available protocols are those returned by getAvailableProtocols operation.
					       Possible standard values are:
					       - "all" to get URIs with all available protocols
					       - "default" to get URIs with the server default protocol
					       not mandatory, default value is "all".
					
					Output: a structure containing the JobIds provided as input and the string representation
							of the Destination URI in the requested protocol
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					InvalidArgumentFault: 	the provided job Id  is not valid or the provided protocol is not available.
					GenericFault: 					another problem occured. 
					JobUnknownFault:			the provided job has not been registered to the system.
					OperationNotAllowedFault: current job status does not allow requested operation.

            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":JobUnknownFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":OperationNotAllowedFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getSandboxBulkDestURI(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         jobId,
    std::string                         protocol,
    // response parameters:
    struct ns1__getSandboxBulkDestURIResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getSandboxBulkDestURI(
    struct soap *soap,
    // request parameters:
    std::string                         jobId,
    std::string                         protocol,
    // response parameters:
    struct ns1__getSandboxBulkDestURIResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getSandboxBulkDestURI rpc
//gsoap ns1  service method-encoding:	getSandboxBulkDestURI literal
//gsoap ns1  service method-action:	getSandboxBulkDestURI ""
//gsoap ns1  service method-fault:	getSandboxBulkDestURI ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getSandboxBulkDestURI ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getSandboxBulkDestURI ns1__GenericFault
//gsoap ns1  service method-fault:	getSandboxBulkDestURI ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getSandboxBulkDestURI ns1__JobUnknownFault
//gsoap ns1  service method-fault:	getSandboxBulkDestURI ns1__OperationNotAllowedFault
//gsoap ns1  service method-fault:	getSandboxBulkDestURI ns1__ServerOverloadedFault
int ns1__getSandboxBulkDestURI(
    std::string                         _jobId,	///< Request parameter
    std::string                         _protocol,	///< Request parameter
    struct ns1__getSandboxBulkDestURIResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getTotalQuota                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getTotalQuotaResponse" of service binding "WMProxy" operation "ns1__getTotalQuota"
struct ns1__getTotalQuotaResponse
{
    LONG64                              softLimit;
    LONG64                              hardLimit;
};

/// Operation "ns1__getTotalQuota" of service binding "WMProxy"

/**

Operation details:


					This operation returns the available user space quota on the storage managed by the WM. 
					The fault GetQuotaManagementFault is returned if the quota management is not active on the WM.
					
					Input: no input.
					
					Output: long containing soft limit quota (in bytes) i.e. the limit that the user is expected to remain below.
					Output: long containing hard limit quota (in bytes) i.e. the real quota limit that cannot be exceeded.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					GenericFault: 					another problem occured. 
					GetQuotaManagementFault: quota management is not active on the WM.
					
            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GetQuotaManagementFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getTotalQuota(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns1__getTotalQuotaResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getTotalQuota(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns1__getTotalQuotaResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getTotalQuota rpc
//gsoap ns1  service method-encoding:	getTotalQuota literal
//gsoap ns1  service method-action:	getTotalQuota ""
//gsoap ns1  service method-fault:	getTotalQuota ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getTotalQuota ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getTotalQuota ns1__GetQuotaManagementFault
//gsoap ns1  service method-fault:	getTotalQuota ns1__GenericFault
//gsoap ns1  service method-fault:	getTotalQuota ns1__ServerOverloadedFault
int ns1__getTotalQuota(
    struct ns1__getTotalQuotaResponse  &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getFreeQuota                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getFreeQuotaResponse" of service binding "WMProxy" operation "ns1__getFreeQuota"
struct ns1__getFreeQuotaResponse
{
    LONG64                              softLimit;
    LONG64                              hardLimit;
};

/// Operation "ns1__getFreeQuota" of service binding "WMProxy"

/**

Operation details:


					This operation returns the remaining free part of available user disk quota (in bytes).
					The fault GetQuotaManagementFault is returned if the quota management is not active.
					
					Input: no input.
					
					Output: long containing soft limit free quota i.e. the difference between quota soft limit and user's disk usage.
					Output: long containing hard limit free quota i.e. total free available disk space.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					GenericFault: 					another problem occured. 
					GetQuotaManagementFault: quota management is not active on the WM.
					
	            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GetQuotaManagementFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getFreeQuota(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns1__getFreeQuotaResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getFreeQuota(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns1__getFreeQuotaResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getFreeQuota rpc
//gsoap ns1  service method-encoding:	getFreeQuota literal
//gsoap ns1  service method-action:	getFreeQuota ""
//gsoap ns1  service method-fault:	getFreeQuota ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getFreeQuota ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getFreeQuota ns1__GetQuotaManagementFault
//gsoap ns1  service method-fault:	getFreeQuota ns1__GenericFault
//gsoap ns1  service method-fault:	getFreeQuota ns1__ServerOverloadedFault
int ns1__getFreeQuota(
    struct ns1__getFreeQuotaResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__jobPurge                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__jobPurgeResponse" of service binding "WMProxy" operation "ns1__jobPurge"
struct ns1__jobPurgeResponse
{
};

/// Operation "ns1__jobPurge" of service binding "WMProxy"

/**

Operation details:


					This operation removes from the WM managed space all files related to the  job identified by the jobId provided as input.
					This only applies to job related files that are managed by the WM. E.g. Input/Output sandbox files that have been specified in the JDL
					through a URI will be not subjected to this management.
					
					Input: string containing the JobId.
					
					Output: no output.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					InvalidArgumentFault: 	the provided job Id is not valid.
					JobUnknownFault:			the provided job has not been registered to the system.
					OperationNotAllowedFault: current job status does not allow requested operation.
					GenericFault: 					another problem occured. 
					
            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":JobUnknownFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":OperationNotAllowedFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__jobPurge(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         jobId,
    // response parameters:
    struct ns1__jobPurgeResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__jobPurge(
    struct soap *soap,
    // request parameters:
    std::string                         jobId,
    // response parameters:
    struct ns1__jobPurgeResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	jobPurge rpc
//gsoap ns1  service method-encoding:	jobPurge literal
//gsoap ns1  service method-action:	jobPurge ""
//gsoap ns1  service method-fault:	jobPurge ns1__AuthenticationFault
//gsoap ns1  service method-fault:	jobPurge ns1__AuthorizationFault
//gsoap ns1  service method-fault:	jobPurge ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	jobPurge ns1__GenericFault
//gsoap ns1  service method-fault:	jobPurge ns1__JobUnknownFault
//gsoap ns1  service method-fault:	jobPurge ns1__OperationNotAllowedFault
//gsoap ns1  service method-fault:	jobPurge ns1__ServerOverloadedFault
int ns1__jobPurge(
    std::string                         _jobId,	///< Request parameter
    struct ns1__jobPurgeResponse       &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getOutputFileList                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getOutputFileListResponse" of service binding "WMProxy" operation "ns1__getOutputFileList"
struct ns1__getOutputFileListResponse
{
    ns1__StringAndLongList*             _OutputFileAndSizeList;
};

/// Operation "ns1__getOutputFileList" of service binding "WMProxy"

/**

Operation details:


					This operation returns the list of URIs where the output files created during job execution have been stored in the WM managed space and the corresponding sizes in bytes.
					This only applies for files of the Output Sandbox that are managed by the WM (i.e. not specified as URI in the JDL).
					
					Input: string containing the JobId.
					Input: string containing the protocol to use in the returned URIs.
					       Server available protocols are those returned by getAvailableProtocols operation.
					       Possible standard values are:
					       - "all" to get URIs with all available protocols
					       - "default" to get URIs with the server default protocol
					       not mandatory, default value is "all".
					
					Output: List of objects containing the file URI in the requested protocol,
							and the corresponding size in bytes.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 		client is not authorized to perform this operation.
					InvalidArgumentFault: 	the provided job Id is not valid.
					JobUnknowFault:		the provided job has not been registered to the system.
					OperationNotAllowedFault: current job status does not allow the requested operation.
					GenericFault: 			another problem occured. 
					
            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":JobUnknownFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":OperationNotAllowedFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getOutputFileList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         jobId,
    std::string                         protocol,
    // response parameters:
    struct ns1__getOutputFileListResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getOutputFileList(
    struct soap *soap,
    // request parameters:
    std::string                         jobId,
    std::string                         protocol,
    // response parameters:
    struct ns1__getOutputFileListResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getOutputFileList rpc
//gsoap ns1  service method-encoding:	getOutputFileList literal
//gsoap ns1  service method-action:	getOutputFileList ""
//gsoap ns1  service method-fault:	getOutputFileList ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getOutputFileList ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getOutputFileList ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getOutputFileList ns1__GenericFault
//gsoap ns1  service method-fault:	getOutputFileList ns1__JobUnknownFault
//gsoap ns1  service method-fault:	getOutputFileList ns1__OperationNotAllowedFault
//gsoap ns1  service method-fault:	getOutputFileList ns1__ServerOverloadedFault
int ns1__getOutputFileList(
    std::string                         _jobId,	///< Request parameter
    std::string                         _protocol,	///< Request parameter
    struct ns1__getOutputFileListResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__jobListMatch                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__jobListMatchResponse" of service binding "WMProxy" operation "ns1__jobListMatch"
struct ns1__jobListMatchResponse
{
    ns1__StringAndLongList*             _CEIdAndRankList;
};

/// Operation "ns1__jobListMatch" of service binding "WMProxy"

/**

Operation details:


					This operation returns the list of CE Ids satisfying the job Requirements specified in the JDL, ordered according to the decreasing Rank.
					The fault NoSuitableResourcesFault is returned if ther are no resources matching job constraints.
					
					Input: string representing the job description (JDL).
					Input: string representing the delegation ID.
					
					Output: list of strings representing matching CEId.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					InvalidArgumentFault: 	the provided job JDL expression is not valid.
					GenericFault: 					another problem occured. 
					NoSuitableResourcesFault: no resources matching job requirements have been found.
					
            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":NoSuitableResourcesFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__jobListMatch(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         jdl,
    std::string                         delegationId,
    // response parameters:
    struct ns1__jobListMatchResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__jobListMatch(
    struct soap *soap,
    // request parameters:
    std::string                         jdl,
    std::string                         delegationId,
    // response parameters:
    struct ns1__jobListMatchResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	jobListMatch rpc
//gsoap ns1  service method-encoding:	jobListMatch literal
//gsoap ns1  service method-action:	jobListMatch ""
//gsoap ns1  service method-fault:	jobListMatch ns1__AuthenticationFault
//gsoap ns1  service method-fault:	jobListMatch ns1__AuthorizationFault
//gsoap ns1  service method-fault:	jobListMatch ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	jobListMatch ns1__NoSuitableResourcesFault
//gsoap ns1  service method-fault:	jobListMatch ns1__GenericFault
//gsoap ns1  service method-fault:	jobListMatch ns1__ServerOverloadedFault
int ns1__jobListMatch(
    std::string                         _jdl,	///< Request parameter
    std::string                         _delegationId,	///< Request parameter
    struct ns1__jobListMatchResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__jobListMatchJSDL                                                    *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__jobListMatchJSDLResponse" of service binding "WMProxy" operation "ns1__jobListMatchJSDL"
struct ns1__jobListMatchJSDLResponse
{
    ns1__StringAndLongList*             _CEIdAndRankList;
};

/// Operation "ns1__jobListMatchJSDL" of service binding "WMProxy"

/**

Operation details:


					This operation returns the list of CE Ids satisfying the job Requirements specified in the JDL, ordered according to the decreasing Rank.
					The fault NoSuitableResourcesFault is returned if ther are no resources matching job constraints.
					
					Input: string representing the job description (JDL).
					Input: string representing the delegation ID.
					
					Output: list of strings representing matching CEId.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					InvalidArgumentFault: 	the provided job JDL expression is not valid.
					GenericFault: 					another problem occured. 
					NoSuitableResourcesFault: no resources matching job requirements have been found.
					
          		  
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":NoSuitableResourcesFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__jobListMatchJSDL(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    jsdl__JobDefinition_USCOREType*     jsdl,
    std::string                         delegationId,
    // response parameters:
    struct ns1__jobListMatchJSDLResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__jobListMatchJSDL(
    struct soap *soap,
    // request parameters:
    jsdl__JobDefinition_USCOREType*     jsdl,
    std::string                         delegationId,
    // response parameters:
    struct ns1__jobListMatchJSDLResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	jobListMatchJSDL rpc
//gsoap ns1  service method-encoding:	jobListMatchJSDL literal
//gsoap ns1  service method-action:	jobListMatchJSDL ""
//gsoap ns1  service method-fault:	jobListMatchJSDL ns1__AuthenticationFault
//gsoap ns1  service method-fault:	jobListMatchJSDL ns1__AuthorizationFault
//gsoap ns1  service method-fault:	jobListMatchJSDL ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	jobListMatchJSDL ns1__NoSuitableResourcesFault
//gsoap ns1  service method-fault:	jobListMatchJSDL ns1__GenericFault
//gsoap ns1  service method-fault:	jobListMatchJSDL ns1__ServerOverloadedFault
int ns1__jobListMatchJSDL(
    jsdl__JobDefinition_USCOREType*     _jsdl,	///< Request parameter
    std::string                         _delegationId,	///< Request parameter
    struct ns1__jobListMatchJSDLResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getJobTemplate                                                      *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getJobTemplateResponse" of service binding "WMProxy" operation "ns1__getJobTemplate"
struct ns1__getJobTemplateResponse
{
    std::string                         _jdl;
};

/// Operation "ns1__getJobTemplate" of service binding "WMProxy"

/**

Operation details:


					This operation returns a JDL template for the requested job type.					
									
					Input: list of strings representing the job type
					Input: string representing the job(s) executable
					Input: string representing the executable command line arguments
					Input: string representing the job(s) constraints (JDL requirements expression)
					Input: string representing the job(s) preferences (JDL rank expression)
					
					Output: string representing the JDL template.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 		client is not authorized to perform this operation.
					InvalidArgumentFault: 	one or more of the provided input parameters is not valid.
					GenericFault: 			another problem occured. 					
					
            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getJobTemplate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__JobTypeList*                   jobType,
    std::string                         executable,
    std::string                         arguments,
    std::string                         requirements,
    std::string                         rank,
    // response parameters:
    struct ns1__getJobTemplateResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getJobTemplate(
    struct soap *soap,
    // request parameters:
    ns1__JobTypeList*                   jobType,
    std::string                         executable,
    std::string                         arguments,
    std::string                         requirements,
    std::string                         rank,
    // response parameters:
    struct ns1__getJobTemplateResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getJobTemplate rpc
//gsoap ns1  service method-encoding:	getJobTemplate literal
//gsoap ns1  service method-action:	getJobTemplate ""
//gsoap ns1  service method-fault:	getJobTemplate ns1__GenericFault
//gsoap ns1  service method-fault:	getJobTemplate ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getJobTemplate ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getJobTemplate ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getJobTemplate ns1__ServerOverloadedFault
int ns1__getJobTemplate(
    ns1__JobTypeList*                   _jobType,	///< Request parameter
    std::string                         _executable,	///< Request parameter
    std::string                         _arguments,	///< Request parameter
    std::string                         _requirements,	///< Request parameter
    std::string                         _rank,	///< Request parameter
    struct ns1__getJobTemplateResponse &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getDAGTemplate                                                      *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getDAGTemplateResponse" of service binding "WMProxy" operation "ns1__getDAGTemplate"
struct ns1__getDAGTemplateResponse
{
    std::string                         _jdl;
};

/// Operation "ns1__getDAGTemplate" of service binding "WMProxy"

/**

Operation details:


					This operation returns a JDL template for a DAG.					
										

					Input: struct representing the topology of the jobs graph (jobs are identified by a name).
					Input: string representing the constraints to be inherited by all DAG nodes 
					Input: string representing the preferences to be inherited by all DAG nodes 
					
					Output: string representing DAG JDL template.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 		client is not authorized to perform this operation.
					InvalidArgumentFault: 	one or more of the provided input parameters is not valid.
					GenericFault: 			another problem occured. 
				
					
            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getDAGTemplate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__GraphStructType*               dependencies,
    std::string                         requirements,
    std::string                         rank,
    // response parameters:
    struct ns1__getDAGTemplateResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getDAGTemplate(
    struct soap *soap,
    // request parameters:
    ns1__GraphStructType*               dependencies,
    std::string                         requirements,
    std::string                         rank,
    // response parameters:
    struct ns1__getDAGTemplateResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getDAGTemplate rpc
//gsoap ns1  service method-encoding:	getDAGTemplate literal
//gsoap ns1  service method-action:	getDAGTemplate ""
//gsoap ns1  service method-fault:	getDAGTemplate ns1__GenericFault
//gsoap ns1  service method-fault:	getDAGTemplate ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getDAGTemplate ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getDAGTemplate ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getDAGTemplate ns1__ServerOverloadedFault
int ns1__getDAGTemplate(
    ns1__GraphStructType*               _dependencies,	///< Request parameter
    std::string                         _requirements,	///< Request parameter
    std::string                         _rank,	///< Request parameter
    struct ns1__getDAGTemplateResponse &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getCollectionTemplate                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getCollectionTemplateResponse" of service binding "WMProxy" operation "ns1__getCollectionTemplate"
struct ns1__getCollectionTemplateResponse
{
    std::string                         _jdl;
};

/// Operation "ns1__getCollectionTemplate" of service binding "WMProxy"

/**

Operation details:


					This operation returns a JDL template for a collection of jobs, that is a set of independent jobs that can be submitted, controlled and monitored as a single entity.
										

					Input: int representing the number of jobs of the collection.
					Input: string representing the constraints to be inherited by all the jobs of the collection.
					Input: string representing the preferences to be inherited by all the jobs of the collection.
					
					Output: string representing the Collection JDL template.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 		client is not authorized to perform this operation.
					InvalidArgumentFault: 	one or more of the provided input parameters is not valid.
					GenericFault: 			another problem occured. 
				
            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getCollectionTemplate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 jobNumber,
    std::string                         requirements,
    std::string                         rank,
    // response parameters:
    struct ns1__getCollectionTemplateResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getCollectionTemplate(
    struct soap *soap,
    // request parameters:
    int                                 jobNumber,
    std::string                         requirements,
    std::string                         rank,
    // response parameters:
    struct ns1__getCollectionTemplateResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getCollectionTemplate rpc
//gsoap ns1  service method-encoding:	getCollectionTemplate literal
//gsoap ns1  service method-action:	getCollectionTemplate ""
//gsoap ns1  service method-fault:	getCollectionTemplate ns1__GenericFault
//gsoap ns1  service method-fault:	getCollectionTemplate ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getCollectionTemplate ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getCollectionTemplate ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getCollectionTemplate ns1__ServerOverloadedFault
int ns1__getCollectionTemplate(
    int                                 _jobNumber,	///< Request parameter
    std::string                         _requirements,	///< Request parameter
    std::string                         _rank,	///< Request parameter
    struct ns1__getCollectionTemplateResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getIntParametricJobTemplate                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getIntParametricJobTemplateResponse" of service binding "WMProxy" operation "ns1__getIntParametricJobTemplate"
struct ns1__getIntParametricJobTemplateResponse
{
    std::string                         _jdl;
};

/// Operation "ns1__getIntParametricJobTemplate" of service binding "WMProxy"

/**

Operation details:


					This operation returns a JDL template for a parametric of job, which is a job having one or more parametric attributes in the JDL.
					The parametric attributes vary their values according to the "Parameter" attribute specified in the JDL itself (in this case the parametere has to be an integer).
					The submission of a Parametric job results in the submission  of a set of jobs having the same descritpion apart from the parametrised attribute.
					They can be however controlled and monitored as a single entity.
										
					Input: list of strings representing the parametric JDL attributes
					Input: int representing the value of the Parameter attribute
					Input: int representing the start value for varying the parametric attributes
					Input: int representing the step of each variation
					Input: string representing the constraints to be inherited by all the jobs of the collection.
					Input: string representing the preferences to be inherited by all the jobs of the collection.
					
					Output: string representing the Parametric Job  JDL template.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 		client is not authorized to perform this operation.
					InvalidArgumentFault: 	one or more of the provided input parameters is not valid.
					GenericFault: 			another problem occured. 
				
            		
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getIntParametricJobTemplate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__StringList*                    attributes,
    int                                 param,
    int                                 parameterStart,
    int                                 parameterStep,
    std::string                         requirements,
    std::string                         rank,
    // response parameters:
    struct ns1__getIntParametricJobTemplateResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getIntParametricJobTemplate(
    struct soap *soap,
    // request parameters:
    ns1__StringList*                    attributes,
    int                                 param,
    int                                 parameterStart,
    int                                 parameterStep,
    std::string                         requirements,
    std::string                         rank,
    // response parameters:
    struct ns1__getIntParametricJobTemplateResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getIntParametricJobTemplate rpc
//gsoap ns1  service method-encoding:	getIntParametricJobTemplate literal
//gsoap ns1  service method-action:	getIntParametricJobTemplate ""
//gsoap ns1  service method-fault:	getIntParametricJobTemplate ns1__GenericFault
//gsoap ns1  service method-fault:	getIntParametricJobTemplate ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getIntParametricJobTemplate ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getIntParametricJobTemplate ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getIntParametricJobTemplate ns1__ServerOverloadedFault
int ns1__getIntParametricJobTemplate(
    ns1__StringList*                    _attributes,	///< Request parameter
    int                                 _param,	///< Request parameter
    int                                 _parameterStart,	///< Request parameter
    int                                 _parameterStep,	///< Request parameter
    std::string                         _requirements,	///< Request parameter
    std::string                         _rank,	///< Request parameter
    struct ns1__getIntParametricJobTemplateResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getStringParametricJobTemplate                                      *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getStringParametricJobTemplateResponse" of service binding "WMProxy" operation "ns1__getStringParametricJobTemplate"
struct ns1__getStringParametricJobTemplateResponse
{
    std::string                         _jdl;
};

/// Operation "ns1__getStringParametricJobTemplate" of service binding "WMProxy"

/**

Operation details:


					This operation returns a JDL template for a parametric of job, which is a job having one or more parametric attributes in the JDL.
					The parametric attributes vary their values according to the "Parameter" attribute specified in the JDL itself (in this case the parametere has to be a list of strings).
					The submission of a Parametric job results in the submission  of a set of jobs having the same descritpion apart from the value of the parametric attributes.
					They can be however controlled and monitored as a single entity.
										
					Input: list of strings representing the parametric JDL attributes
					Input: list of strings representing the values of the Parameter attribute
					Input: string representing the constraints to be inherited by all the jobs of the collection.
					Input: string representing the preferences to be inherited by all the jobs of the collection.
					
					Output: string representing the Parametric Job  JDL template.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 		client is not authorized to perform this operation.
					InvalidArgumentFault: 	one or more of the provided input parameters is not valid.
					GenericFault: 			another problem occured. 
				
            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getStringParametricJobTemplate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__StringList*                    attributes,
    ns1__StringList*                    param,
    std::string                         requirements,
    std::string                         rank,
    // response parameters:
    struct ns1__getStringParametricJobTemplateResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getStringParametricJobTemplate(
    struct soap *soap,
    // request parameters:
    ns1__StringList*                    attributes,
    ns1__StringList*                    param,
    std::string                         requirements,
    std::string                         rank,
    // response parameters:
    struct ns1__getStringParametricJobTemplateResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getStringParametricJobTemplate rpc
//gsoap ns1  service method-encoding:	getStringParametricJobTemplate literal
//gsoap ns1  service method-action:	getStringParametricJobTemplate ""
//gsoap ns1  service method-fault:	getStringParametricJobTemplate ns1__GenericFault
//gsoap ns1  service method-fault:	getStringParametricJobTemplate ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getStringParametricJobTemplate ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getStringParametricJobTemplate ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getStringParametricJobTemplate ns1__ServerOverloadedFault
int ns1__getStringParametricJobTemplate(
    ns1__StringList*                    _attributes,	///< Request parameter
    ns1__StringList*                    _param,	///< Request parameter
    std::string                         _requirements,	///< Request parameter
    std::string                         _rank,	///< Request parameter
    struct ns1__getStringParametricJobTemplateResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getACLItems                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getACLItemsResponse" of service binding "WMProxy" operation "ns1__getACLItems"
struct ns1__getACLItemsResponse
{
    ns1__StringList*                    _items;
};

/// Operation "ns1__getACLItems" of service binding "WMProxy"

/**

Operation details:


					This operation returns the list of the Items contained in the job Access Control List present
					inside the Gacl authorization file specific fo the job.
					
					Input: string containing the JobId.
					
					Output: a vector of string containing the ACL Items set.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					InvalidArgumentFault: 	the given job Id  is not valid.
					GenericFault: 					another problem occured. 
					JobUnknownFault:			the given job has not been registered to the system.
					
            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":JobUnknownFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getACLItems(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         jobId,
    // response parameters:
    struct ns1__getACLItemsResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getACLItems(
    struct soap *soap,
    // request parameters:
    std::string                         jobId,
    // response parameters:
    struct ns1__getACLItemsResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getACLItems rpc
//gsoap ns1  service method-encoding:	getACLItems literal
//gsoap ns1  service method-action:	getACLItems ""
//gsoap ns1  service method-fault:	getACLItems ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getACLItems ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getACLItems ns1__GenericFault
//gsoap ns1  service method-fault:	getACLItems ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getACLItems ns1__JobUnknownFault
//gsoap ns1  service method-fault:	getACLItems ns1__ServerOverloadedFault
int ns1__getACLItems(
    std::string                         _jobId,	///< Request parameter
    struct ns1__getACLItemsResponse    &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__addACLItems                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__addACLItemsResponse" of service binding "WMProxy" operation "ns1__addACLItems"
struct ns1__addACLItemsResponse
{
};

/// Operation "ns1__addACLItems" of service binding "WMProxy"

/**

Operation details:


					This operations adds a list of items to the job Access Control List. Items Already present
					will be ignored.
					
					Input: string containing the JobId.
					Input: a vector of string containing the ACL Items to add.
					
					Output: no output.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					InvalidArgumentFault: 	the given job Id  is not valid.
					GenericFault: 					another problem occured. 
					JobUnknownFault:			the given job has not been registered to the system.
					
            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":JobUnknownFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__addACLItems(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         jobId,
    ns1__StringList*                    items,
    // response parameters:
    struct ns1__addACLItemsResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__addACLItems(
    struct soap *soap,
    // request parameters:
    std::string                         jobId,
    ns1__StringList*                    items,
    // response parameters:
    struct ns1__addACLItemsResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	addACLItems rpc
//gsoap ns1  service method-encoding:	addACLItems literal
//gsoap ns1  service method-action:	addACLItems ""
//gsoap ns1  service method-fault:	addACLItems ns1__AuthenticationFault
//gsoap ns1  service method-fault:	addACLItems ns1__AuthorizationFault
//gsoap ns1  service method-fault:	addACLItems ns1__GenericFault
//gsoap ns1  service method-fault:	addACLItems ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	addACLItems ns1__JobUnknownFault
//gsoap ns1  service method-fault:	addACLItems ns1__ServerOverloadedFault
int ns1__addACLItems(
    std::string                         _jobId,	///< Request parameter
    ns1__StringList*                    _items,	///< Request parameter
    struct ns1__addACLItemsResponse    &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__removeACLItem                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__removeACLItemResponse" of service binding "WMProxy" operation "ns1__removeACLItem"
struct ns1__removeACLItemResponse
{
};

/// Operation "ns1__removeACLItem" of service binding "WMProxy"

/**

Operation details:


					This operation remove an item from the job Access Control List. Removal of the item
					representing the user that has registered the job are not allowed (a fault will be
					returned to the caller). 
				
					Input: string containing the JobId.
					Input: string containing the item to remove from ACL.
					
					Output: no output.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					InvalidArgumentFault: 	the given job Id is not valid or the item is not present in the list.
					GenericFault: 					another problem occured. 
					JobUnknownFault:			the given job has not been registered to the system.
					OperationNotAllowedFault: the item represent the user that has registered the job.
	
            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":JobUnknownFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":OperationNotAllowedFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__removeACLItem(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         jobId,
    std::string                         item,
    // response parameters:
    struct ns1__removeACLItemResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__removeACLItem(
    struct soap *soap,
    // request parameters:
    std::string                         jobId,
    std::string                         item,
    // response parameters:
    struct ns1__removeACLItemResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	removeACLItem rpc
//gsoap ns1  service method-encoding:	removeACLItem literal
//gsoap ns1  service method-action:	removeACLItem ""
//gsoap ns1  service method-fault:	removeACLItem ns1__AuthenticationFault
//gsoap ns1  service method-fault:	removeACLItem ns1__AuthorizationFault
//gsoap ns1  service method-fault:	removeACLItem ns1__GenericFault
//gsoap ns1  service method-fault:	removeACLItem ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	removeACLItem ns1__JobUnknownFault
//gsoap ns1  service method-fault:	removeACLItem ns1__OperationNotAllowedFault
//gsoap ns1  service method-fault:	removeACLItem ns1__ServerOverloadedFault
int ns1__removeACLItem(
    std::string                         _jobId,	///< Request parameter
    std::string                         _item,	///< Request parameter
    struct ns1__removeACLItemResponse  &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getDelegatedProxyInfo                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getDelegatedProxyInfoResponse" of service binding "WMProxy" operation "ns1__getDelegatedProxyInfo"
struct ns1__getDelegatedProxyInfoResponse
{
    ns1__ProxyInfoStructType*           _items;
};

/// Operation "ns1__getDelegatedProxyInfo" of service binding "WMProxy"

/**

Operation details:


					This operation returns the Delegated Proxy information
					
					Input: string containing the delegation identifier.
					
					Output: a vector of strings containing Delegated Proxy information
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					InvalidArgumentFault: 	the given delegation id is not valid.
					GenericFault: 					another problem occured. 
					JobUnknownFault:			the given job has not been registered to the system.
					
            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":JobUnknownFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getDelegatedProxyInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         delegationID,
    // response parameters:
    struct ns1__getDelegatedProxyInfoResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getDelegatedProxyInfo(
    struct soap *soap,
    // request parameters:
    std::string                         delegationID,
    // response parameters:
    struct ns1__getDelegatedProxyInfoResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getDelegatedProxyInfo rpc
//gsoap ns1  service method-encoding:	getDelegatedProxyInfo literal
//gsoap ns1  service method-action:	getDelegatedProxyInfo ""
//gsoap ns1  service method-fault:	getDelegatedProxyInfo ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getDelegatedProxyInfo ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getDelegatedProxyInfo ns1__GenericFault
//gsoap ns1  service method-fault:	getDelegatedProxyInfo ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getDelegatedProxyInfo ns1__JobUnknownFault
//gsoap ns1  service method-fault:	getDelegatedProxyInfo ns1__ServerOverloadedFault
int ns1__getDelegatedProxyInfo(
    std::string                         _delegationID,	///< Request parameter
    struct ns1__getDelegatedProxyInfoResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getJobProxyInfo                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getJobProxyInfoResponse" of service binding "WMProxy" operation "ns1__getJobProxyInfo"
struct ns1__getJobProxyInfoResponse
{
    ns1__ProxyInfoStructType*           _items;
};

/// Operation "ns1__getJobProxyInfo" of service binding "WMProxy"

/**

Operation details:


					This operation returns the job Proxy information
					
					Input: string containing the job identifier.
					
					Output: a vector of strings containing job Proxy information
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					InvalidArgumentFault: 	the given delegation id is not valid.
					GenericFault: 					another problem occured. 
					JobUnknownFault:			the given job has not been registered to the system.
					
            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":JobUnknownFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getJobProxyInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         jobId,
    // response parameters:
    struct ns1__getJobProxyInfoResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getJobProxyInfo(
    struct soap *soap,
    // request parameters:
    std::string                         jobId,
    // response parameters:
    struct ns1__getJobProxyInfoResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getJobProxyInfo rpc
//gsoap ns1  service method-encoding:	getJobProxyInfo literal
//gsoap ns1  service method-action:	getJobProxyInfo ""
//gsoap ns1  service method-fault:	getJobProxyInfo ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getJobProxyInfo ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getJobProxyInfo ns1__GenericFault
//gsoap ns1  service method-fault:	getJobProxyInfo ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getJobProxyInfo ns1__JobUnknownFault
//gsoap ns1  service method-fault:	getJobProxyInfo ns1__ServerOverloadedFault
int ns1__getJobProxyInfo(
    std::string                         _jobId,	///< Request parameter
    struct ns1__getJobProxyInfoResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__enableFilePerusal                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__enableFilePerusalResponse" of service binding "WMProxy" operation "ns1__enableFilePerusal"
struct ns1__enableFilePerusalResponse
{
};

/// Operation "ns1__enableFilePerusal" of service binding "WMProxy"

/**

Operation details:


					This operation enables file perusal functionalities if not disabled with the specific jdl attribute during job 
					register operation.
					Calling this operation, the user enables perusal for job identified by jobId, for files specified with fileList.
					An empty fileList disables perusal.
					
					Input: string containing the JobId.
					Input: a vector of strings containing the files for which perusal should be enabled.
					
					Output: no output.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					InvalidArgumentFault: 	the given job Id is not valid.
					GenericFault: 					another problem occured. 
					JobUnknownFault:			the given job has not been registered to the system.
					OperationNotAllowedFault: perusal was disabled with the specific jdl attribute.
            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":OperationNotAllowedFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":JobUnknownFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__enableFilePerusal(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         jobId,
    ns1__StringList*                    fileList,
    // response parameters:
    struct ns1__enableFilePerusalResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__enableFilePerusal(
    struct soap *soap,
    // request parameters:
    std::string                         jobId,
    ns1__StringList*                    fileList,
    // response parameters:
    struct ns1__enableFilePerusalResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	enableFilePerusal rpc
//gsoap ns1  service method-encoding:	enableFilePerusal literal
//gsoap ns1  service method-action:	enableFilePerusal ""
//gsoap ns1  service method-fault:	enableFilePerusal ns1__AuthenticationFault
//gsoap ns1  service method-fault:	enableFilePerusal ns1__AuthorizationFault
//gsoap ns1  service method-fault:	enableFilePerusal ns1__GenericFault
//gsoap ns1  service method-fault:	enableFilePerusal ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	enableFilePerusal ns1__OperationNotAllowedFault
//gsoap ns1  service method-fault:	enableFilePerusal ns1__JobUnknownFault
//gsoap ns1  service method-fault:	enableFilePerusal ns1__ServerOverloadedFault
int ns1__enableFilePerusal(
    std::string                         _jobId,	///< Request parameter
    ns1__StringList*                    _fileList,	///< Request parameter
    struct ns1__enableFilePerusalResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getPerusalFiles                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getPerusalFilesResponse" of service binding "WMProxy" operation "ns1__getPerusalFiles"
struct ns1__getPerusalFilesResponse
{
    ns1__StringList*                    _fileList;
};

/// Operation "ns1__getPerusalFiles" of service binding "WMProxy"

/**

Operation details:


					This operation gets the URIs of perusal files generated during job execution for the specified file file.
					If allChunks is set to true all perusal URIs will be returned; also the URIs already requested with a
					previous getPerusalFiles operation. Default value is false.
					
					Input: string containing the JobId.
					Input: the name of the file to get.
					Input: boolean value to specify when to get all chuncks
					Input: string containing the protocol to use in the returned URIs.
					       Server available protocols are those returned by getAvailableProtocols operation.
					       Possible standard values are:
					       - "all" to get URIs with all available protocols
					       - "default" to get URIs with the server default protocol
					       not mandatory, default value is "all".
					
					Output: a list of strings representing the URIs of the files
							in the requested protocol.
					
					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					InvalidArgumentFault: 	the given job Id is not valid.
					GenericFault: 					another problem occured. 
					JobUnknownFault:			the given job has not been registered to the system.
					OperationNotAllowedFault: perusal was disabled with the specific jdl attribute.
            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":InvalidArgumentFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":OperationNotAllowedFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":JobUnknownFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getPerusalFiles(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         jobId,
    std::string                         file,
    bool                                allChunks,
    std::string                         protocol,
    // response parameters:
    struct ns1__getPerusalFilesResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getPerusalFiles(
    struct soap *soap,
    // request parameters:
    std::string                         jobId,
    std::string                         file,
    bool                                allChunks,
    std::string                         protocol,
    // response parameters:
    struct ns1__getPerusalFilesResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getPerusalFiles rpc
//gsoap ns1  service method-encoding:	getPerusalFiles literal
//gsoap ns1  service method-action:	getPerusalFiles ""
//gsoap ns1  service method-fault:	getPerusalFiles ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getPerusalFiles ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getPerusalFiles ns1__GenericFault
//gsoap ns1  service method-fault:	getPerusalFiles ns1__InvalidArgumentFault
//gsoap ns1  service method-fault:	getPerusalFiles ns1__OperationNotAllowedFault
//gsoap ns1  service method-fault:	getPerusalFiles ns1__JobUnknownFault
//gsoap ns1  service method-fault:	getPerusalFiles ns1__ServerOverloadedFault
int ns1__getPerusalFiles(
    std::string                         _jobId,	///< Request parameter
    std::string                         _file,	///< Request parameter
    bool                                _allChunks,	///< Request parameter
    std::string                         _protocol,	///< Request parameter
    struct ns1__getPerusalFilesResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getTransferProtocols                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getTransferProtocolsResponse" of service binding "WMProxy" operation "ns1__getTransferProtocols"
struct ns1__getTransferProtocolsResponse
{
    ns1__StringList*                    items;
};

/// Operation "ns1__getTransferProtocols" of service binding "WMProxy"

/**

Operation details:


					This operation returns the server available transfer protocols.

					Input: no input.

					Output: a vector of string containing the protocols.

					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					GenericFault: 					another problem occured.
            
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getTransferProtocols(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct ns1__getTransferProtocolsResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getTransferProtocols(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct ns1__getTransferProtocolsResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getTransferProtocols rpc
//gsoap ns1  service method-encoding:	getTransferProtocols literal
//gsoap ns1  service method-action:	getTransferProtocols ""
//gsoap ns1  service method-fault:	getTransferProtocols ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getTransferProtocols ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getTransferProtocols ns1__GenericFault
//gsoap ns1  service method-fault:	getTransferProtocols ns1__ServerOverloadedFault
int ns1__getTransferProtocols(
    struct ns1__getTransferProtocolsResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getJobStatus                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getJobStatusResponse" of service binding "WMProxy" operation "ns1__getJobStatus"
struct ns1__getJobStatusResponse
{
    ns1__JobStatusStructType*           JobStatusStruct;
};

/// Operation "ns1__getJobStatus" of service binding "WMProxy"

/**

Operation details:


					This operation returns the current status for the desired JobId

					Input: desired JobId

					Output: a structure containing status information for requested JobId

					Faults:
					AuthenticationFault: 		a generic authentication problem occured.
					AuthorizationFault: 			client is not authorized to perform this operation.
					GenericFault: 					another problem occured.
			
  - SOAP RPC literal style
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthenticationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":AuthorizationFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":GenericFault (literal)
  - SOAP Fault: "http://glite.org/wms/wmproxy":ServerOverloadedFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getJobStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         jobId,
    // response parameters:
    struct ns1__getJobStatusResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getJobStatus(
    struct soap *soap,
    // request parameters:
    std::string                         jobId,
    // response parameters:
    struct ns1__getJobStatusResponse&
  );
@endcode

C++ proxy class (defined in soapWMProxyProxy.h):
@code
  class WMProxyProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWMProxyService.h):
@code
  class WMProxyService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getJobStatus rpc
//gsoap ns1  service method-encoding:	getJobStatus literal
//gsoap ns1  service method-action:	getJobStatus ""
//gsoap ns1  service method-fault:	getJobStatus ns1__AuthenticationFault
//gsoap ns1  service method-fault:	getJobStatus ns1__AuthorizationFault
//gsoap ns1  service method-fault:	getJobStatus ns1__GenericFault
//gsoap ns1  service method-fault:	getJobStatus ns1__ServerOverloadedFault
int ns1__getJobStatus(
    std::string                         jobId,	///< Request parameter
    struct ns1__getJobStatusResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a FILE* fd, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a FILE* fd, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns1 Top-level root elements of schema "http://glite.org/wms/wmproxy"

  - <ns1:AuthenticationFault> (use wsdl2h option -g to auto-generate)

  - <ns1:AuthorizationFault> (use wsdl2h option -g to auto-generate)

  - <ns1:InvalidArgumentFault> (use wsdl2h option -g to auto-generate)

  - <ns1:GetQuotaManagementFault> (use wsdl2h option -g to auto-generate)

  - <ns1:NoSuitableResourcesFault> (use wsdl2h option -g to auto-generate)

  - <ns1:GenericFault> (use wsdl2h option -g to auto-generate)

  - <ns1:JobUnknownFault> (use wsdl2h option -g to auto-generate)

  - <ns1:OperationNotAllowedFault> (use wsdl2h option -g to auto-generate)

  - <ns1:ServerOverloadedFault> (use wsdl2h option -g to auto-generate)

@section jsdl Top-level root elements of schema "http://schemas.ggf.org/jsdl/2005/11/jsdl"

  - <jsdl:JobDefinition> (use wsdl2h option -g to auto-generate)

  - <jsdl:JobDescription> (use wsdl2h option -g to auto-generate)

  - <jsdl:JobIdentification> (use wsdl2h option -g to auto-generate)

  - <jsdl:JobName> (use wsdl2h option -g to auto-generate)

  - <jsdl:Description> (use wsdl2h option -g to auto-generate)

  - <jsdl:JobAnnotation> (use wsdl2h option -g to auto-generate)

  - <jsdl:JobProject> (use wsdl2h option -g to auto-generate)

  - <jsdl:Application> (use wsdl2h option -g to auto-generate)

  - <jsdl:ApplicationName> (use wsdl2h option -g to auto-generate)

  - <jsdl:ApplicationVersion> (use wsdl2h option -g to auto-generate)

  - <jsdl:Resources> (use wsdl2h option -g to auto-generate)

  - <jsdl:CandidateHosts> (use wsdl2h option -g to auto-generate)

  - <jsdl:HostName> (use wsdl2h option -g to auto-generate)

  - <jsdl:OperatingSystem> (use wsdl2h option -g to auto-generate)

  - <jsdl:OperatingSystemType> (use wsdl2h option -g to auto-generate)

  - <jsdl:OperatingSystemVersion> (use wsdl2h option -g to auto-generate)

  - <jsdl:OperatingSystemName> (use wsdl2h option -g to auto-generate)

  - <jsdl:ExclusiveExecution> (use wsdl2h option -g to auto-generate)

  - <jsdl:CPUArchitecture> (use wsdl2h option -g to auto-generate)

  - <jsdl:CPUArchitectureName> (use wsdl2h option -g to auto-generate)

  - <jsdl:FileSystem> (use wsdl2h option -g to auto-generate)

  - <jsdl:FileSystemType> (use wsdl2h option -g to auto-generate)

  - <jsdl:MountPoint> (use wsdl2h option -g to auto-generate)

  - <jsdl:DiskSpace> (use wsdl2h option -g to auto-generate)

  - <jsdl:IndividualCPUTime> (use wsdl2h option -g to auto-generate)

  - <jsdl:IndividualCPUSpeed> (use wsdl2h option -g to auto-generate)

  - <jsdl:IndividualCPUCount> (use wsdl2h option -g to auto-generate)

  - <jsdl:IndividualPhysicalMemory> (use wsdl2h option -g to auto-generate)

  - <jsdl:IndividualVirtualMemory> (use wsdl2h option -g to auto-generate)

  - <jsdl:IndividualNetworkBandwidth> (use wsdl2h option -g to auto-generate)

  - <jsdl:IndividualDiskSpace> (use wsdl2h option -g to auto-generate)

  - <jsdl:TotalCPUTime> (use wsdl2h option -g to auto-generate)

  - <jsdl:TotalCPUCount> (use wsdl2h option -g to auto-generate)

  - <jsdl:TotalPhysicalMemory> (use wsdl2h option -g to auto-generate)

  - <jsdl:TotalVirtualMemory> (use wsdl2h option -g to auto-generate)

  - <jsdl:TotalDiskSpace> (use wsdl2h option -g to auto-generate)

  - <jsdl:TotalResourceCount> (use wsdl2h option -g to auto-generate)

  - <jsdl:DataStaging> (use wsdl2h option -g to auto-generate)

  - <jsdl:FileName> (use wsdl2h option -g to auto-generate)

  - <jsdl:FilesystemName> (use wsdl2h option -g to auto-generate)

  - <jsdl:CreationFlag> (use wsdl2h option -g to auto-generate)

  - <jsdl:DeleteOnTermination> (use wsdl2h option -g to auto-generate)

  - <jsdl:Source> (use wsdl2h option -g to auto-generate)

  - <jsdl:Target> (use wsdl2h option -g to auto-generate)

  - <jsdl:URI> (use wsdl2h option -g to auto-generate)

@section jsdlposix Top-level root elements of schema "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix"

  - <jsdlposix:POSIXApplication> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:Executable> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:Argument> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:Input> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:Output> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:Error> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:WorkingDirectory> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:Environment> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:WallTimeLimit> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:FileSizeLimit> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:CoreDumpLimit> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:DataSegmentLimit> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:LockedMemoryLimit> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:MemoryLimit> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:OpenDescriptorsLimit> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:PipeSizeLimit> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:StackSizeLimit> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:CPUTimeLimit> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:ProcessCountLimit> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:VirtualMemoryLimit> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:ThreadCountLimit> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:UserName> (use wsdl2h option -g to auto-generate)

  - <jsdlposix:GroupName> (use wsdl2h option -g to auto-generate)

@section jsdlposix Top-level root elements of schema "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix"

@section delegationns Top-level root elements of schema "http://www.gridsite.org/namespaces/delegation-2"

  - <delegationns:DelegationException> @ref _delegationns__DelegationException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__delegationns__DelegationException(struct soap*, _delegationns__DelegationException*);
    // Writer (returns SOAP_OK on success):
    soap_write__delegationns__DelegationException(struct soap*, _delegationns__DelegationException*);
    @endcode

@section delegation1 Top-level root elements of schema "http://www.gridsite.org/namespaces/delegation-1"

  - <delegation1:DelegationException> (use wsdl2h option -g to auto-generate)

*/

/* End of wm.h */
