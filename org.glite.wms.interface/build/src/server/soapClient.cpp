/* soapClient.cpp
   Generated by gSOAP 2.7.16 from wm.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.16 2012-11-09 09:45:19 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation1__getProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegation1__getProxyReqResponse &_param_1)
{	struct delegation1__getProxyReq soap_tmp_delegation1__getProxyReq;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegation1__getProxyReq._delegationID = _delegationID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation1__getProxyReq(soap, &soap_tmp_delegation1__getProxyReq);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation1__getProxyReq(soap, &soap_tmp_delegation1__getProxyReq, "delegation1:getProxyReq", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation1__getProxyReq(soap, &soap_tmp_delegation1__getProxyReq, "delegation1:getProxyReq", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_1)
		return soap_closesock(soap);
	soap_default_delegation1__getProxyReqResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation1__getProxyReqResponse(soap, &_param_1, "delegation1:getProxyReqResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegation1__putProxy(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, std::string _proxy, struct delegation1__putProxyResponse &_param_2)
{	struct delegation1__putProxy soap_tmp_delegation1__putProxy;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegation1__putProxy._delegationID = _delegationID;
	soap_tmp_delegation1__putProxy._proxy = _proxy;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegation1__putProxy(soap, &soap_tmp_delegation1__putProxy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegation1__putProxy(soap, &soap_tmp_delegation1__putProxy, "delegation1:putProxy", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegation1__putProxy(soap, &soap_tmp_delegation1__putProxy, "delegation1:putProxy", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_2)
		return soap_closesock(soap);
	soap_default_delegation1__putProxyResponse(soap, &_param_2);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegation1__putProxyResponse(soap, &_param_2, "delegation1:putProxyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegationns__getVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct delegationns__getVersionResponse &_param_3)
{	struct delegationns__getVersion soap_tmp_delegationns__getVersion;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegationns__getVersion(soap, &soap_tmp_delegationns__getVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegationns__getVersion(soap, &soap_tmp_delegationns__getVersion, "delegationns:getVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegationns__getVersion(soap, &soap_tmp_delegationns__getVersion, "delegationns:getVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_3)
		return soap_closesock(soap);
	soap_default_delegationns__getVersionResponse(soap, &_param_3);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegationns__getVersionResponse(soap, &_param_3, "delegationns:getVersionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegationns__getInterfaceVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct delegationns__getInterfaceVersionResponse &_param_4)
{	struct delegationns__getInterfaceVersion soap_tmp_delegationns__getInterfaceVersion;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegationns__getInterfaceVersion(soap, &soap_tmp_delegationns__getInterfaceVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegationns__getInterfaceVersion(soap, &soap_tmp_delegationns__getInterfaceVersion, "delegationns:getInterfaceVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegationns__getInterfaceVersion(soap, &soap_tmp_delegationns__getInterfaceVersion, "delegationns:getInterfaceVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_4)
		return soap_closesock(soap);
	soap_default_delegationns__getInterfaceVersionResponse(soap, &_param_4);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegationns__getInterfaceVersionResponse(soap, &_param_4, "delegationns:getInterfaceVersionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegationns__getServiceMetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _key, struct delegationns__getServiceMetadataResponse &_param_5)
{	struct delegationns__getServiceMetadata soap_tmp_delegationns__getServiceMetadata;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegationns__getServiceMetadata._key = _key;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegationns__getServiceMetadata(soap, &soap_tmp_delegationns__getServiceMetadata);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegationns__getServiceMetadata(soap, &soap_tmp_delegationns__getServiceMetadata, "delegationns:getServiceMetadata", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegationns__getServiceMetadata(soap, &soap_tmp_delegationns__getServiceMetadata, "delegationns:getServiceMetadata", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_5)
		return soap_closesock(soap);
	soap_default_delegationns__getServiceMetadataResponse(soap, &_param_5);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegationns__getServiceMetadataResponse(soap, &_param_5, "delegationns:getServiceMetadataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegationns__getProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegationns__getProxyReqResponse &_param_6)
{	struct delegationns__getProxyReq soap_tmp_delegationns__getProxyReq;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegationns__getProxyReq._delegationID = _delegationID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegationns__getProxyReq(soap, &soap_tmp_delegationns__getProxyReq);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegationns__getProxyReq(soap, &soap_tmp_delegationns__getProxyReq, "delegationns:getProxyReq", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegationns__getProxyReq(soap, &soap_tmp_delegationns__getProxyReq, "delegationns:getProxyReq", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_6)
		return soap_closesock(soap);
	soap_default_delegationns__getProxyReqResponse(soap, &_param_6);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegationns__getProxyReqResponse(soap, &_param_6, "delegationns:getProxyReqResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegationns__getNewProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct delegationns__getNewProxyReqResponse &_param_7)
{	struct delegationns__getNewProxyReq soap_tmp_delegationns__getNewProxyReq;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegationns__getNewProxyReq(soap, &soap_tmp_delegationns__getNewProxyReq);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegationns__getNewProxyReq(soap, &soap_tmp_delegationns__getNewProxyReq, "delegationns:getNewProxyReq", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegationns__getNewProxyReq(soap, &soap_tmp_delegationns__getNewProxyReq, "delegationns:getNewProxyReq", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_7)
		return soap_closesock(soap);
	soap_default_delegationns__getNewProxyReqResponse(soap, &_param_7);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegationns__getNewProxyReqResponse(soap, &_param_7, "delegationns:getNewProxyReqResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegationns__renewProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegationns__renewProxyReqResponse &_param_8)
{	struct delegationns__renewProxyReq soap_tmp_delegationns__renewProxyReq;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegationns__renewProxyReq._delegationID = _delegationID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegationns__renewProxyReq(soap, &soap_tmp_delegationns__renewProxyReq);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegationns__renewProxyReq(soap, &soap_tmp_delegationns__renewProxyReq, "delegationns:renewProxyReq", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegationns__renewProxyReq(soap, &soap_tmp_delegationns__renewProxyReq, "delegationns:renewProxyReq", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_8)
		return soap_closesock(soap);
	soap_default_delegationns__renewProxyReqResponse(soap, &_param_8);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegationns__renewProxyReqResponse(soap, &_param_8, "delegationns:renewProxyReqResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegationns__putProxy(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, std::string _proxy, struct delegationns__putProxyResponse &_param_9)
{	struct delegationns__putProxy soap_tmp_delegationns__putProxy;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegationns__putProxy._delegationID = _delegationID;
	soap_tmp_delegationns__putProxy._proxy = _proxy;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegationns__putProxy(soap, &soap_tmp_delegationns__putProxy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegationns__putProxy(soap, &soap_tmp_delegationns__putProxy, "delegationns:putProxy", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegationns__putProxy(soap, &soap_tmp_delegationns__putProxy, "delegationns:putProxy", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_9)
		return soap_closesock(soap);
	soap_default_delegationns__putProxyResponse(soap, &_param_9);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegationns__putProxyResponse(soap, &_param_9, "delegationns:putProxyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegationns__getTerminationTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegationns__getTerminationTimeResponse &_param_10)
{	struct delegationns__getTerminationTime soap_tmp_delegationns__getTerminationTime;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegationns__getTerminationTime._delegationID = _delegationID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegationns__getTerminationTime(soap, &soap_tmp_delegationns__getTerminationTime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegationns__getTerminationTime(soap, &soap_tmp_delegationns__getTerminationTime, "delegationns:getTerminationTime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegationns__getTerminationTime(soap, &soap_tmp_delegationns__getTerminationTime, "delegationns:getTerminationTime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_10)
		return soap_closesock(soap);
	soap_default_delegationns__getTerminationTimeResponse(soap, &_param_10);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegationns__getTerminationTimeResponse(soap, &_param_10, "delegationns:getTerminationTimeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_delegationns__destroy(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct delegationns__destroyResponse &_param_11)
{	struct delegationns__destroy soap_tmp_delegationns__destroy;
	if (!soap_endpoint)
		soap_endpoint = "https://localhost:8443/glite-security-delegation";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_delegationns__destroy._delegationID = _delegationID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_delegationns__destroy(soap, &soap_tmp_delegationns__destroy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_delegationns__destroy(soap, &soap_tmp_delegationns__destroy, "delegationns:destroy", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_delegationns__destroy(soap, &soap_tmp_delegationns__destroy, "delegationns:destroy", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_11)
		return soap_closesock(soap);
	soap_default_delegationns__destroyResponse(soap, &_param_11);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_delegationns__destroyResponse(soap, &_param_11, "delegationns:destroyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct ns1__getProxyReqResponse &_param_12)
{	struct ns1__getProxyReq soap_tmp_ns1__getProxyReq;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getProxyReq._delegationID = _delegationID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getProxyReq(soap, &soap_tmp_ns1__getProxyReq);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getProxyReq(soap, &soap_tmp_ns1__getProxyReq, "ns1:getProxyReq", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getProxyReq(soap, &soap_tmp_ns1__getProxyReq, "ns1:getProxyReq", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_12)
		return soap_closesock(soap);
	soap_default_ns1__getProxyReqResponse(soap, &_param_12);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getProxyReqResponse(soap, &_param_12, "ns1:getProxyReqResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__putProxy(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, std::string _proxy, struct ns1__putProxyResponse &_param_13)
{	struct ns1__putProxy soap_tmp_ns1__putProxy;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__putProxy._delegationID = _delegationID;
	soap_tmp_ns1__putProxy._proxy = _proxy;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__putProxy(soap, &soap_tmp_ns1__putProxy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__putProxy(soap, &soap_tmp_ns1__putProxy, "ns1:putProxy", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__putProxy(soap, &soap_tmp_ns1__putProxy, "ns1:putProxy", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_13)
		return soap_closesock(soap);
	soap_default_ns1__putProxyResponse(soap, &_param_13);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__putProxyResponse(soap, &_param_13, "ns1:putProxyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1__getVersionResponse &_param_14)
{	struct ns1__getVersion soap_tmp_ns1__getVersion;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getVersion(soap, &soap_tmp_ns1__getVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getVersion(soap, &soap_tmp_ns1__getVersion, "ns1:getVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getVersion(soap, &soap_tmp_ns1__getVersion, "ns1:getVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_14)
		return soap_closesock(soap);
	soap_default_ns1__getVersionResponse(soap, &_param_14);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getVersionResponse(soap, &_param_14, "ns1:getVersionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getJDL(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jobId, enum ns1__JdlType _type, struct ns1__getJDLResponse &_param_15)
{	struct ns1__getJDL soap_tmp_ns1__getJDL;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getJDL._jobId = _jobId;
	soap_tmp_ns1__getJDL._type = _type;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getJDL(soap, &soap_tmp_ns1__getJDL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getJDL(soap, &soap_tmp_ns1__getJDL, "ns1:getJDL", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getJDL(soap, &soap_tmp_ns1__getJDL, "ns1:getJDL", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_15)
		return soap_closesock(soap);
	soap_default_ns1__getJDLResponse(soap, &_param_15);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getJDLResponse(soap, &_param_15, "ns1:getJDLResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__jobRegister(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jdl, std::string _delegationId, struct ns1__jobRegisterResponse &_param_16)
{	struct ns1__jobRegister soap_tmp_ns1__jobRegister;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__jobRegister._jdl = _jdl;
	soap_tmp_ns1__jobRegister._delegationId = _delegationId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__jobRegister(soap, &soap_tmp_ns1__jobRegister);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__jobRegister(soap, &soap_tmp_ns1__jobRegister, "ns1:jobRegister", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__jobRegister(soap, &soap_tmp_ns1__jobRegister, "ns1:jobRegister", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_16)
		return soap_closesock(soap);
	soap_default_ns1__jobRegisterResponse(soap, &_param_16);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__jobRegisterResponse(soap, &_param_16, "ns1:jobRegisterResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__jobRegisterJSDL(struct soap *soap, const char *soap_endpoint, const char *soap_action, jsdl__JobDefinition_USCOREType *_jsdl, std::string _delegationId, struct ns1__jobRegisterJSDLResponse &_param_17)
{	struct ns1__jobRegisterJSDL soap_tmp_ns1__jobRegisterJSDL;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__jobRegisterJSDL._jsdl = _jsdl;
	soap_tmp_ns1__jobRegisterJSDL._delegationId = _delegationId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__jobRegisterJSDL(soap, &soap_tmp_ns1__jobRegisterJSDL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__jobRegisterJSDL(soap, &soap_tmp_ns1__jobRegisterJSDL, "ns1:jobRegisterJSDL", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__jobRegisterJSDL(soap, &soap_tmp_ns1__jobRegisterJSDL, "ns1:jobRegisterJSDL", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_17)
		return soap_closesock(soap);
	soap_default_ns1__jobRegisterJSDLResponse(soap, &_param_17);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__jobRegisterJSDLResponse(soap, &_param_17, "ns1:jobRegisterJSDLResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__jobStart(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jobId, struct ns1__jobStartResponse &_param_18)
{	struct ns1__jobStart soap_tmp_ns1__jobStart;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__jobStart._jobId = _jobId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__jobStart(soap, &soap_tmp_ns1__jobStart);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__jobStart(soap, &soap_tmp_ns1__jobStart, "ns1:jobStart", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__jobStart(soap, &soap_tmp_ns1__jobStart, "ns1:jobStart", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_18)
		return soap_closesock(soap);
	soap_default_ns1__jobStartResponse(soap, &_param_18);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__jobStartResponse(soap, &_param_18, "ns1:jobStartResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__jobSubmit(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jdl, std::string _delegationId, struct ns1__jobSubmitResponse &_param_19)
{	struct ns1__jobSubmit soap_tmp_ns1__jobSubmit;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__jobSubmit._jdl = _jdl;
	soap_tmp_ns1__jobSubmit._delegationId = _delegationId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__jobSubmit(soap, &soap_tmp_ns1__jobSubmit);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__jobSubmit(soap, &soap_tmp_ns1__jobSubmit, "ns1:jobSubmit", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__jobSubmit(soap, &soap_tmp_ns1__jobSubmit, "ns1:jobSubmit", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_19)
		return soap_closesock(soap);
	soap_default_ns1__jobSubmitResponse(soap, &_param_19);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__jobSubmitResponse(soap, &_param_19, "ns1:jobSubmitResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__jobSubmitJSDL(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationId, jsdl__JobDefinition_USCOREType *_jsdl, struct ns1__jobSubmitJSDLResponse &_param_20)
{	struct ns1__jobSubmitJSDL soap_tmp_ns1__jobSubmitJSDL;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__jobSubmitJSDL._delegationId = _delegationId;
	soap_tmp_ns1__jobSubmitJSDL._jsdl = _jsdl;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__jobSubmitJSDL(soap, &soap_tmp_ns1__jobSubmitJSDL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__jobSubmitJSDL(soap, &soap_tmp_ns1__jobSubmitJSDL, "ns1:jobSubmitJSDL", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__jobSubmitJSDL(soap, &soap_tmp_ns1__jobSubmitJSDL, "ns1:jobSubmitJSDL", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_20)
		return soap_closesock(soap);
	soap_default_ns1__jobSubmitJSDLResponse(soap, &_param_20);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__jobSubmitJSDLResponse(soap, &_param_20, "ns1:jobSubmitJSDLResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__jobCancel(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jobId, struct ns1__jobCancelResponse &_param_21)
{	struct ns1__jobCancel soap_tmp_ns1__jobCancel;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__jobCancel._jobId = _jobId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__jobCancel(soap, &soap_tmp_ns1__jobCancel);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__jobCancel(soap, &soap_tmp_ns1__jobCancel, "ns1:jobCancel", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__jobCancel(soap, &soap_tmp_ns1__jobCancel, "ns1:jobCancel", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_21)
		return soap_closesock(soap);
	soap_default_ns1__jobCancelResponse(soap, &_param_21);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__jobCancelResponse(soap, &_param_21, "ns1:jobCancelResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getMaxInputSandboxSize(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1__getMaxInputSandboxSizeResponse &_param_22)
{	struct ns1__getMaxInputSandboxSize soap_tmp_ns1__getMaxInputSandboxSize;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getMaxInputSandboxSize(soap, &soap_tmp_ns1__getMaxInputSandboxSize);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getMaxInputSandboxSize(soap, &soap_tmp_ns1__getMaxInputSandboxSize, "ns1:getMaxInputSandboxSize", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getMaxInputSandboxSize(soap, &soap_tmp_ns1__getMaxInputSandboxSize, "ns1:getMaxInputSandboxSize", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_22)
		return soap_closesock(soap);
	soap_default_ns1__getMaxInputSandboxSizeResponse(soap, &_param_22);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getMaxInputSandboxSizeResponse(soap, &_param_22, "ns1:getMaxInputSandboxSizeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getSandboxDestURI(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jobId, std::string _protocol, struct ns1__getSandboxDestURIResponse &_param_23)
{	struct ns1__getSandboxDestURI soap_tmp_ns1__getSandboxDestURI;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getSandboxDestURI._jobId = _jobId;
	soap_tmp_ns1__getSandboxDestURI._protocol = _protocol;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getSandboxDestURI(soap, &soap_tmp_ns1__getSandboxDestURI);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getSandboxDestURI(soap, &soap_tmp_ns1__getSandboxDestURI, "ns1:getSandboxDestURI", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getSandboxDestURI(soap, &soap_tmp_ns1__getSandboxDestURI, "ns1:getSandboxDestURI", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_23)
		return soap_closesock(soap);
	soap_default_ns1__getSandboxDestURIResponse(soap, &_param_23);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getSandboxDestURIResponse(soap, &_param_23, "ns1:getSandboxDestURIResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getSandboxBulkDestURI(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jobId, std::string _protocol, struct ns1__getSandboxBulkDestURIResponse &_param_24)
{	struct ns1__getSandboxBulkDestURI soap_tmp_ns1__getSandboxBulkDestURI;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getSandboxBulkDestURI._jobId = _jobId;
	soap_tmp_ns1__getSandboxBulkDestURI._protocol = _protocol;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getSandboxBulkDestURI(soap, &soap_tmp_ns1__getSandboxBulkDestURI);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getSandboxBulkDestURI(soap, &soap_tmp_ns1__getSandboxBulkDestURI, "ns1:getSandboxBulkDestURI", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getSandboxBulkDestURI(soap, &soap_tmp_ns1__getSandboxBulkDestURI, "ns1:getSandboxBulkDestURI", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_24)
		return soap_closesock(soap);
	soap_default_ns1__getSandboxBulkDestURIResponse(soap, &_param_24);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getSandboxBulkDestURIResponse(soap, &_param_24, "ns1:getSandboxBulkDestURIResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getTotalQuota(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1__getTotalQuotaResponse &_param_25)
{	struct ns1__getTotalQuota soap_tmp_ns1__getTotalQuota;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getTotalQuota(soap, &soap_tmp_ns1__getTotalQuota);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTotalQuota(soap, &soap_tmp_ns1__getTotalQuota, "ns1:getTotalQuota", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTotalQuota(soap, &soap_tmp_ns1__getTotalQuota, "ns1:getTotalQuota", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_25)
		return soap_closesock(soap);
	soap_default_ns1__getTotalQuotaResponse(soap, &_param_25);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getTotalQuotaResponse(soap, &_param_25, "ns1:getTotalQuotaResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getFreeQuota(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1__getFreeQuotaResponse &_param_26)
{	struct ns1__getFreeQuota soap_tmp_ns1__getFreeQuota;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getFreeQuota(soap, &soap_tmp_ns1__getFreeQuota);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getFreeQuota(soap, &soap_tmp_ns1__getFreeQuota, "ns1:getFreeQuota", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getFreeQuota(soap, &soap_tmp_ns1__getFreeQuota, "ns1:getFreeQuota", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_26)
		return soap_closesock(soap);
	soap_default_ns1__getFreeQuotaResponse(soap, &_param_26);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getFreeQuotaResponse(soap, &_param_26, "ns1:getFreeQuotaResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__jobPurge(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jobId, struct ns1__jobPurgeResponse &_param_27)
{	struct ns1__jobPurge soap_tmp_ns1__jobPurge;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__jobPurge._jobId = _jobId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__jobPurge(soap, &soap_tmp_ns1__jobPurge);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__jobPurge(soap, &soap_tmp_ns1__jobPurge, "ns1:jobPurge", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__jobPurge(soap, &soap_tmp_ns1__jobPurge, "ns1:jobPurge", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_27)
		return soap_closesock(soap);
	soap_default_ns1__jobPurgeResponse(soap, &_param_27);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__jobPurgeResponse(soap, &_param_27, "ns1:jobPurgeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getOutputFileList(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jobId, std::string _protocol, struct ns1__getOutputFileListResponse &_param_28)
{	struct ns1__getOutputFileList soap_tmp_ns1__getOutputFileList;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getOutputFileList._jobId = _jobId;
	soap_tmp_ns1__getOutputFileList._protocol = _protocol;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getOutputFileList(soap, &soap_tmp_ns1__getOutputFileList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getOutputFileList(soap, &soap_tmp_ns1__getOutputFileList, "ns1:getOutputFileList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getOutputFileList(soap, &soap_tmp_ns1__getOutputFileList, "ns1:getOutputFileList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_28)
		return soap_closesock(soap);
	soap_default_ns1__getOutputFileListResponse(soap, &_param_28);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getOutputFileListResponse(soap, &_param_28, "ns1:getOutputFileListResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__jobListMatch(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jdl, std::string _delegationId, struct ns1__jobListMatchResponse &_param_29)
{	struct ns1__jobListMatch soap_tmp_ns1__jobListMatch;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__jobListMatch._jdl = _jdl;
	soap_tmp_ns1__jobListMatch._delegationId = _delegationId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__jobListMatch(soap, &soap_tmp_ns1__jobListMatch);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__jobListMatch(soap, &soap_tmp_ns1__jobListMatch, "ns1:jobListMatch", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__jobListMatch(soap, &soap_tmp_ns1__jobListMatch, "ns1:jobListMatch", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_29)
		return soap_closesock(soap);
	soap_default_ns1__jobListMatchResponse(soap, &_param_29);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__jobListMatchResponse(soap, &_param_29, "ns1:jobListMatchResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__jobListMatchJSDL(struct soap *soap, const char *soap_endpoint, const char *soap_action, jsdl__JobDefinition_USCOREType *_jsdl, std::string _delegationId, struct ns1__jobListMatchJSDLResponse &_param_30)
{	struct ns1__jobListMatchJSDL soap_tmp_ns1__jobListMatchJSDL;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__jobListMatchJSDL._jsdl = _jsdl;
	soap_tmp_ns1__jobListMatchJSDL._delegationId = _delegationId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__jobListMatchJSDL(soap, &soap_tmp_ns1__jobListMatchJSDL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__jobListMatchJSDL(soap, &soap_tmp_ns1__jobListMatchJSDL, "ns1:jobListMatchJSDL", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__jobListMatchJSDL(soap, &soap_tmp_ns1__jobListMatchJSDL, "ns1:jobListMatchJSDL", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_30)
		return soap_closesock(soap);
	soap_default_ns1__jobListMatchJSDLResponse(soap, &_param_30);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__jobListMatchJSDLResponse(soap, &_param_30, "ns1:jobListMatchJSDLResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getJobTemplate(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__JobTypeList *_jobType, std::string _executable, std::string _arguments, std::string _requirements, std::string _rank, struct ns1__getJobTemplateResponse &_param_31)
{	struct ns1__getJobTemplate soap_tmp_ns1__getJobTemplate;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getJobTemplate._jobType = _jobType;
	soap_tmp_ns1__getJobTemplate._executable = _executable;
	soap_tmp_ns1__getJobTemplate._arguments = _arguments;
	soap_tmp_ns1__getJobTemplate._requirements = _requirements;
	soap_tmp_ns1__getJobTemplate._rank = _rank;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getJobTemplate(soap, &soap_tmp_ns1__getJobTemplate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getJobTemplate(soap, &soap_tmp_ns1__getJobTemplate, "ns1:getJobTemplate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getJobTemplate(soap, &soap_tmp_ns1__getJobTemplate, "ns1:getJobTemplate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_31)
		return soap_closesock(soap);
	soap_default_ns1__getJobTemplateResponse(soap, &_param_31);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getJobTemplateResponse(soap, &_param_31, "ns1:getJobTemplateResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getDAGTemplate(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__GraphStructType *_dependencies, std::string _requirements, std::string _rank, struct ns1__getDAGTemplateResponse &_param_32)
{	struct ns1__getDAGTemplate soap_tmp_ns1__getDAGTemplate;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getDAGTemplate._dependencies = _dependencies;
	soap_tmp_ns1__getDAGTemplate._requirements = _requirements;
	soap_tmp_ns1__getDAGTemplate._rank = _rank;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getDAGTemplate(soap, &soap_tmp_ns1__getDAGTemplate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getDAGTemplate(soap, &soap_tmp_ns1__getDAGTemplate, "ns1:getDAGTemplate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getDAGTemplate(soap, &soap_tmp_ns1__getDAGTemplate, "ns1:getDAGTemplate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_32)
		return soap_closesock(soap);
	soap_default_ns1__getDAGTemplateResponse(soap, &_param_32);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getDAGTemplateResponse(soap, &_param_32, "ns1:getDAGTemplateResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getCollectionTemplate(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _jobNumber, std::string _requirements, std::string _rank, struct ns1__getCollectionTemplateResponse &_param_33)
{	struct ns1__getCollectionTemplate soap_tmp_ns1__getCollectionTemplate;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getCollectionTemplate._jobNumber = _jobNumber;
	soap_tmp_ns1__getCollectionTemplate._requirements = _requirements;
	soap_tmp_ns1__getCollectionTemplate._rank = _rank;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getCollectionTemplate(soap, &soap_tmp_ns1__getCollectionTemplate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getCollectionTemplate(soap, &soap_tmp_ns1__getCollectionTemplate, "ns1:getCollectionTemplate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getCollectionTemplate(soap, &soap_tmp_ns1__getCollectionTemplate, "ns1:getCollectionTemplate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_33)
		return soap_closesock(soap);
	soap_default_ns1__getCollectionTemplateResponse(soap, &_param_33);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getCollectionTemplateResponse(soap, &_param_33, "ns1:getCollectionTemplateResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getIntParametricJobTemplate(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StringList *_attributes, int _param, int _parameterStart, int _parameterStep, std::string _requirements, std::string _rank, struct ns1__getIntParametricJobTemplateResponse &_param_34)
{	struct ns1__getIntParametricJobTemplate soap_tmp_ns1__getIntParametricJobTemplate;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getIntParametricJobTemplate._attributes = _attributes;
	soap_tmp_ns1__getIntParametricJobTemplate._param = _param;
	soap_tmp_ns1__getIntParametricJobTemplate._parameterStart = _parameterStart;
	soap_tmp_ns1__getIntParametricJobTemplate._parameterStep = _parameterStep;
	soap_tmp_ns1__getIntParametricJobTemplate._requirements = _requirements;
	soap_tmp_ns1__getIntParametricJobTemplate._rank = _rank;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getIntParametricJobTemplate(soap, &soap_tmp_ns1__getIntParametricJobTemplate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getIntParametricJobTemplate(soap, &soap_tmp_ns1__getIntParametricJobTemplate, "ns1:getIntParametricJobTemplate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getIntParametricJobTemplate(soap, &soap_tmp_ns1__getIntParametricJobTemplate, "ns1:getIntParametricJobTemplate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_34)
		return soap_closesock(soap);
	soap_default_ns1__getIntParametricJobTemplateResponse(soap, &_param_34);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getIntParametricJobTemplateResponse(soap, &_param_34, "ns1:getIntParametricJobTemplateResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getStringParametricJobTemplate(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StringList *_attributes, ns1__StringList *_param, std::string _requirements, std::string _rank, struct ns1__getStringParametricJobTemplateResponse &_param_35)
{	struct ns1__getStringParametricJobTemplate soap_tmp_ns1__getStringParametricJobTemplate;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getStringParametricJobTemplate._attributes = _attributes;
	soap_tmp_ns1__getStringParametricJobTemplate._param = _param;
	soap_tmp_ns1__getStringParametricJobTemplate._requirements = _requirements;
	soap_tmp_ns1__getStringParametricJobTemplate._rank = _rank;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getStringParametricJobTemplate(soap, &soap_tmp_ns1__getStringParametricJobTemplate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getStringParametricJobTemplate(soap, &soap_tmp_ns1__getStringParametricJobTemplate, "ns1:getStringParametricJobTemplate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getStringParametricJobTemplate(soap, &soap_tmp_ns1__getStringParametricJobTemplate, "ns1:getStringParametricJobTemplate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_35)
		return soap_closesock(soap);
	soap_default_ns1__getStringParametricJobTemplateResponse(soap, &_param_35);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getStringParametricJobTemplateResponse(soap, &_param_35, "ns1:getStringParametricJobTemplateResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getACLItems(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jobId, struct ns1__getACLItemsResponse &_param_36)
{	struct ns1__getACLItems soap_tmp_ns1__getACLItems;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getACLItems._jobId = _jobId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getACLItems(soap, &soap_tmp_ns1__getACLItems);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getACLItems(soap, &soap_tmp_ns1__getACLItems, "ns1:getACLItems", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getACLItems(soap, &soap_tmp_ns1__getACLItems, "ns1:getACLItems", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_36)
		return soap_closesock(soap);
	soap_default_ns1__getACLItemsResponse(soap, &_param_36);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getACLItemsResponse(soap, &_param_36, "ns1:getACLItemsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__addACLItems(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jobId, ns1__StringList *_items, struct ns1__addACLItemsResponse &_param_37)
{	struct ns1__addACLItems soap_tmp_ns1__addACLItems;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__addACLItems._jobId = _jobId;
	soap_tmp_ns1__addACLItems._items = _items;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__addACLItems(soap, &soap_tmp_ns1__addACLItems);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__addACLItems(soap, &soap_tmp_ns1__addACLItems, "ns1:addACLItems", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__addACLItems(soap, &soap_tmp_ns1__addACLItems, "ns1:addACLItems", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_37)
		return soap_closesock(soap);
	soap_default_ns1__addACLItemsResponse(soap, &_param_37);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__addACLItemsResponse(soap, &_param_37, "ns1:addACLItemsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__removeACLItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jobId, std::string _item, struct ns1__removeACLItemResponse &_param_38)
{	struct ns1__removeACLItem soap_tmp_ns1__removeACLItem;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__removeACLItem._jobId = _jobId;
	soap_tmp_ns1__removeACLItem._item = _item;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__removeACLItem(soap, &soap_tmp_ns1__removeACLItem);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__removeACLItem(soap, &soap_tmp_ns1__removeACLItem, "ns1:removeACLItem", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__removeACLItem(soap, &soap_tmp_ns1__removeACLItem, "ns1:removeACLItem", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_38)
		return soap_closesock(soap);
	soap_default_ns1__removeACLItemResponse(soap, &_param_38);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__removeACLItemResponse(soap, &_param_38, "ns1:removeACLItemResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getDelegatedProxyInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct ns1__getDelegatedProxyInfoResponse &_param_39)
{	struct ns1__getDelegatedProxyInfo soap_tmp_ns1__getDelegatedProxyInfo;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getDelegatedProxyInfo._delegationID = _delegationID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getDelegatedProxyInfo(soap, &soap_tmp_ns1__getDelegatedProxyInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getDelegatedProxyInfo(soap, &soap_tmp_ns1__getDelegatedProxyInfo, "ns1:getDelegatedProxyInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getDelegatedProxyInfo(soap, &soap_tmp_ns1__getDelegatedProxyInfo, "ns1:getDelegatedProxyInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_39)
		return soap_closesock(soap);
	soap_default_ns1__getDelegatedProxyInfoResponse(soap, &_param_39);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getDelegatedProxyInfoResponse(soap, &_param_39, "ns1:getDelegatedProxyInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getJobProxyInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jobId, struct ns1__getJobProxyInfoResponse &_param_40)
{	struct ns1__getJobProxyInfo soap_tmp_ns1__getJobProxyInfo;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getJobProxyInfo._jobId = _jobId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getJobProxyInfo(soap, &soap_tmp_ns1__getJobProxyInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getJobProxyInfo(soap, &soap_tmp_ns1__getJobProxyInfo, "ns1:getJobProxyInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getJobProxyInfo(soap, &soap_tmp_ns1__getJobProxyInfo, "ns1:getJobProxyInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_40)
		return soap_closesock(soap);
	soap_default_ns1__getJobProxyInfoResponse(soap, &_param_40);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getJobProxyInfoResponse(soap, &_param_40, "ns1:getJobProxyInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__enableFilePerusal(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jobId, ns1__StringList *_fileList, struct ns1__enableFilePerusalResponse &_param_41)
{	struct ns1__enableFilePerusal soap_tmp_ns1__enableFilePerusal;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__enableFilePerusal._jobId = _jobId;
	soap_tmp_ns1__enableFilePerusal._fileList = _fileList;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__enableFilePerusal(soap, &soap_tmp_ns1__enableFilePerusal);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__enableFilePerusal(soap, &soap_tmp_ns1__enableFilePerusal, "ns1:enableFilePerusal", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__enableFilePerusal(soap, &soap_tmp_ns1__enableFilePerusal, "ns1:enableFilePerusal", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_41)
		return soap_closesock(soap);
	soap_default_ns1__enableFilePerusalResponse(soap, &_param_41);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__enableFilePerusalResponse(soap, &_param_41, "ns1:enableFilePerusalResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getPerusalFiles(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _jobId, std::string _file, bool _allChunks, std::string _protocol, struct ns1__getPerusalFilesResponse &_param_42)
{	struct ns1__getPerusalFiles soap_tmp_ns1__getPerusalFiles;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getPerusalFiles._jobId = _jobId;
	soap_tmp_ns1__getPerusalFiles._file = _file;
	soap_tmp_ns1__getPerusalFiles._allChunks = _allChunks;
	soap_tmp_ns1__getPerusalFiles._protocol = _protocol;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getPerusalFiles(soap, &soap_tmp_ns1__getPerusalFiles);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getPerusalFiles(soap, &soap_tmp_ns1__getPerusalFiles, "ns1:getPerusalFiles", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getPerusalFiles(soap, &soap_tmp_ns1__getPerusalFiles, "ns1:getPerusalFiles", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_42)
		return soap_closesock(soap);
	soap_default_ns1__getPerusalFilesResponse(soap, &_param_42);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getPerusalFilesResponse(soap, &_param_42, "ns1:getPerusalFilesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getTransferProtocols(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1__getTransferProtocolsResponse &_param_43)
{	struct ns1__getTransferProtocols soap_tmp_ns1__getTransferProtocols;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getTransferProtocols(soap, &soap_tmp_ns1__getTransferProtocols);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTransferProtocols(soap, &soap_tmp_ns1__getTransferProtocols, "ns1:getTransferProtocols", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTransferProtocols(soap, &soap_tmp_ns1__getTransferProtocols, "ns1:getTransferProtocols", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_43)
		return soap_closesock(soap);
	soap_default_ns1__getTransferProtocolsResponse(soap, &_param_43);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getTransferProtocolsResponse(soap, &_param_43, "ns1:getTransferProtocolsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getJobStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string jobId, struct ns1__getJobStatusResponse &_param_44)
{	struct ns1__getJobStatus soap_tmp_ns1__getJobStatus;
	if (!soap_endpoint)
		soap_endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__getJobStatus.jobId = jobId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getJobStatus(soap, &soap_tmp_ns1__getJobStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getJobStatus(soap, &soap_tmp_ns1__getJobStatus, "ns1:getJobStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getJobStatus(soap, &soap_tmp_ns1__getJobStatus, "ns1:getJobStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_44)
		return soap_closesock(soap);
	soap_default_ns1__getJobStatusResponse(soap, &_param_44);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__getJobStatusResponse(soap, &_param_44, "ns1:getJobStatusResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
