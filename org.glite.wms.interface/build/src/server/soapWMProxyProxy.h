/* soapWMProxyProxy.h
   Generated by gSOAP 2.7.16 from wm.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapWMProxyProxy_H
#define soapWMProxyProxy_H
#include "soapH.h"
class WMProxy
{   public:
	/// Runtime engine context allocated in constructor
	struct soap *soap;
	/// Endpoint URL of service 'WMProxy' (change as needed)
	const char *endpoint;
	/// Constructor allocates soap engine context, sets default endpoint URL, and sets namespace mapping table
	WMProxy()
	{ soap = soap_new(); endpoint = "https://my.default.wmproxy.endpoint:7443/glite_wms_wmproxy_server"; if (soap && !soap->namespaces) { static const struct Namespace namespaces[] = 
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"jsdlposix", "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix", NULL, NULL},
	{"jsdl", "http://schemas.ggf.org/jsdl/2005/11/jsdl", NULL, NULL},
	{"delegation1", "http://www.gridsite.org/namespaces/delegation-1", NULL, NULL},
	{"delegationns", "http://www.gridsite.org/namespaces/delegation-2", NULL, NULL},
	{"ns1", "http://glite.org/wms/wmproxy", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap->namespaces = namespaces; } };
	/// Destructor frees deserialized data and soap engine context
	virtual ~WMProxy() { if (soap) { soap_destroy(soap); soap_end(soap); soap_free(soap); } };
	/// Invoke 'getProxyReq' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getProxyReq(std::string _delegationID, struct ns1__getProxyReqResponse &_param_12) { return soap ? soap_call_ns1__getProxyReq(soap, endpoint, NULL, _delegationID, _param_12) : SOAP_EOM; };
	/// Invoke 'putProxy' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__putProxy(std::string _delegationID, std::string _proxy, struct ns1__putProxyResponse &_param_13) { return soap ? soap_call_ns1__putProxy(soap, endpoint, NULL, _delegationID, _proxy, _param_13) : SOAP_EOM; };
	/// Invoke 'getVersion' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getVersion(struct ns1__getVersionResponse &_param_14) { return soap ? soap_call_ns1__getVersion(soap, endpoint, NULL, _param_14) : SOAP_EOM; };
	/// Invoke 'getJDL' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getJDL(std::string _jobId, enum ns1__JdlType _type, struct ns1__getJDLResponse &_param_15) { return soap ? soap_call_ns1__getJDL(soap, endpoint, NULL, _jobId, _type, _param_15) : SOAP_EOM; };
	/// Invoke 'jobRegister' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__jobRegister(std::string _jdl, std::string _delegationId, struct ns1__jobRegisterResponse &_param_16) { return soap ? soap_call_ns1__jobRegister(soap, endpoint, NULL, _jdl, _delegationId, _param_16) : SOAP_EOM; };
	/// Invoke 'jobRegisterJSDL' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__jobRegisterJSDL(jsdl__JobDefinition_USCOREType *_jsdl, std::string _delegationId, struct ns1__jobRegisterJSDLResponse &_param_17) { return soap ? soap_call_ns1__jobRegisterJSDL(soap, endpoint, NULL, _jsdl, _delegationId, _param_17) : SOAP_EOM; };
	/// Invoke 'jobStart' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__jobStart(std::string _jobId, struct ns1__jobStartResponse &_param_18) { return soap ? soap_call_ns1__jobStart(soap, endpoint, NULL, _jobId, _param_18) : SOAP_EOM; };
	/// Invoke 'jobSubmit' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__jobSubmit(std::string _jdl, std::string _delegationId, struct ns1__jobSubmitResponse &_param_19) { return soap ? soap_call_ns1__jobSubmit(soap, endpoint, NULL, _jdl, _delegationId, _param_19) : SOAP_EOM; };
	/// Invoke 'jobSubmitJSDL' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__jobSubmitJSDL(std::string _delegationId, jsdl__JobDefinition_USCOREType *_jsdl, struct ns1__jobSubmitJSDLResponse &_param_20) { return soap ? soap_call_ns1__jobSubmitJSDL(soap, endpoint, NULL, _delegationId, _jsdl, _param_20) : SOAP_EOM; };
	/// Invoke 'jobCancel' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__jobCancel(std::string _jobId, struct ns1__jobCancelResponse &_param_21) { return soap ? soap_call_ns1__jobCancel(soap, endpoint, NULL, _jobId, _param_21) : SOAP_EOM; };
	/// Invoke 'getMaxInputSandboxSize' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getMaxInputSandboxSize(struct ns1__getMaxInputSandboxSizeResponse &_param_22) { return soap ? soap_call_ns1__getMaxInputSandboxSize(soap, endpoint, NULL, _param_22) : SOAP_EOM; };
	/// Invoke 'getSandboxDestURI' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getSandboxDestURI(std::string _jobId, std::string _protocol, struct ns1__getSandboxDestURIResponse &_param_23) { return soap ? soap_call_ns1__getSandboxDestURI(soap, endpoint, NULL, _jobId, _protocol, _param_23) : SOAP_EOM; };
	/// Invoke 'getSandboxBulkDestURI' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getSandboxBulkDestURI(std::string _jobId, std::string _protocol, struct ns1__getSandboxBulkDestURIResponse &_param_24) { return soap ? soap_call_ns1__getSandboxBulkDestURI(soap, endpoint, NULL, _jobId, _protocol, _param_24) : SOAP_EOM; };
	/// Invoke 'getTotalQuota' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getTotalQuota(struct ns1__getTotalQuotaResponse &_param_25) { return soap ? soap_call_ns1__getTotalQuota(soap, endpoint, NULL, _param_25) : SOAP_EOM; };
	/// Invoke 'getFreeQuota' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getFreeQuota(struct ns1__getFreeQuotaResponse &_param_26) { return soap ? soap_call_ns1__getFreeQuota(soap, endpoint, NULL, _param_26) : SOAP_EOM; };
	/// Invoke 'jobPurge' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__jobPurge(std::string _jobId, struct ns1__jobPurgeResponse &_param_27) { return soap ? soap_call_ns1__jobPurge(soap, endpoint, NULL, _jobId, _param_27) : SOAP_EOM; };
	/// Invoke 'getOutputFileList' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getOutputFileList(std::string _jobId, std::string _protocol, struct ns1__getOutputFileListResponse &_param_28) { return soap ? soap_call_ns1__getOutputFileList(soap, endpoint, NULL, _jobId, _protocol, _param_28) : SOAP_EOM; };
	/// Invoke 'jobListMatch' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__jobListMatch(std::string _jdl, std::string _delegationId, struct ns1__jobListMatchResponse &_param_29) { return soap ? soap_call_ns1__jobListMatch(soap, endpoint, NULL, _jdl, _delegationId, _param_29) : SOAP_EOM; };
	/// Invoke 'jobListMatchJSDL' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__jobListMatchJSDL(jsdl__JobDefinition_USCOREType *_jsdl, std::string _delegationId, struct ns1__jobListMatchJSDLResponse &_param_30) { return soap ? soap_call_ns1__jobListMatchJSDL(soap, endpoint, NULL, _jsdl, _delegationId, _param_30) : SOAP_EOM; };
	/// Invoke 'getJobTemplate' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getJobTemplate(ns1__JobTypeList *_jobType, std::string _executable, std::string _arguments, std::string _requirements, std::string _rank, struct ns1__getJobTemplateResponse &_param_31) { return soap ? soap_call_ns1__getJobTemplate(soap, endpoint, NULL, _jobType, _executable, _arguments, _requirements, _rank, _param_31) : SOAP_EOM; };
	/// Invoke 'getDAGTemplate' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getDAGTemplate(ns1__GraphStructType *_dependencies, std::string _requirements, std::string _rank, struct ns1__getDAGTemplateResponse &_param_32) { return soap ? soap_call_ns1__getDAGTemplate(soap, endpoint, NULL, _dependencies, _requirements, _rank, _param_32) : SOAP_EOM; };
	/// Invoke 'getCollectionTemplate' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getCollectionTemplate(int _jobNumber, std::string _requirements, std::string _rank, struct ns1__getCollectionTemplateResponse &_param_33) { return soap ? soap_call_ns1__getCollectionTemplate(soap, endpoint, NULL, _jobNumber, _requirements, _rank, _param_33) : SOAP_EOM; };
	/// Invoke 'getIntParametricJobTemplate' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getIntParametricJobTemplate(ns1__StringList *_attributes, int _param, int _parameterStart, int _parameterStep, std::string _requirements, std::string _rank, struct ns1__getIntParametricJobTemplateResponse &_param_34) { return soap ? soap_call_ns1__getIntParametricJobTemplate(soap, endpoint, NULL, _attributes, _param, _parameterStart, _parameterStep, _requirements, _rank, _param_34) : SOAP_EOM; };
	/// Invoke 'getStringParametricJobTemplate' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getStringParametricJobTemplate(ns1__StringList *_attributes, ns1__StringList *_param, std::string _requirements, std::string _rank, struct ns1__getStringParametricJobTemplateResponse &_param_35) { return soap ? soap_call_ns1__getStringParametricJobTemplate(soap, endpoint, NULL, _attributes, _param, _requirements, _rank, _param_35) : SOAP_EOM; };
	/// Invoke 'getACLItems' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getACLItems(std::string _jobId, struct ns1__getACLItemsResponse &_param_36) { return soap ? soap_call_ns1__getACLItems(soap, endpoint, NULL, _jobId, _param_36) : SOAP_EOM; };
	/// Invoke 'addACLItems' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__addACLItems(std::string _jobId, ns1__StringList *_items, struct ns1__addACLItemsResponse &_param_37) { return soap ? soap_call_ns1__addACLItems(soap, endpoint, NULL, _jobId, _items, _param_37) : SOAP_EOM; };
	/// Invoke 'removeACLItem' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__removeACLItem(std::string _jobId, std::string _item, struct ns1__removeACLItemResponse &_param_38) { return soap ? soap_call_ns1__removeACLItem(soap, endpoint, NULL, _jobId, _item, _param_38) : SOAP_EOM; };
	/// Invoke 'getDelegatedProxyInfo' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getDelegatedProxyInfo(std::string _delegationID, struct ns1__getDelegatedProxyInfoResponse &_param_39) { return soap ? soap_call_ns1__getDelegatedProxyInfo(soap, endpoint, NULL, _delegationID, _param_39) : SOAP_EOM; };
	/// Invoke 'getJobProxyInfo' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getJobProxyInfo(std::string _jobId, struct ns1__getJobProxyInfoResponse &_param_40) { return soap ? soap_call_ns1__getJobProxyInfo(soap, endpoint, NULL, _jobId, _param_40) : SOAP_EOM; };
	/// Invoke 'enableFilePerusal' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__enableFilePerusal(std::string _jobId, ns1__StringList *_fileList, struct ns1__enableFilePerusalResponse &_param_41) { return soap ? soap_call_ns1__enableFilePerusal(soap, endpoint, NULL, _jobId, _fileList, _param_41) : SOAP_EOM; };
	/// Invoke 'getPerusalFiles' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getPerusalFiles(std::string _jobId, std::string _file, bool _allChunks, std::string _protocol, struct ns1__getPerusalFilesResponse &_param_42) { return soap ? soap_call_ns1__getPerusalFiles(soap, endpoint, NULL, _jobId, _file, _allChunks, _protocol, _param_42) : SOAP_EOM; };
	/// Invoke 'getTransferProtocols' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getTransferProtocols(struct ns1__getTransferProtocolsResponse &_param_43) { return soap ? soap_call_ns1__getTransferProtocols(soap, endpoint, NULL, _param_43) : SOAP_EOM; };
	/// Invoke 'getJobStatus' of service 'WMProxy' and return error code (or SOAP_OK)
	virtual int ns1__getJobStatus(std::string jobId, struct ns1__getJobStatusResponse &_param_44) { return soap ? soap_call_ns1__getJobStatus(soap, endpoint, NULL, jobId, _param_44) : SOAP_EOM; };
};
#endif
