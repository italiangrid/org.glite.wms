<?xml version="1.0"?>
<!--
	Copyright (c) 2004 on behalf of the EU EGEE Project: 
	The European Organization for Nuclear Research (CERN), 
	Istituto Nazionale di Fisica Nucleare (INFN), Italy
	Datamat Spa, Italy
	Centre National de la Recherche Scientifique (CNRS), France
	CS Systeme d'Information (CSSI), France
	Royal Institute of Technology, Center for Parallel Computers (KTH-PDC), Sweden
	Universiteit van Amsterdam (UvA), Netherlands
	University of Helsinki (UH.HIP), Finland
	University of Bergen (UiB), Norway
	Council for the Central Laboratory of the Research Councils (CCLRC), United Kingdom

	GLite Middleware WMS Configuration Specification File
	
	Authors: Alberto Di Meglio <alberto.di.meglio@cern.ch>		
	         Joachim Flammer <Joachim.Flammer@cern.ch>
	Version info: $Id$
	Release: $Name$

	Revision history:
	$Log$
	Revision 1.18  2004/05/18 10:17:54  dimeglio
	Modified not to use -r HEAD when checking out modules from HEAD

	Revision 1.17  2004/05/17 16:22:12  flammer
	Unification of variable naming.
	
	Revision 1.16  2004/05/13 23:40:56  dimeglio
	Removed one occurrence of Test2 WMS
	
	Revision 1.15  2004/05/13 23:07:19  dimeglio
	Added ant-contrib target
	Replaced workspace.abs.dir with workspace.dir
	
	Revision 1.14  2004/05/13 19:37:04  dimeglio
	Changed all occurrences of EGEE or egee to GLite and glite
	
	Revision 1.13  2004/05/13 18:35:11  flammer
	Added missing dependencies. Deleted duplicated external dependencies.
	
	Revision 1.12  2004/05/13 09:46:58  flammer
	Moved to variable naming & include style.
	
	Revision 1.11  2004/05/05 23:21:04  dimeglio
	Updated Jalopy dependencies
	
	Revision 1.10  2004/05/05 23:05:17  dimeglio
	Removed import of external dependencies file, dependencies are
	explicitly set. This is necessary to be able to run the subsystem CSF
	without extracting org.egee manually
	
	Revision 1.9  2004/05/03 00:30:57  dimeglio
	Added jcommon component to subsystem dependencies
	
	Revision 1.8  2004/05/03 00:28:12  dimeglio
	Added jcommon component to subsystem dependencies
	
	Revision 1.7  2004/04/29 04:36:56  dimeglio
	Fixed dependency spelling errors
	
	Revision 1.6  2004/04/29 04:05:04  dimeglio
	Moved user property look up before dependencies properties
	
	Revision 1.5  2004/04/29 03:39:47  dimeglio
	Added Import of  user and project properties
	
	Revision 1.4  2004/04/29 03:30:23  dimeglio
	Replaced list of dependencies with common dependencies file
	
	Revision 1.3  2004/04/29 02:43:34  dimeglio
	Added check for presence of junit.runner class
	
	Revision 1.2  2004/04/29 01:42:09  dimeglio
	Added dependencies to csf files
	
	Revision 1.1  2004/04/29 01:36:29  dimeglio
	Added org.egee.test3.wms
	
-->

<project name="GLite Middleware WMS CSF" default="all">

	<!-- overwrite default workspace directory -->
	<property name="workspace.dir" value="../.." />

	<!-- ===============================================
		 Load properties
		 =============================================== -->

	<!-- load baseline and user properties -->
	<import file="${workspace.dir}/org.glite/project/baseline.properties.xml" />

	<!-- define build properties file location since we are already in project dir -->
	<property name="subsystem.build.properties.file" value="./build.properties" />

	<!-- Load subsytem-specific property files -->
	<import file="./properties.xml"/>

	<!-- load global properties -->
	<import file="${global.properties.file}" />

	<!-- ===============================================
		 Load dependencies 
		 =============================================== -->

	<!-- Load user dependencies file -->
	<property file="${user.dependencies.file}" />
		
	<!-- Load subsystem dependencies file -->
	<property file="./dependencies.properties" />

	<!-- Load global dependencies file -->
	<property file="${global.dependencies.file}" />

	<!-- ===============================================
		 Load targets 
		 =============================================== -->

	<!-- Load external dependencies targets -->
	<import file="${global.targets-external-dependencies.file}" />

	<!-- ========================================================
		 Checkout/updates the GLite Middleware WMS components
		 ======================================================== -->
		
	<!-- Default update mode - Override from command line -->
	<property name="update" value="false" />
	
	<!-- Set org.glite update mode -->
	<condition property="glite.uptodate">
		<and>
			<isfalse value="${update}" />
			<available file="${global.dependencies.file}" type="file" />
		</and>
	</condition>

	<!-- Set org.glite.wms update mode -->
	<condition property="uptodate">
		<isfalse value="${update}" />
	</condition>


	<!-- =====================================================
		 Self-update if required
		 ===================================================== -->
		
	<!-- Update main GLite module -->
	<target name="org.glite" unless="uptodate"
			description="Check if org.glite is uptodate.">
		<condition property="glite.tag">
			<not>
				<equals arg1="${org.glite.version}" arg2="HEAD" />
			</not>
		</condition>
		<antcall target="getGLiteHead" />
		<antcall target="getGLiteTag" />
	</target>
	<target name="getGLiteHead" unless="glite.tag">
 		<antcall target="getCVSHead" inheritAll="false">
			<param name="package" value="${global.name}" />
			<param name="dest" value="${workspace.dir}" />
 		</antcall>
		<fail>The org.glite module has been updated, please rerun the configuration file</fail>
	</target>
	<target name="getGLiteTag" if="glite.tag">
 		<antcall target="getCVSTag" inheritAll="false">
			<param name="package" value="${global.name}" />
			<param name="dest" value="${workspace.dir}" />
			<param name="tag" value="${org.glite.version}" />
 		</antcall>
		<fail>The org.glite module has been updated, please rerun the configuration file</fail>
	</target>

	<!-- Update the current module -->
	<target name="org.glite.wms" unless="uptodate"
			description="Update security subsystem.">
		<condition property="wms.tag">
			<not>
				<equals arg1="${org.glite.wms.version}" arg2="HEAD" />
			</not>
		</condition>
		<antcall target="getWMSHead" />
		<antcall target="getWMSTag" />
	</target>
	<target name="getWMSHead" unless="wms.tag">
 		<antcall target="getCVSHead" inheritAll="false">
			<param name="package" value="${wms.subsystem.name}" />
			<param name="dest" value="${workspace.dir}" />
 		</antcall>
		<fail>The org.glite.wms module has been updated, please rerun the configuration file</fail>
	</target>
	<target name="getWMSTag" if="wms.tag">
 		<antcall target="getCVSTag" inheritAll="false">
			<param name="package" value="${wms.subsystem.name}" />
			<param name="dest" value="${workspace.dir}" />
			<param name="tag" value="${org.glite.wms.version}" />
 		</antcall>
		<fail>The org.glite.wms module has been updated, please rerun the configuration file</fail>
	</target>
	
	<!-- *****************************************************-->
	<!-- Environmental checks                                 -->
	<!-- *****************************************************-->
	
	<!-- All environmental checks -->
	<target name="envchecks" depends="oscheck,javacheck,antcheck,gcccheck" />

	<target name="oscheck">
		<!-- Operating system -->
		<condition property="isWindows">
			<os family="windows"/>
		</condition>
		<condition property="isUnix">
			<os family="unix"/>
		</condition>
		<echo>Operating system:		${os.name}</echo>
	</target>
			
	<target name="javacheck">
		<!-- Java version -->
		<condition property="isJavaOk">
			<contains string="${java.version}" substring="${glite.java.version}"/>
		</condition>
		<echo>Java version:		${java.version}</echo>
		<fail unless="isJavaOk">Java JRE version must be ${glite.java.version}_XX</fail>
		<echo>JAVA_HOME:			${env.JAVA_HOME}</echo>
	</target>
			
	<target name="antcheck">
		<!--  Ant -->
		<condition property="isAntOk">
			<contains string="${ant.version}" substring="${glite.ant.version}"/>
		</condition>
		<echo>Ant version:		${ant.version}</echo>
		<fail unless="isAntOk">Ant version must be ${glite.ant.version}</fail>
		<echo>ANT_HOME:			${env.ANT_HOME}</echo>
	</target>
		
	<target name="gcccheck" if="isUnix">
		<!-- Gcc compiler version -->
		<exec executable="gcc" outputproperty="detected.gcc.version">
			<arg line="-dumpversion" />
		</exec>
		<condition property="isGccOk">
			<equals arg1="${detected.gcc.version}" arg2="${glite.gcc.version}"/>
		</condition>
		<echo>Gcc version:		${detected.gcc.version}</echo>
		<fail unless="isGccOk">Gcc version must be ${glite.gcc.version}</fail>
		<exec executable="which" outputproperty="detected.gcc.path">
			<arg line="gcc" />
		</exec>
		<echo>gcc path:			${detected.gcc.path}</echo>
	</target>
	
	<!-- *****************************************************-->
	<!-- Development tools                                    -->
	<!-- *****************************************************-->
	
	<!-- All development tools -->
 	<target name="devtools" depends="junitcheck,
					 				 junit,
 									 chkstyle,
 									 jalopy,
 									 ant-contrib,
 									 cpptasks"/>		
	
	<!-- =====================================================
		 External libraries
		 ===================================================== -->
	
	<!--  All external libraries -->
 	<target name="external" depends="log4j"/>
 	
	<!-- =====================================================
		 GLite WMS modules
		 ===================================================== -->
	
	<!-- All project modules -->
 	<target name="project" depends="thirdparty-globus_ssl_utils,
 								    thirdparty-bypass,
 								    thirdparty-globus_gridftp_server,
 								    thirdparty-loki,
 								    common,
 								    jcommon"/>

	<!-- Globus SSLUtils -->
 	<target name="thirdparty-globus_ssl_utils">		
		<condition property="globus_ssl_utils.tag">
			<not>
				<equals arg1="${org.glite.wms.thirdparty-globus_ssl_utils.version}" arg2="HEAD" />
			</not>
		</condition>
		<antcall target="getGSSLUHead" />
		<antcall target="getGSSLUTag" />
	</target>
	<target name="getGSSLUHead" unless="globus_ssl_utils.tag">
 		<antcall target="getCVSHead" inheritAll="false">
			<param name="package" value="org.glite.wms.thirdparty-globus_ssl_utils" />
			<param name="dest" value="${workspace.dir}" />
 		</antcall>
	</target>
	<target name="getGSSLUTag" if="globus_ssl_utils.tag">
 		<antcall target="getCVSTag" inheritAll="false">
			<param name="package" value="org.glite.wms.thirdparty-globus_ssl_utils" />
			<param name="dest" value="${workspace.dir}" />
			<param name="tag" value="${org.glite.wms.thirdparty-globus_ssl_utils.version}" />
 		</antcall>
	</target>
	
	<!-- ByPass -->
 	<target name="thirdparty-bypass">		
		<condition property="bypass.tag">
			<not>
				<equals arg1="${org.glite.wms.thirdparty-bypass.version}" arg2="HEAD" />
			</not>
		</condition>
		<antcall target="getByPassHead" />
		<antcall target="getByPassTag" />
	</target>
	<target name="getByPassHead" unless="bypass.tag">
 		<antcall target="getCVSHead" inheritAll="false">
			<param name="package" value="org.glite.wms.thirdparty-bypass" />
			<param name="dest" value="${workspace.dir}" />
 		</antcall>
	</target>
	<target name="getByPassTag" if="bypass.tag">
 		<antcall target="getCVSTag" inheritAll="false">
			<param name="package" value="org.glite.wms.thirdparty-bypass" />
			<param name="dest" value="${workspace.dir}" />
			<param name="tag" value="${org.glite.wms.thirdparty-bypass.version}" />
 		</antcall>
	</target>
	
	<!-- Globus GridFTP Server -->
 	<target name="thirdparty-globus_gridftp_server" depends="globus">		
		<condition property="globus_gridftp_server.tag">
			<not>
				<equals arg1="${org.glite.wms.thirdparty-globus_gridftp_server.version}" arg2="HEAD" />
			</not>
		</condition>
		<antcall target="getGGFTPSHead" />
		<antcall target="getGGFTPSTag" />
	</target>
	<target name="getGGFTPSHead" unless="globus_gridftp_server.tag">
 		<antcall target="getCVSHead" inheritAll="false">
			<param name="package" value="org.glite.wms.thirdparty-globus_gridftp_server" />
			<param name="dest" value="${workspace.dir}" />
 		</antcall>
	</target>
	<target name="getGGFTPSTag" if="globus_gridftp_server.tag">
 		<antcall target="getCVSTag" inheritAll="false">
			<param name="package" value="org.glite.wms.thirdparty-globus_gridftp_server" />
			<param name="dest" value="${workspace.dir}" />
			<param name="tag" value="${org.glite.wms.thirdparty-globus_gridftp_server.version}" />
 		</antcall>
	</target>
	
	<!-- Loki -->
 	<target name="thirdparty-loki">		
		<condition property="loki.tag">
			<not>
				<equals arg1="${org.glite.wms.thirdparty-loki.version}" arg2="HEAD" />
			</not>
		</condition>
		<antcall target="getLokiHead" />
		<antcall target="getLokiTag" />
	</target>
	<target name="getLokiHead" unless="loki.tag">
 		<antcall target="getCVSHead" inheritAll="false">
			<param name="package" value="org.glite.wms.thirdparty-loki" />
			<param name="dest" value="${workspace.dir}" />
 		</antcall>
	</target>
	<target name="getLokiTag" if="loki.tag">
 		<antcall target="getCVSTag" inheritAll="false">
			<param name="package" value="org.glite.wms.thirdparty-loki" />
			<param name="dest" value="${workspace.dir}" />
			<param name="tag" value="${org.glite.wms.thirdparty-loki.version}" />
 		</antcall>
	</target>
	
	<!-- Common -->
 	<target name="common" depends="boost,classads,globus">		
		<condition property="common.tag">
			<not>
				<equals arg1="${org.glite.wms.common.version}" arg2="HEAD" />
			</not>
		</condition>
		<antcall target="getCommonHead" />
		<antcall target="getCommonTag" />
	</target>
	<target name="getCommonHead" unless="common.tag">
 		<antcall target="getCVSHead" inheritAll="false">
			<param name="package" value="org.glite.wms.common" />
			<param name="dest" value="${workspace.dir}" />
 		</antcall>
	</target>
	<target name="getCommonTag" if="common.tag">
 		<antcall target="getCVSTag" inheritAll="false">
			<param name="package" value="org.glite.wms.common" />
			<param name="dest" value="${workspace.dir}" />
			<param name="tag" value="${org.glite.wms.common.version}" />
 		</antcall>
	</target>
	
	<!-- JCommon -->
 	<target name="jcommon" depends="jclassads">		
		<condition property="jcommon.tag">
			<not>
				<equals arg1="${org.glite.wms.jcommon.version}" arg2="HEAD" />
			</not>
		</condition>
		<antcall target="getJCommonHead" />
		<antcall target="getJCommonTag" />
	</target>
	<target name="getJCommonHead" unless="jcommon.tag">
 		<antcall target="getCVSHead" inheritAll="false">
			<param name="package" value="org.glite.wms.jcommon" />
			<param name="dest" value="${workspace.dir}" />
 		</antcall>
	</target>
	<target name="getJCommonTag" if="jcommon.tag">
 		<antcall target="getCVSTag" inheritAll="false">
			<param name="package" value="org.glite.wms.jcommon" />
			<param name="dest" value="${workspace.dir}" />
			<param name="tag" value="${org.glite.wms.jcommon.version}" />
 		</antcall>
	</target>
	
	<!-- ====================================================
		 Checkout all
		 ==================================================== -->
	
	<!-- All libraries -->
 	<target name="all" depends="org.glite, org.glite.wms, envchecks, devtools, external, project" />		

	<!-- ====================================================
		 CVS Targets
		 ==================================================== -->

	<target name="getCVSHead" if="">
		<cvs command="checkout"
			package="${package}"
			dest="${dest}" />
	</target>
	
	<target name="getCVSTag" if="">
		<cvs command="checkout"
			package="${package}"
			dest="${dest}"
			tag="${tag}" />
	</target>
	
	<!-- ====================================================
		 Print dependecies to console
		 ==================================================== -->
	
 	<target name="dependencies">
 		<concat>
 			<fileset dir="." includes="dependencies.properties" />
 		</concat>
 	</target>		

</project>
