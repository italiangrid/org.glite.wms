<?xml version="1.0"?>
<!--
	Copyright (c) 2004 on behalf of the EU EGEE Project: 
	The European Organization for Nuclear Research (CERN), 
	Istituto Nazionale di Fisica Nucleare (INFN), Italy
	Datamat Spa, Italy
	Centre National de la Recherche Scientifique (CNRS), France
	CS Systeme d'Information (CSSI), France
	Royal Institute of Technology, Center for Parallel Computers (KTH-PDC), Sweden
	Universiteit van Amsterdam (UvA), Netherlands
	University of Helsinki (UH.HIP), Finland
	University of Bergen (UiB), Norway
	Council for the Central Laboratory of the Research Councils (CCLRC), United Kingdom

	EGEE Middleware Test WMS Configuration Specification File
	
	Authors: Alberto Di Meglio <alberto.di.meglio@cern.ch>		
	Version info: $Id$
	Release: $Name$

	Revision history:
	$Log$
	Revision 1.13  2004/05/13 18:35:11  flammer
	Added missing dependencies. Deleted duplicated external dependencies.

	Revision 1.12  2004/05/13 09:46:58  flammer
	Moved to variable naming & include style.
	
	Revision 1.11  2004/05/05 23:21:04  dimeglio
	Updated Jalopy dependencies
	
	Revision 1.10  2004/05/05 23:05:17  dimeglio
	Removed import of external dependencies file, dependencies are
	explicitly set. This is necessary to be able to run the subsystem CSF
	without extracting org.egee manually
	
	Revision 1.9  2004/05/03 00:30:57  dimeglio
	Added jcommon component to subsystem dependencies
	
	Revision 1.8  2004/05/03 00:28:12  dimeglio
	Added jcommon component to subsystem dependencies
	
	Revision 1.7  2004/04/29 04:36:56  dimeglio
	Fixed dependency spelling errors
	
	Revision 1.6  2004/04/29 04:05:04  dimeglio
	Moved user property look up before dependencies properties
	
	Revision 1.5  2004/04/29 03:39:47  dimeglio
	Added Import of  user and project properties
	
	Revision 1.4  2004/04/29 03:30:23  dimeglio
	Replaced list of dependencies with common dependencies file
	
	Revision 1.3  2004/04/29 02:43:34  dimeglio
	Added check for presence of junit.runner class
	
	Revision 1.2  2004/04/29 01:42:09  dimeglio
	Added dependencies to csf files
	
	Revision 1.1  2004/04/29 01:36:29  dimeglio
	Added org.egee.test3.wms
	
-->

<project name="EGEE Middleware Test2 WMS CSF" default="all">

	<!-- overwrite default workspace directory -->
	<property name="workspace.dir" value="../.." />

	<!-- ===============================================
		 Load properties
		 =============================================== -->

	<!-- load baseline and user properties -->
	<import file="${workspace.dir}/org.egee/project/baseline.properties.xml" />

	<!-- Load subsytem-specific property files -->
	<property file="./build.properties"/>
	<import file="./properties.xml"/>

	<!-- load global properties -->
	<import file="${global.properties.file}" />

	<!-- ===============================================
		 Load dependencies 
		 =============================================== -->

	<!-- Load user dependencies file -->
	<property file="${user.dependencies.file}" />
		
	<!-- Load subsystem dependencies file -->
	<property file="./dependencies.properties" />

	<!-- Load global dependencies file -->
	<property file="${global.dependencies.file}" />

	<!-- Load external dependencies -->
	<import file="${global.external-dependencies.file}" />

	<!-- ========================================================
		 Checkout/updates the EGEE Middleware Test2 WMS components
		 ======================================================== -->
		
	<!-- Default update mode - Override from command line -->
	<property name="update" value="false" />
	
	<!-- Set org.egee update mode -->
	<condition property="egee.uptodate">
		<and>
			<isfalse value="${update}" />
			<available file="${workspace.abs.dir}/org.egee" type="dir" />
		</and>
	</condition>

	<!-- Set org.egee.test3 update mode -->
	<condition property="uptodate">
		<isfalse value="${update}" />
	</condition>


	<!-- =====================================================
		 Self-update if required
		 ===================================================== -->
		
	<!-- Load subsystem dependencies file -->
	<property file="dependencies.properties" />

	<!-- Update main EGEE module -->
	<target name="org.egee" unless="egee.uptodate">
		<cvs command="checkout"
        	package="org.egee"
        	dest="${workspace.dir}"
        	tag="${org.egee.version}"/>
		<fail>The org.egee module has been updated, please rerun the configuration file</fail>
	</target>

	<!-- Update the current module -->
	<target name="org.egee.test3.wms" unless="uptodate">
		<cvs command="checkout"
        	package="org.egee.test3.wms"
        	dest="${workspace.dir}"
        	tag="${org.egee.test3.wms.version}" />
		<fail>The org.egee.test3.wms module has been updated, please rerun the configuration file</fail>
	</target>

	<!-- Load master dependencies file -->
	<property file="${workspace.dir}/org.egee/project/dependencies.properties" />
	
	<!-- *****************************************************-->
	<!-- Environmental checks                                 -->
	<!-- *****************************************************-->
	
	<!-- All environmental checks -->
	<target name="envchecks" depends="oscheck,javacheck,antcheck,gcccheck" />

	<target name="oscheck">
		<!-- Operating system -->
		<condition property="isWindows">
			<os family="windows"/>
		</condition>
		<condition property="isUnix">
			<os family="unix"/>
		</condition>
		<echo>Operating system:		${os.name}</echo>
	</target>
			
	<target name="javacheck">
		<!-- Java version -->
		<condition property="isJavaOk">
			<contains string="${java.version}" substring="${egee.java.version}"/>
		</condition>
		<echo>Java version:		${java.version}</echo>
		<fail unless="isJavaOk">Java JRE version must be ${egee.java.version}_XX</fail>
		<echo>JAVA_HOME:			${env.JAVA_HOME}</echo>
	</target>
			
	<target name="antcheck">
		<!--  Ant -->
		<condition property="isAntOk">
			<contains string="${ant.version}" substring="${egee.ant.version}"/>
		</condition>
		<echo>Ant version:		${ant.version}</echo>
		<fail unless="isAntOk">Ant version must be ${egee.ant.version}</fail>
		<echo>ANT_HOME:			${env.ANT_HOME}</echo>
	</target>
		
	<target name="gcccheck" if="isUnix">
		<!-- Gcc compiler version -->
		<exec executable="gcc" outputproperty="detected.gcc.version">
			<arg line="-dumpversion" />
		</exec>
		<condition property="isGccOk">
			<equals arg1="${detected.gcc.version}" arg2="${egee.gcc.version}"/>
		</condition>
		<echo>Gcc version:		${detected.gcc.version}</echo>
		<fail unless="isGccOk">Gcc version must be ${egee.gcc.version}</fail>
		<exec executable="which" outputproperty="detected.gcc.path">
			<arg line="gcc" />
		</exec>
		<echo>gcc path:			${detected.gcc.path}</echo>
	</target>
	
	<!-- *****************************************************-->
	<!-- Development tools                                    -->
	<!-- *****************************************************-->
	
	<!-- All development tools -->
 	<target name="devtools" depends="junitcheck,
					 				 junit,
 									 checkstyle,
 									 jalopy,
 									 cpptasks"/>		

	<!-- Check if junit is already installed -->
	<target name="junitcheck">
		<available classname="junit.runner.Version" property="is.junit.present"/>
	</target>

	<!--  JUnit -->
 	<target name="junit" unless="is.junit.present"
 			description="Install junit.">		
		<mkdir dir="${repository}/${ext.junit.subpath}" />
		<get src="${ext.junit.rep-url}"
			 dest="${repository}/${ext.junit.subpath}/${ext.junit.rep-file}"
			 verbose="on"
			 usetimestamp="true" />

		<!-- Copy junit jar to Ant lib directory, needed to run JUnit task -->
		<copy file="${repository}/${ext.junit.subpath}/${ext.junit.rep-file}"
			tofile="${env.ANT_HOME}/lib/{ext.junit.rep-file}"/>
	</target>

	<!--  CheckStyle -->
 	<target name="checkstyle"
 			description="Check of checkstyle installation.">		
		<mkdir dir="${repository}/${ext.checkstyle.subpath}" />
		<get src="${ext.checkstyle.rep-url}"
			 dest="${repository}/${ext.checkstyle.subpath}/${ext.checkstyle.rep-file}"
			 verbose="on"
			 usetimestamp="true" />
	</target>
	
	<!--  Jalopy -->
 	<target name="jalopy"		
 			description="Install jalopy.">		
		<mkdir dir="${repository}/${ext.jalopy.subpath}" />
		<get src="${ext.jalopy.rep-url}"
			 dest="${repository}/${ext.jalopy.subpath}/${ext.jalopy.rep-file}"
			 verbose="on"
			 usetimestamp="true" />
		<!-- check if uptodate unpacked -->
		<uptodate property="jalopy.old" targetfile="${repository}/${ext.jalopy.subpath}/${ext.jalopy.rep-file}">
			<srcfiles dir="${repository}/${ext.jalopy.subpath}" includes="**/*" />
		</uptodate>
		<antcall target="jalopy-expand" />
	</target>
	
 	<target name="jalopy-expand" if="jalopy.old"		
 	 			description="Untar jalopy tarball.">		
		<untar compression="gzip" src="${repository}/${ext.jalopy.subpath}/${ext.jalopy.rep-file}"
			dest="${repository}/${ext.jalopy.subpath}" />
		<touch>
			<fileset dir="${repository}/${ext.jalopy.subpath}">
				<exclude name="${ext.jalopy.rep-file}" />
			</fileset>
		</touch>
	</target>
	
	<!--  CPPTasks -->
 	<target name="cpptasks"
 			description="Install cpptasks.">		
		<mkdir dir="${repository}/${ext.cpptasks.subpath}" />
		<get src="${ext.cpptasks.rep-url}"
			 dest="${repository}/${ext.cpptasks.subpath}/${ext.cpptasks.rep-file}"
			 verbose="on"
			 usetimestamp="true" />
	</target>
	
	<!-- =====================================================
		 External libraries
		 ===================================================== -->
	
	<!--  All external libraries -->
 	<target name="external" depends="log4j"/>
 	
	<!-- =====================================================
		 EGEE Middleware modules
		 ===================================================== -->
	
	<!-- All project modules -->
 	<target name="project" depends="thirdparty-globus_ssl_utils,
 								    thirdparty-bypass,
 								    thirdparty-globus_gridftp_server,
 								    thirdparty-loki,
 								    common,
 								    jcommon"/>

	<!-- Globus SSLUtils -->
 	<target name="thirdparty-globus_ssl_utils">		
		<cvs command="checkout"
			package="org.egee.test3.wms.thirdparty-globus_ssl_utils"
			dest="${workspace.abs.dir}"
			tag="${org.egee.test3.wms.thirdparty-globus_ssl_utils.version}"/>
	</target>
	
	<!-- ByPass -->
 	<target name="thirdparty-bypass">		
		<cvs command="checkout"
			package="org.egee.test3.wms.thirdparty-bypass"
			dest="${workspace.abs.dir}"
			tag="${org.egee.test3.wms.thirdparty-bypass.version}"/>
	</target>
	
	<!-- Globus GridFTP Server -->
 	<target name="thirdparty-globus_gridftp_server" depends="globus">		
		<cvs command="checkout"
			package="org.egee.test3.wms.thirdparty-globus_gridftp_server"
			dest="${workspace.abs.dir}"
			tag="${org.egee.test3.wms.thirdparty-globus_gridftp_server.version}"/>
	</target>
	
	<!-- Loki -->
 	<target name="thirdparty-loki">		
		<cvs command="checkout"
			package="org.egee.test3.wms.thirdparty-loki"
			dest="${workspace.abs.dir}"
			tag="${org.egee.test3.wms.thirdparty-loki.version}"/>
	</target>
	
	<!-- Common -->
 	<target name="common" depends="boost,classads,globus">		
		<cvs command="checkout"
			package="org.egee.test3.wms.common"
			dest="${workspace.abs.dir}"
			tag="${org.egee.test3.wms.common.version}"/>
	</target>
	
	<!-- JCommon -->
 	<target name="jcommon" depends="jclassads">		
		<cvs command="checkout"
			package="org.egee.test3.wms.jcommon"
			dest="${workspace.abs.dir}"
			tag="${org.egee.test3.wms.jcommon.version}"/>
	</target>
	
	<!-- ====================================================
		 Checkout all
		 ==================================================== -->
	
	<!-- All libraries -->
 	<target name="all" depends="org.egee, org.egee.test3.wms, envchecks, devtools, external, project" />		

	<!-- ====================================================
		 Print dependecies to console
		 ==================================================== -->
	
 	<target name="dependencies">
 		<concat>
 			<fileset dir="." includes="dependencies.properties" />
 		</concat>
 	</target>		

</project>
