#!/bin/bash

##############################################################################
# Copyright (c) Members of the EGEE Collaboration. 2004.
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS
# OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################
#
# AUTHORS: Alejandro Álvarez Ayllón, CERN
#
##############################################################################
#
# Returned values:
#
# Exit  0: Test Passed
# Exit  1: Test Failed
# Exit  2: Wrong Input
#
##############################################################################

source FTS-common

# Script for testing FTS channel signals

showUsage ()
{
 echo ""
 echo "Usage: FTS-channel-signal --fts <fts hostname > --channel <channel name>             "
 echo "Options: "
 echo "  obligatory: "
 echo "          --fts  <fts hostname> "
 echo "                   The name of the FTS host"
 echo "          --channel  <channel name> "
 echo "                   The channel to use for submitting a file transfer"
 echo "  optional: "
 echo "          --bdii  <bdii hostname> "
 echo "                   The name of the top level BDII. The default is lcg-bdii.cern.ch"
 echo "          --timeout <time>"
 echo "                   Timeout for waiting the job to finish. Default is 100 sec"	
 echo "          --vo <vo_name>"
 echo "                   Name of VO to use. Default is dteam"
}

if [ -z "$1" ]; then
  showUsage
  echo "-TEST FAILED-"
  exit 2
fi

until [ -z "$1" ] 
do
  case "$1" in

     --bdii)
           if [ -z "$2" ]; then
                shift 1
           else
                BDII_HOST=$2
                shift 2
           fi
     ;;
 
     --fts)
           if [ -z "$2" ]; then
                shift 1
           else
                FTS_HOST=$2
                shift 2
           fi
     ;;
      --vo)
           if [ -z "$2" ]; then
                shift 1
           else
                VO_NAME=$2
                shift 2
           fi
     ;;

    --timeout)
           if [ -z "$2" ]; then
                shift 1
           else
                TIMEOUT=$2
                shift 2
           fi
     ;;

     --channel)
        if [ -z "$2" ]; then
          shift 1
        else
          CHANNEL=$2
          shift 2
        fi
    ;;

          *)
           showUsage
           exit 2
    ;;
  esac
done

if [ -z "$CHANNEL" ]; then
  echo "You must specify a channel"
  echo "-TEST FAILED-"
  exit 2
fi

if [ -z "$BDII_HOST" ]; then
   BDII_HOST=lcg-bdii.cern.ch
fi

if [ -z "$VO_NAME" ]; then
   VO_NAME=dteam
fi

if [ -z "$Timeout" ]; then
   Timeout=100
fi

BDII_PORT=2170

#0.1) Check for valid proxy
ProxyExist=`voms-proxy-info 2>/dev/null | grep timeleft | wc -l`
ProxyExpired=`voms-proxy-info 2>/dev/null | grep  "timeleft  : 0:00:00" | wc -l`

if [ $ProxyExist -gt 0 -a $ProxyExpired -eq 0 ]; then
         echo ""
         echo "Using proxy from: $X509_USER_PROXY"
else
         echo ""
         echo ">>> NOTE: Valid proxy is needed for this test!"
         echo ""
         if [ $ProxyExpired -gt 0 ]; then
            echo ">>> NOTE: Proxy credential expired!"
         fi
         echo "-TEST FAILED-"
         exit 1
fi

#1) Test if channel exists

#Get Channels list
echo
echo "Retrieving channels list..."
get_channels
if [ "x$Channel_List" == "x" ]; then
  echo "No channels retrieved"
  exit 1
fi

found=0
for Channel in $Channel_List
do
  if [ "$Channel" == "$CHANNEL" ];then 
    echo "Channel exists"
    found=1
    break
  fi
done

if [ $found -eq 0 ];then
  echo "Channel $CHANNEL does not exist"
  echo "-TEST FAILED-"
  exit 1
fi

#2) Check that the channel is active
echo
echo "Checking that $CHANNEL is active..."
is_channel_active $CHANNEL
if [ $? -eq 0 ];then
  echo "Channel $CHANNEL is Active"
else
  echo "Channel $CHANNEL is not Active"
  echo "-TEST FAILED-"
  exit 1
fi

#2.a) Check that the current user is admin of the channel
glite-transfer-channel-listmanagers -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/ChannelManagement $CHANNEL &> /dev/null

if [ ! $? -eq 0 ]; then
  echo "The current proxy identity is not a manager of the channel $CHANNEL in $FTS_HOST"
  echo "-TEST FAILED-"
  exit 1
else
  echo "The current proxy identity is a manager of the channel $CHANNEL in $FTS_HOST"
fi

#2.b) Check that the current user is admin of the VO
glite-transfer-listvomanagers  -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer $VO_NAME &> /dev/null

if [ ! $? -eq 0 ]; then
  echo "The current proxy identity is not a manager of the VO $VO_NAME in $FTS_HOST"
  echo "-TEST FAILED-"
  exit 1
else
  echo "The current proxy identity is a manager of the VO $VO_NAME in $FTS_HOST"
fi

#3) Retrieve SEs from source and destination site
echo
echo "Retrieving SEs info from source and destination sites in $CHANNEL..."

#3.a) Retrieve source and destination sites
get_source_dest_from_channel $CHANNEL
if [ $? -eq 1 ];then
  echo "Failing retrieving source and destination sites"
  echo "-TEST FAILED-"
  exit 1
fi

echo "Source: $Source_Site"
echo "Dest: $Destin_Site"

#3.b) Retrieve good SEs from source and destination sites
#get_good_se_from_site $Source_Site
get_def_se_from_site $Source_Site
if [ $? -eq 1 ];then
  echo "Failing retrieving good SE from site $Source_Site"
  exit 1
fi
if [ "x$SE_HOST" != "x" ]; then
  SE_SOURCE=$SE_HOST
  echo "SE_source: $SE_SOURCE"
else
  echo "Failing retrieving good SE from site $Source_Site"
  echo "-TEST FAILED-"
  exit 1
fi

#get_good_se_from_site $Destin_Site
get_def_se_from_site $Destin_Site
if [ $? -eq 1 ];then
  echo "Failing retrieving default SE from site $Destin_Site"
  echo "-TEST FAILED-"
  exit 1
fi
if [ "x$SE_HOST" != "x" ]; then
  SE_DEST=$SE_HOST
  echo "SE_dest: $SE_DEST"
else
  echo "Failing retrieving default SE from site $Source_Site"
  echo "-TEST FAILED-"
  exit 1
fi

#3.c) Retrieve SEs path to use for file transfer
echo "Retrieve SEs path to use for file transfer, $SE_SOURCE"
get_se_path $SE_SOURCE
if [ $? -eq 1 ];then
  echo "Failing retrieving SAPATH from SE $SE_SOURCE"
  echo "-TEST FAILED-"
  exit 1
fi
if [ "x$SE_SRM_LOC" != "x" ]; then
  SOURCE_SAPATH=$SE_SRM_LOC
  echo "SAPATH_source: $SOURCE_SAPATH"
else
  echo "Failing retrieving SAPATH from SE $SE_SOURCE"
  echo "-TEST FAILED-"
  exit 1
fi


get_se_path $SE_DEST
if [ $? -eq 1 ];then
  echo "Failing retrieving SAPATH from SE $SE_DEST"
  echo "-TEST FAILED-"
  exit 1
fi
if [ "x$SE_SRM_LOC" != "x" ]; then
  DEST_SAPATH=$SE_SRM_LOC
  echo "SAPATH_destination: $DEST_SAPATH"
else
  echo "Failing retrieving SAPATH from SE $SE_SOURCE"
  echo "-TEST FAILED-"
  exit 1
fi

#4) Submitting a file transfer
echo
echo "Submitting a file transfer job..."
DEST_SAPATH=srm://lxbra1111.cern.ch/dpm/cern.ch/home/dteam
file_transfer $SOURCE_SAPATH $DEST_SAPATH

if [ $? -eq 1 ];then
  echo "file_transfer function failed"
  echo "-TEST FAILED-"
  exit 1
fi

#5) Change the state
get_status_result $SUBID
channel-signal $SUBID Pending

if [ ! $? -eq 0 ]; then
  echo "channel-signal function failed"
  echo "-TEST FAILED-"
  exit 1
fi

echo "-TEST PASSED-"
exit 0
 
#### Erroneous workflow

# Wrong arguments
# Should return a proper error message and a non zero exit code.


# Specifying a non existing service
# Should return a proper error message and a non zero exit code.


# Specifying a non existing channel 
# CLI should return a proper error message and a non zero exit code.


# Specifying a non existing job id
# Should return a proper error message and a non zero exit code.


# Using the CLI from a non admin account
# Should return a proper error message and a non zero exit code


