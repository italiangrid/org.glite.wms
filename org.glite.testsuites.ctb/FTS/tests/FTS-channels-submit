#!/bin/bash

###################################
# Script for testing FTS channels #
########################################################
# 							                            #	
# Returned values:					                    #
#							                            #
#                 Exit  0: Test Passed			        #
#		          Exit  1: Test Failed			        #
#                 Exit  2: Wrong Input  		        #
#							                            #
#########################################################

showUsage ()
{
 echo "                                                                                                     "
 echo "Usage: FTS-channels --site <site name> --pass <myproxy password> [--bdii <bdii hostname> --fts <fts hostname > --timeout <time> --vo <vo_name>]            "
 echo "Options: "
 echo "  obligatory: "
 echo "          --site  <site name>"
 echo "                   The name of the site as it stored in the GOC DB and information system."
 echo "          --pass  <myproxy password>"
 echo "                   MyProxy password."
 echo "  optional: "
 echo "          --bdii  <bdii hostname> "
 echo "                   The name of the top level BDII. The default is lcg-bdii.cern.ch"
 echo "          --fts  <fts hostname> "
 echo "                   The name of the top level BDII. The default is the one found in the BDII "
 echo "          --timeout <time>"
 echo "                   Timeout for waiting the job to finish. Default is 100 sec. "	
 echo "          --vo <vo_name>"
 echo "                   Name of VO to use. Default is dteam. "
}

if [ -z "$1" ]; then
  showUsage
  exit 2
fi

until [ -z "$1" ] 
do
  case "$1" in

     --site)
           if [ -z "$2" ]; then
		shift 1
           else
		SITE_NAME=$2
                shift 2
           fi
     ;;

     --pass)
           if [ -z "$2" ]; then
                shift 1
           else
                MYPROXY_PASS=$2
                shift 2
           fi
     ;;

     --bdii)
           if [ -z "$2" ]; then
                shift 1
           else
                BDII_HOST=$2
                shift 2
           fi
     ;;
 
     --fts)
           if [ -z "$2" ]; then
                shift 1
           else
                FTS_HOSTNAME=$2
                shift 2
           fi
     ;;
      --vo)
           if [ -z "$2" ]; then
                shift 1
           else
                VO_NAME=$2
                shift 2
           fi
     ;;

    --timeout)
           if [ -z "$2" ]; then
                shift 1
           else
                Timeout=$2
                shift 2
           fi
     ;;

          *)
           showUsage
           exit 2
    ;;
  esac
done

if [ -z "$SITE_NAME" ]; then
   echo ""
   echo ">>> NOTE: Site name is not specified. Option --site <site hostname> is obligatory! <<<"
   showUsage
   exit 2
fi

if [ -z "$MYPROXY_PASS" ]; then
   echo ""
   echo ">>> NOTE: My Proxy password is not specified. Option --pass <myproxy password> is obligatory! <<<"
   showUsage
   exit 2
fi


if [ -z "$BDII_HOST" ]; then
   BDII_HOST=lcg-bdii.cern.ch
fi

if [ -z "$VO_NAME" ]; then
   VO_NAME=dteam
fi

if [ -z "$Timeout" ]; then
   Timeout=100
fi

######################################################################
# >>>> NOTE:  Hardcoded port for top level BDII !!! <<<<
######################################################################

BDII_PORT=2170

###################
# Global varables
###################

# Global variable, store all Jobs ID

JobIDs=""

# Global variable, store all Failed Jobs ID

FailedJobs=""
 
# Global variable, counts all successfully submitted jobs

NumberOfSuccSubJob=0

# Global variable, counts all successfully finished jobs

NumberOfSuccFinJob=0

################################
# Checks if there is valid proxy
################################

ProxyExist=`voms-proxy-info 2>/dev/null | grep timeleft | wc -l`

ProxyExpired=`voms-proxy-info 2>/dev/null | grep  "timeleft  : 0:00:00" | wc -l`

if [ $ProxyExist -gt 0 -a $ProxyExpired -eq 0 ]; then
         echo ""  
         echo "Using proxy from: $X509_USER_PROXY"  
else
         echo ""
	 echo ">>> NOTE: Valid proxy is needed for this test!"
         echo ""
         if [ $ProxyExpired -gt 0 ]; then
            echo ">>> NOTE: Proxy credential expired!"
         fi 
         echo "-TEST FAILED-"
         echo ""
         exit 1
fi

#####################
# Exporting variables
#####################

echo ""
echo "Exporting variables..."

export LCG_GFAL_INFOSYS=$BDII_HOST:$BDII_PORT
export GLITE_SD_PLUGIN=bdii

##############################################################################
# Getting Tomcart Port and FTS Server hostname from top level BDII: $BDII_HOST
##############################################################################

unset GLITE_SD_SITE
unset GLITE_SD_VO

FTS_URL=`glite-sd-query -s $SITE_NAME -t org.glite.FileTransfer 2>/dev/null | grep Endpoint | sed -e 's/Endpoint://g'`
FTS_URL=`echo $FTS_URL | awk '{print $1}' | sed -e 's/https:\/\///g' | sed 's/\// /g' | awk '{print $1}' | sed -e 's/:/ /g'`
FTS_HOST=`echo $FTS_URL | awk '{print $1}'`


if [ -z "$FTS_HOST" ]; then
   echo ""
   echo ">>> NOTE: There is no information for FTS Server of the site: $SITE_NAME on  BDII: $BDII_HOST! <<< "
   echo "" 
   echo "-TEST FAILED-" 
   exit 1
fi 

########################
# Define functions
########################

function file_transfer()
{
	echo "Starting transfer..." 
    echo "" 
    SE1_SRM_LOC=$1
    SE2_SRM_LOC=$2
    MYPROXY_PASS=$3
    SUB_FILE_LOC="$HOME/fts-submission-file"
	RESULT_FILE="$HOME/fts-test-results"
	
    TransferN=1
	
	DATE=`date | awk '{print $2"_"$3"_"$4}' | sed -e 's/://g'`
 	TMP_FILE="/tmp/FTS_Test_$DATE"
	TEST_FILE_NAME="FTS_Test_$DATE"

	echo "" 
	echo "Creating 10MB temporary test file for transfer" 

	echo "" > $TMP_FILE

	dd if=/dev/zero of=$TMP_FILE bs=10MB count=1 2>/dev/null
	
	echo "" 
	echo "Using the 10MB temporary test file: $TMP_FILE" 
	echo "" 
	echo "Copy the test file $TMP_FILE on: $SE1_SRM_LOC" 
        echo "" 

	GUID=`lcg-cr --vo $VO_NAME -d $SE1_SRM_LOC/$TEST_FILE_NAME file://$TMP_FILE 2>message`
	

	result=`cat message | wc -l` 
	
    if [ $result -gt 0 ]; then
      echo ">>> NOTE: `cat message`"
	  echo ""
      echo ">>> NOTE: lcg-cr command for SRM: $SE1_SRM_LOC failed!"
      echo ""
      NumberOfSuccFinJob=`expr $NumberOfSuccFinJob - 1`
      return 
    fi

	echo "" 
	echo "Removing the 10MB temporary test file: $TMP_FILE"

	rm -rf $TMP_FILE

	echo ""
	echo "Creating the submission file in $SUB_FILE_LOC"
	
	i=0	
	
    echo ""
	
    echo "" > $SUB_FILE_LOC		

    while test $i -lt $TransferN
    do
	echo "$SE1_SRM_LOC/$TEST_FILE_NAME $SE2_SRM_LOC/$TEST_FILE_NAME$i" >> $SUB_FILE_LOC
	i=`expr $i + 1`
    done
		
    echo "" 
	echo "Submitting the transfer"  

#    SubID=`glite-transfer-submit  -p $MYPROXY_PASS -f $SUB_FILE_LOC`
    SubID=`glite-transfer-submit -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer -f $SUB_FILE_LOC`
	
	if [ -z "$SubID" ]; then
       echo ""
       echo ">>> NOTE: Job submition failed! <<<"
       echo ""
	   return 
    fi
        
    NumberOfSuccSubJob=`expr $NumberOfSuccSubJob + 1`
        
    echo ""
    echo "Job successfully submited"
    echo ""

	echo "" 
	echo "Transfer ID: $SubID. " 

    JobIDs=`echo $JobIDs $SubID`
    echo "" 

}

function get_status_result()
{

    export GLITE_SD_SITE=$SITE_NAME
    export LCG_CATALOG_TYPE='lfc'

    SubID=$1

    echo "" 
    echo "Checking status for job ID: $SubID" 
    echo "" 
	
    previous_status="None"
	
    t=0

	while test $t -lt $Timeout
	do
	 status=`glite-transfer-status -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer $SubID 2>message`

         result=`cat message | wc -l`

         if [ $result -gt 0 ]; then
            echo ">>> NOTE: `cat message`"
            echo ""
            return 
         fi


	 if test $status == $previous_status
	 then
	    echo "Waiting for status changes...." 
	 else
		echo "Status is: $status"  
		previous_status=$status	
	 fi

	 if test $status == "Finished"  
	  then
        echo "" 
        echo "Job is successfully finished." 
        NumberOfSuccFinJob=`expr $NumberOfSuccFinJob + 1` 
        echo "" 
        return
	  fi

      if test $status == "Failed"
      then
	    echo "" 
        echo "Job is failed!" 
        echo "" 

        glite-transfer-status -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer -l -v $SubID 

        FailedJobs=`echo $FailedJobs $SubID`
        return 
      fi

      if test $status == "Hold"
      then
        echo ""
        echo "Job is holded!"
        echo ""

        glite-transfer-status -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer -l -v $SubID

        FailedJobs=`echo $FailedJobs $SubID`
        return
      fi


	 echo "Waiting for status changes...." 
	 sleep 10 
        
     t=`expr $t + 10`
      
	done
        
    if [ $t -eq $Timeout ]; then
        echo ""
	    echo ">>> NOTE: Exceded timeout of $Timeout seconds"
        echo ""
        FailedJobs=`echo $FailedJobs $SubID`
    fi 
}

if [ -n "$FTS_HOSTNAME" ]; then
   if [ $FTS_HOST != $FTS_HOSTNAME ]; then
      echo ">>> NOTE: The FTS host found in the BDII ($FTS_HOST) does not correspond to the one provided"
      FTS_HOST=$FTS_HOSTNAME
   fi
fi

echo "" 
echo "Using FTS Server: $FTS_HOST" 
echo "" 
echo "Using Site Name: $SITE_NAME"
echo "" 
echo "Using BDII: $BDII_HOST" 
echo "" 
echo "Testing channels......"
echo ""


#########################################
# Simple FTS transfer test
#########################################


export GLITE_SD_SITE=$SITE_NAME
export LCG_CATALOG_TYPE='lfc'

Channel_List=`glite-transfer-channel-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/ChannelManagement 2>message`

result=`cat message|wc -l`
if [ $result -gt 0 ]; then
     echo ""
     echo ">>> NOTE:  `cat message`."
     echo "-TEST FAILED-"
     echo ""
     exit 1
fi

for Channel_Name in $Channel_List
do
  export GLITE_SD_SITE=$SITE_NAME
  export LCG_CATALOG_TYPE='lfc'
  
  glite-transfer-channel-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/ChannelManagement $Channel_Name 1>/dev/null 2>message
  
  result=`cat message|wc -l`
  if [ $result -gt 0 ]; then 
     echo ""
     echo ">>> NOTE:  Channel information is needed!"
     echo ">>> NOTE:  `cat message`."
     echo ">>> NOTE: `glite-transfer-channel-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/ChannelManagement -v | grep \"Service features:\" | sed -e 's/#//g'`"
     echo "-TEST FAILED-"
     echo ""
     exit 1
  fi
 
   echo "Channel name: $Channel_Name" 
   echo "Testing channel...." 
   echo "INFO:" 

   
   isChannelActive=`glite-transfer-channel-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/ChannelManagement $Channel_Name | grep "State: Active" |wc -l`

   if [ $isChannelActive -eq 0 ];then 
      echo "The channel: $Channel_Name is not Active! " 
      echo "Skipping...." 
      echo "" 
      continue
   fi

   Channel_Between=`glite-transfer-channel-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/ChannelManagement $Channel_Name | grep Between | sed -e 's/*/star/g' | sed -e 's/Between://g' | sed -e 's/and//g'`


   unset GLITE_SD_SITE
   unset LCG_CATALOG_TYPE
   
   Source_Site=`echo $Channel_Between |  awk '{print $1}' |  tr 'A-Z' 'a-z'`
   Destin_Site=`echo $Channel_Between |  awk '{print $2}' |  tr 'A-Z' 'a-z'`

   echo "Source Site: $Source_Site" 
   echo "Destination Site: $Destin_Site" 
   echo "" 

   ##############################################################################################################
   # Looking for STAR channels (Only channels STAR-SITE will be tested! The other STAR channels will be skipped.)
   ##############################################################################################################

   if [ "$Source_Site" = "star" ];then
     SRM_Source=1
   else
     SRM_Source=`glite-sd-query -s $Source_Site -t SRM 2>/dev/null | wc -l`
   fi

   if [ "$Destin_Site" = "star" ];then
     echo "Destination Site: *   " 
     echo "Skipping the channel!" 
     echo "" 
     continue
   fi

   SRM_Destin=`glite-sd-query -s $Destin_Site -t SRM 2>/dev/null | wc -l`

   if [ $SRM_Source -eq 0 ]; then
        echo "" 
        echo ">>>NOTE: The source site: $Source_Site is not found on $BDII_HOST or no SRM found!" 
        echo "" 
        continue
   fi

   if [ $SRM_Destin -eq 0 ]; then
        echo "" 
        echo ">>>NOTE: The destination site $Destin_Site is not found on $BDII_HOST or no SRM found!" 
        echo "" 
        continue
   fi 


   Destin_Site_SEs=`glite-sd-query -s $Destin_Site -t SRM 2>/dev/null  | grep Name | sed -e 's/Name: httpg:\/\///g' | sed -e 's/:/ /g' | awk '{print $1}'`

   ##################################################################################################
   # Looking for good SE. Good SE is that one which do not give error when trying to copy file on it. 
   ##################################################################################################
   
   goodSE=0

   for Destin_SE in $Destin_Site_SEs
   do
        
      lcg-ls srm://$Destin_SE/ 2>message 1>/dev/null
      echo "lcg-ls srm://$Destin_SE/ 2>message 1>/dev/null" 
      
      result=`cat message | wc -l`

      if [ $result -gt 0 ];then
         continue
      else
         goodSE=1
         SE2_HOST=$Destin_SE
         break
      fi 
   done
   
   if [ $goodSE -eq 0 ]; then
      echo ">>> NOTE: No good SRM found on site: $Destin_Site"
      echo ">>> NOTE: The channel can not be tested!"
      echo ""
      continue
   fi
   
      SE2_VOPATH=`ldapsearch -x -h $BDII_HOST -p 2170 -b "mds-vo-name=local,o=grid" -LLL "(&(GlueSALocalID:dn:=$VO_NAME)(GlueSEUniqueID:dn:=$SE2_HOST))" GlueSAPath  | grep "GlueSAPath: " | sed -e 's/GlueSAPath: //'`

   SE2_SRM_LOC="srm://$SE2_HOST$SE2_VOPATH"

   ################################################
   # If the channel is star-SITE 
   ################################################

   if [ "$Source_Site" = "star" ];then
   
      ###############################################
      # Finding all available SRM from top level BDII
      ###############################################

      SRMs=`glite-sd-query -t SRM  2>/dev/null | grep Name | sed -e 's/Name: httpg:\/\///g' | sed -e 's/:/ /g' | awk '{print $1}'`
      SRMs=`echo $SRMs | sed -e 's/\n//g'`
       
      ######################################################################
      # Removing this SRM from founded one which belong to Destination Site
      ######################################################################

      for Destin_SE_Item in $Destin_Site_SEs 
      do
        SRMs=`echo $SRMs | sed -e "s/$Destin_SE_Item//g"`
      done

      ##########################################################################################
      # For all SRM searching an appropriate one. 
      # Appropiate SRM for STAR channel is this one for which there is no other channel defined.
      ########################################################################################### 

      for SRMItem in $SRMs
      do
        echo " Searching for appropriate SRM ...." 
        echo "" 
        echo " Trying with: $SRMItem" 
        echo "" 
       
        goodSE=0

        glite-gridftp-ls gsiftp://$SRMItem/ 2>message 1>/dev/null

        result=`cat message | wc -l`

        if [ $result -gt 0 ];then
           continue
        fi
        

        SRMItem_Site_Source=`glite-sd-query --host $SRMItem -x 2>/dev/null | grep Site | sed -e 's/Site: //g'`

        SRMItem_Site_Source=`echo $SRMItem_Site_Source | awk '{print $1}' | tr 'A-Z' 'a-z'`

        echo " Site name of the chosen SRM: $SRMItem_Site_Source" 
        echo " Searching if there is already defined channel between $SRMItem_Site_Source and $Destin_Site." 
        echo "" 
 
        isChannelExist=0
       
        for channel in $Channel_List
        do
          export GLITE_SD_SITE=$SITE_NAME
          export LCG_CATALOG_TYPE='lfc'

	  Sites=`glite-transfer-channel-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/ChannelManagement $channel 2>/dev/null | grep Between | sed -e 's/*/star/g' | sed -e 's/Between://g' | sed -e 's/and//g'`

         echo " Checking if there is channel between $SRMItem_Site_Source and $Destin_Site...." 
         echo " Checking for channel: $channel" 
         echo "" 
       
         unset GLITE_SD_SITE
         unset LCG_CATALOG_TYPE

         Channel_Source_Site=`echo $Sites |  awk '{print $1}' | tr 'A-Z' 'a-z'`
 
         Channel_Destin_Site=`echo $Sites |  awk '{print $2}' | tr 'A-Z' 'a-z'` 
           
	 if [ $Channel_Destin_Site = "star" -o $Channel_Source_Site = "star" ]; then
                 echo " [ SKIPPED ]" 
                 echo "" 
                 continue
         else
                    
   	    if [ $Channel_Destin_Site = $Destin_Site -a $Channel_Source_Site = $SRMItem_Site_Source ]; then
                echo " [ NO ] "
                echo " "
                echo "  The channel $channel is between $SRMItem_Site_Source and $Destin_Site" 
                echo "  This $SRMItem is unapropriate one." 
                echo " " 
                isChannelExist=1
                break
            else
                echo " [ OK ]" 
                echo " " 
                continue
            fi
        fi
        done
        if [ $isChannelExist -eq 1 ]; then
           SE1_HOST=""
           continue
        else
           SE1_HOST=$SRMItem
           break
        fi
     done 

    if [ -z $SE1_HOST ]; then
        echo "" 
        echo ">>> NOTE: No good SRM found on site: $Destin_Site"
        echo ">>> NOTE: The channel can not be tested!"
        echo ""
        continue
    fi


      SE1_VOPATH=`ldapsearch -x -h $BDII_HOST -p 2170 -b "mds-vo-name=local,o=grid" -LLL "(&(GlueSALocalID:dn:=$VO_NAME)(GlueSEUniqueID:dn:=$SE1_HOST))" GlueSAPath  | grep "GlueSAPath: " | sed -e 's/GlueSAPath: //'`

      SE1_SRM_LOC="srm://$SE1_HOST$SE1_VOPATH"
   
   else
    
      Source_Site_SEs=`glite-sd-query -s $Source_Site -t SRM  | grep Name | sed -e 's/Name: httpg:\/\///g' | sed -e 's/:/ /g' | awk '{print $1}' | tr 'A-Z' 'a-z'`

    goodSE=0

    for Source_SE in $Source_Site_SEs
    do

      lcg-ls srm://$Source_SE/ 2>message 1>/dev/null

      result=`cat message | wc -l`

      if [ $result -gt 0 ];then
         continue
      else
         goodSE=1
         SE1_HOST=$Source_SE
         break
      fi
   done

   if [ $goodSE -eq 0 ]; then
      echo ">>> NOTE: No good SRM found on site: $Source_Site"
      echo ">>> NOTE: The channel can not be tested!"
      echo ""
      continue
   fi


      SE1_VOPATH=`ldapsearch -x -h $BDII_HOST -p 2170 -b "mds-vo-name=local,o=grid" -LLL "(&(GlueSALocalID:dn:=$VO_NAME)(GlueSEUniqueID:dn:=$SE1_HOST))" GlueSAPath  | grep "GlueSAPath: " | sed -e 's/GlueSAPath: //'`

      SE1_SRM_LOC="srm://$SE1_HOST$SE1_VOPATH"

   fi

   echo "SE1 SRM Location: $SE1_SRM_LOC" 
   echo "SE2 SRM Location: $SE2_SRM_LOC" 
   echo "" 
   
   export GLITE_SD_SITE=$SITE_NAME
   export LCG_CATALOG_TYPE='lfc'

   file_transfer $SE1_SRM_LOC $SE2_SRM_LOC $MYPROXY_PASS

done

echo "Checking job status......"
echo ""

for i in $JobIDs 
do
  get_status_result $i  
done

echo "Number of successfully submitted jobs: $NumberOfSuccSubJob "
echo ""
echo "Number of successfully finished jobs: $NumberOfSuccFinJob "
echo ""


export GLITE_SD_SITE=$SITE_NAME
export LCG_CATALOG_TYPE='lfc'


if [ $NumberOfSuccSubJob -eq $NumberOfSuccFinJob ]; then
  echo "FTS Test: Passed."
  echo ""
  exit 0
else
  echo ""
  echo "FTS Test: Failed."
  echo ""
  for job in $FailedJobs
  do
    echo ""
    glite-transfer-status -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer -l -v $job
    echo ""
  done
  echo ""
  echo "FTS Test: Failed."
  echo "-TEST FAILED-"
  echo ""
  exit 1
fi



