#!/bin/bash

##############################################################################
# Copyright (c) Members of the EGEE Collaboration. 2004.
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS
# OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################
#
# AUTHORS: Gianni Victor Galaktionov, CERN
#
##############################################################################

#
# Cancel transfer job.
# FTS_HOST must be set.
# The job Id is stored in SUBID
#
# Added by Victor Galaktionov 18/11/209
function transfer_job_cancel()
{
    echo "transfer_job_cancel()"
    
    echo "1. Check without SUBID"
    echo "glite-transfer-cancel -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer"
    glite-transfer-cancel -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer 2>message
    if [ $? == 0 ]; then
      echo ">>> NOTE: `cat message`"
      echo ">>> NOTE:  glite-transfer-cancel command  failed!"
      return 1
    fi
     
    grep "No request ID specified" message > /dev/null
    if [ $? !=  0 ]; then
      echo ">>> NOTE: `cat message`"
      echo ">>> NOTE:  glite-transfer-cancel command  failed!"
      return 1
    fi
    echo "OK"
    
    echo "2. Check real cancel command" 
    echo "glite-transfer-cancel --verbose -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer $SUBID"
    glite-transfer-cancel --verbose -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer $SUBID 2>message 
 
    if [ $? -gt 0 ]; then
      echo ">>> NOTE: `cat message`"
      echo ">>> NOTE:  glite-transfer-cancel command  failed!"
      return 1
    fi
    return 0
}

#
# Special tests for glite-transfer-cancel operation
# Check command return code only 
#
# Added by Victor Galaktionov 18/11/2009
function special_cancel_transfer()
{
  echo "1. Check -q  parameter" 
    echo "glite-transfer-cancel -q"
    glite-transfer-cancel -q -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer
    if [ $? != 1 ]; then
	echo "glite-transfer-cancel command - failed"
	return 1
    fi 
    echo "OK" 

     echo "2. Check -h  parameter"
    echo "glite-transfer-cancel -h"
    glite-transfer-cancel -h
    if [ $? != 0 ]; then
	echo "glite-transfer-cancel command - failed"
	return 1
    fi 
    echo "OK" 

    echo "3. Check -v  parameter" 
    echo "glite-transfer-cancel -v -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer"
    glite-transfer-list -v -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer
    if [ $? != 0 ]; then
	echo "glite-transfer-cancel command - failed"
	return 1
    fi 
    echo "OK"    
     
    echo "4. Check -V  parameter" 
    echo "glite-transfer-cancel -V"
    glite-transfer-cancel -V
    if [ $? != 0 ]; then
	echo "glite-transfer-cancel command - failed"
	return 1
    fi 
 
    echo "OK"     
    return 0
}

#
# Special tests for glite-transfer-channel-list operation
# Check command return code only 
#
# Added by Victor Galaktionov 24/11/2009
function special_check_channel-list()
{
    echo  "special_check_channel-list($1)"
    CHANNEL=$1
    
    echo "1. Check with noncorrect service"
    
    echo "glite-transfer-channel-list -s https://FTS_HOST:8443/glite-data-transfer-fts/services/ChannelManagement"
    glite-transfer-status -s https://FTS_HOST:8443/glite-data-transfer-fts/services/ChannelManagement
    if [ $? == 0 ]; then
	echo "glite-transfer-channel-list  command - failed"
	return 1
    fi 
    echo "OK"
     
    echo "2. Check -h  parameter" 
    echo "glite-transfer-channel-list -h"
    glite-transfer-channel-list -h
    if [ $? != 0 ]; then
	echo "glite-transfer-channel-lost command - failed"
	return 1
    fi 
    echo "OK" 
     
    echo "3. Check -v  parameter" 
    echo "glite-transfer-channel-list -v -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/ChannelManagement $CHANNEL"
    glite-transfer-channel-list -v -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/ChannelManagement $CHANNEL
    if [ $? != 0 ]; then
	echo "glite-transfer-channel-list command - failed"
	return 1
    fi 
    echo "OK"    
     
    echo "4. Check -V  parameter" 
    echo "glite-transfer-channel-list -V"
    glite-transfer-channel-list -V
    if [ $? != 0 ]; then
	echo "glite-transfer-channel-list command - failed"
	return 1
    fi 
    echo "OK"     
    
    echo "5. Check -q  parameter" 
    echo "glite-transfer-channel-list -q  -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/ChannelManagement $CHANNEL"
    glite-transfer-channel-list -q  -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/ChannelManagement $CHANNEL
    if [ $? != 0 ]; then
	echo "glite-transfer-channel-list command - failed"
	return 1
    fi 
    echo "OK"     
    
    echo "6. Check --verbose  parameter" 
    echo "glite-transfer-channel-list --verbose  -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/ChannelManagement $CHAWNNEL"
    glite-transfer-channel-list --verbose  -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/ChannelManagement $CHANNEL > message
    if [ $? != 0 ]; then
	echo "glite-transfer-channel-list command - failed"
	return 1
    fi 
    grep "$CHANNEL" message > /dev/null
    if [ $? != 0 ]; then
	echo "glite-transfer-channel-list --verbose command - failed"
	return 1
    fi 

    echo "6. Check -x  parameter" 
    echo "glite-transfer-channel-list -x  -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/ChannelManagement $CHANNEL"
    glite-transfer-channel-list -x  -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/ChannelManagement $CHANNEL > message
    if [ $? != 0 ]; then
	echo "glite-transfer-channel-list -x command - failed"
	return 1
    fi 
    grep "Srm copy" message > /dev/nul 
    if [ $? != 0 ]; then
	echo "glite-transfer-channel-list -x command - failed"
	return 1
    fi 
    
    echo "OK" 
    
     return 0
}
    
#
# Special tests for glite-transfer-status operation
# Check command return code only 
#
# Added by Victor Galaktionov 18/11/2009
function special_check_transfer_status()
{
    echo  "special_check_transfer_status($1)"
    
    echo "1. Check with noncorrect service"
    JID=$1
    echo "glite-transfer-status -s https://FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer $JID"
    glite-transfer-status -s https://FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer $JID
    if [ $? == 0 ]; then
	echo "glite-transfer-status command - failed"
	return 1
    fi 
    echo "OK"
     
    echo "2. Check -h  parameter" 
    echo "glite-transfer-status -h"
    glite-transfer-status -h
    if [ $? != 0 ]; then
	echo "glite-transfer-status command - failed"
	return 1
    fi 
    echo "OK" 
     
    echo "3. Check -v  parameter" 
    echo "glite-transfer-status -v -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer $JID"
    glite-transfer-status -v -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer $JID
    if [ $? != 0 ]; then
	echo "glite-transfer-status command - failed"
	return 1
    fi 
    echo "OK"    
     
    echo "4. Check -V  parameter" 
    echo "glite-transfer-status -V"
    glite-transfer-status -V
    if [ $? != 0 ]; then
	echo "glite-transfer-status command - failed"
	return 1
    fi 
    echo "OK"     
    
    echo "5. Check -q  parameter" 
    echo "glite-transfer-status -q  -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer $JID"
    glite-transfer-status -q  -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer $JID
    if [ $? != 0 ]; then
	echo "glite-transfer-status command - failed"
	return 1
    fi 
    echo "OK"     
    
     return 0
}

#
#
# Special tests for glite-transfer-list operation
# Check command return code only 
#
# Added by Victor Galaktionov 18/11/2009
function special_file_transfer_list()
{
     declare -a states
     #states=(Submitted Canceled Canceling Pending Active Waiting Hold Done Faled)
     states=(Ready Submitted Finished Canceled Canceling Pending Active Hold Done Failed)
     echo "1. simple correct command glite-transfer-list" 
     echo "glite-transfer-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer" 
     glite-transfer-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer
     if [ $? != 0 ]; then
	echo "glite-transfer-list command - failed"
	return 1
    fi
    echo "OK"
        
    echo "2. Check with noncorrect service"
    echo "glite-transfer-list -s https://FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer"
    glite-transfer-list -s https://FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer
    if [ $? == 0 ]; then
	echo "glite-transfer-list command - failed"
	return 1
    fi 
    echo "OK"
     
    echo "3. Check -h  parameter" 
    echo "glite-transfer-list -h"
    glite-transfer-list -h
    if [ $? != 0 ]; then
	echo "glite-transfer-list command - failed"
	return 1
    fi 
    echo "OK" 
     
    echo "4. Check -v  parameter" 
    echo "glite-transfer-list -v -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer"
    glite-transfer-list -v -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer
    if [ $? != 0 ]; then
	echo "glite-transfer-list command - failed"
	return 1
    fi 
    echo "OK"    
     
    echo "5. Check -V  parameter" 
    echo "glite-transfer-list -V"
    glite-transfer-list -V
    if [ $? != 0 ]; then
	echo "glite-transfer-list command - failed"
	return 1
    fi 
    echo "OK"     
    
    echo "6. Check -q  parameter" 
    echo "glite-transfer-list -q  -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer"
    glite-transfer-list -q  -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer
    if [ $? != 0 ]; then
	echo "glite-transfer-list command - failed"
	return 1
    fi 
    echo "OK"     
    
    echo "7. Check status jobs in list command"
    for ST in ${states[*]}
    do
        echo "glite-transfer-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer $ST" 
        glite-transfer-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer $ST
        if [ $? != 0 ]; then
	    echo "glite-transfer-list command - failed"
	    return 1
	fi 
    done 
    echo "8. Check noncorrect states"
    echo "glite-transfer-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer blabla" 
    glite-transfer-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer blabla
    if [ $? == 0 ]; then
	echo "glite-transfer-list command - failed"
	return 1
    fi
        
    return 0
}

#
# get SE1_SRM_LOC, SE2_SRM_LOC  and submit
# JOBLIST_NUMBER  file transfer. FTS_HOST must be set. The job Id is stored
# in SUBID
#
# Added by Victor Galaktionov 24/11/209
function file_transfer_status()
{
    
    echo "file_transfer_status($1, $2)"
    if [ -z $1 ];then
     echo "An SE source SRM location must be given to file_transfer()"
     return 2
    else
     local SE1_SRM_LOC=$1
    fi

    if [ -z $2 ];then
     echo "An SE destination SRM location must be given to file_transfer()"
     return 2
    else
     local SE2_SRM_LOC=$2
    fi
    
     
    SUB_FILE_LOC="$HOME/fts-submission-file"
    RESULT_FILE="$HOME/fts-test-results"
    DATE=`date | awk '{print $2"_"$3"_"$4}' | sed -e 's/://g'`
    TMP_FILE="/tmp/FTS_Test_$DATE"
    TEST_FILE_NAME="FTS_Test_$DATE"
    echo "Creating 10MB temporary test file for transfer" 

    echo "" > $TMP_FILE

    dd if=/dev/zero of=$TMP_FILE bs=10MB count=1 2>/dev/null

    echo "Using the 10MB temporary test file: $TMP_FILE" 
    echo "Copy the test file $TMP_FILE on: $SE1_SRM_LOC" 

    GUID=`lcg-cr --vo $VO_NAME -d $SE1_SRM_LOC/$TEST_FILE_NAME file://$TMP_FILE 2>message`

    result=`cat message | wc -l`

    if [ $result -gt 0 ]; then
      echo ">>> NOTE: `cat message`"
      echo ">>> NOTE: lcg-cr command for SRM: $SE1_SRM_LOC failed!"
      return 1
    fi
    echo "Removing the 10MB temporary test file: $TMP_FILE"
    rm -rf $TMP_FILE

	echo "Submitting the transfer"  

	echo "glite-transfer-submit -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer -f $SUB_FILE_LOC" 
	SUBID=`glite-transfer-submit -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer -f $SUB_FILE_LOC`

	if [ -z "$SUBID" ]; then
    	    echo "Job submition failed!"
    	    return 1
	fi
	echo "Job successfully submited"
	echo "Transfer ID: $SUBID. " 
	echo "Check --verbose parameter"
	echo "glite-transfer-status --verbose -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer $SUBID"
	glite-transfer-status --verbose -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer $SUBID > message
    
	if [ $? != 0 ]; then
	    echo "glite-transfer-status --verbose command - failed"
	    return 1
	fi
     
	echo "Check verbose string - 'Client DN'"
	grep "Client DN" message > /dev/null
	if [ $? != 0 ]; then
	    echo "glite-transfer-status --verbose command - noncorrect"
	    return 1
	fi     
	echo "OK"
 return 0

}     

#
# get SE1_SRM_LOC, SE2_SRM_LOC  and submit
# JOBLIST_NUMBER  file transfer. FTS_HOST must be set. The job Id is stored
# in SUBID
#
# Added by Victor Galaktionov 18/11/209
function file_transfer_list()
{

    echo "file_transfer_list($1, $2, $3)"
    if [ -z $1 ];then
     echo "An SE source SRM location must be given to file_transfer()"
     return 2
    else
     local SE1_SRM_LOC=$1
    fi

    if [ -z $2 ];then
     echo "An SE destination SRM location must be given to file_transfer()"
     return 2
    else
     local SE2_SRM_LOC=$2
    fi
    
    
     if [ -z $3 ];then
     echo "An CHANNEL must be given to file_transfer()"
     return 2
    else
     local CHANNEL=$3
    fi
    
    SUB_FILE_LOC="$HOME/fts-submission-file"
    RESULT_FILE="$HOME/fts-test-results"

    DATE=`date | awk '{print $2"_"$3"_"$4}' | sed -e 's/://g'`
    TMP_FILE="/tmp/FTS_Test_$DATE"
    TEST_FILE_NAME="FTS_Test_$DATE"
    echo "Creating 10MB temporary test file for transfer" 

    echo "" > $TMP_FILE

    dd if=/dev/zero of=$TMP_FILE bs=10MB count=1 2>/dev/null

    echo "Using the 10MB temporary test file: $TMP_FILE" 
    echo "Copy the test file $TMP_FILE on: $SE1_SRM_LOC" 

    GUID=`lcg-cr --vo $VO_NAME -d $SE1_SRM_LOC/$TEST_FILE_NAME file://$TMP_FILE 2>message`

    result=`cat message | wc -l`

    if [ $result -gt 0 ]; then
      echo ">>> NOTE: `cat message`"
      echo ">>> NOTE: lcg-cr command for SRM: $SE1_SRM_LOC failed!"
      return 1
    fi
    echo "Removing the 10MB temporary test file: $TMP_FILE"
    rm -rf $TMP_FILE

    
    declare -a JOBID
    count=1
    echo ""
    while [ $count -le $JOBLIST_NUMBER ];
    do
	echo ""
	echo "$count. Job submit"
	echo "Creating the submission file in $SUB_FILE_LOC"
	i=0
	echo "" > $SUB_FILE_LOC

	echo "$SE1_SRM_LOC/$TEST_FILE_NAME $SE2_SRM_LOC/$TEST_FILE_NAME$count" >> $SUB_FILE_LOC

	echo "Submitting the transfer"  

	echo "glite-transfer-submit -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer -f $SUB_FILE_LOC" 
	SUBID=`glite-transfer-submit -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer -f $SUB_FILE_LOC`

	if [ -z "$SUBID" ]; then
    	    echo "Job submition failed!"
    	    return 1
	fi
	echo "Job successfully submited"
	echo "Transfer ID: $SUBID. " 
	JOBID[$count]=$SUBID
	JD=${JOBID[$count]}
	echo "Job $JD submitted"
	let count=count+1
    done
    
    echo ""
    USERDN=`glite-voms-proxy-info -identity`
    echo "User DN: $USERDN"    
    
    echo "Check --verbose parameter"
    echo "glite-transfer-list --verbose -s -verbose https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer"
    glite-transfer-list --verbose -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer > message
    if [ $? != 0 ]; then
	echo "glite-transfer-list --verbose command - failed"
	return 1
    fi
     
    echo "Check verbose string - User DN"
    grep "$USERDN" message > /dev/null
    if [ $? != 0 ]; then
	echo "glite-transfer-list --verbose command - noncorrect"
	return 1
    fi     
    echo "OK"
        
    echo "Check parameters -s -c -u -o" 
    echo "glite-transfer-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer -c $CHANNEL -u '$USERDN' -o $VO"
    
    echo "Sleep 3 sec"
    sleep 3
    
    glite-transfer-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer  -c "$CHANNEL" -u "$USERDN" -o $VO > jlist
    if [ $? != 0 ]; then
	echo "glite-transfer-list command - failed"
	return 1
    fi
    echo "Result job list:"
    cat jlist
    
    echo ""
    echo "Check every job in this list"
    for JID in ${JOBID[*]}
    do
	echo "Check job $JID"
	grep $JID jlist > /dev/null
	if [ $? == 1 ]; then
	    echo "Submitted job list noncorrect"
	    echo "Job $JID is missing in list"
	    return 1
	fi
	echo "OK"
    done
    
    echo "Special checking"
 
    echo "Check with noncorrect user DN and VO"
    echo "glite-transfer-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer -u 'USERDN' -o $VO"
    glite-transfer-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer -u "USERDN" -o $VO > jlist
    if [ $? != 0 ]; then
	echo "glite-transfer-list command - failed"
	return 1
    fi
    #echo "Result:"
    result=`cat jlist | wc -l`
    
     echo "Result:$result"
    if [ $result -gt 0 ]; then
      echo ">>> NOTE: `cat jlist`"
      echo ">>> NOTE: glite-transfer-list -  failed!"
      return 1
    fi
    
    
    echo "glite-transfer-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer -u "$USERDN" -o 'VO'"
    glite-transfer-list -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer -u "$USERDN" -o "VO" > jlist
    if [ $? != 0 ]; then
	echo "glite-transfer-list command - failed"
	return 1
    fi
    result=`cat jlist | wc -l`
    
    #echo "Result:$result"
    if [ $result -gt 0 ]; then
      echo ">>> NOTE: `cat jlist`"
      echo ">>> NOTE: glite-transfer-list -  failed!"
      return 1
    fi
    
return 0

}

#  Add by Victor Galaktionov 18/11/2009
#
# Get a Submission Id and check the status of the file transfer.
# Return codes:
#              - 0 status value - valid
#              - 1 error, not defined status value
function if_valid_job_status()
{
    echo "if_valid_job_status()"
     declare -a states
     states=(Ready Submitted Canceled Canceling Pending Active Hold Done Failed Finished )
    if [ -z $1 ];then
      echo "A submission Id must be provided to new_get_status_result()"
      return 2
    fi
    SubId=$1
    
    #echo "glite-transfer-status -q -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer $SubId"
    status=`glite-transfer-status -q -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer $SubId 2>message`

    result=`cat message | wc -l`

    echo "Status=$status"
    if [ $result -gt 0 ]; then
      echo ">>> NOTE: `cat message`"
      echo ""
      return
    fi
    for item in ${states[*]}
    do
	if [ $status == $item ]; then
	    return 0
	fi
    done 
    echo "Not define job status $status"
    return 1
}

#  Add by Victor Galaktionov 18/11/2009
#
# Get a Submission Id and check the status of the file transfer.
# Return codes:
#              - 0 trasfer finished
#              - 1 error
#              - 2 bad input arguments
#              - 3 job failed
#              - 4 job is holded
#              - 5 job is in cancelling process
#              - 6 job is canceled 
function new_get_status_result()
{
    echo "new_get_status_result()"
    
    if [ -z $1 ];then
      echo "A submission Id must be provided to new_get_status_result()"
      return 2
    else
      local SubId=$1
    fi

    export GLITE_SD_SITE=$SITE_NAME
    export LCG_CATALOG_TYPE='lfc'

    previous_status="None"

    status=`glite-transfer-status -s https://$FTS_HOST:8443/glite-data-transfer-fts/services/FileTransfer $SubId 2>message`

    result=`cat message | wc -l`

    if [ $result -gt 0 ]; then
      echo ">>> NOTE: `cat message`"
      echo ""
      return
    fi

#    echo "status is $status"
    if test $status == "Finished"
    then
      echo "Job is successfully finished." 
      return 0
    
    elif test $status == "Failed"
    then
      echo "Job is Failed" 
      return 3 

    elif test $status == "Hold"
    then
      echo "Job is Hold"
      return 4

    elif test $status == "Submitted"
    then
      echo "Job is Submitted"
      return 4

    elif test $status == "Ready"
    then
      echo "Job is Ready"
      return 4

    elif test $status == "Pending"
    then
      echo "Job is Pending"
      return 4

    elif test $status == "Done"
    then
      echo "Job is Done"
      return 4

    elif test $status == "Active"
    then
      echo "Job is Active"
      return 4
          
    elif test $status == "Canceling"
    then
      echo "Job is Canceling"
      return 5
    elif test $status == "Canceled"
    then
      echo "Job is Canceled"
      return 6
    else
      echo "Job status unknown: $status"
      return 1
    fi 

}


# Add by Victor Galaktionov 18/11/2009
#
# get SUBID and TIMEOUT and poll the status until it is done (0), failed (3)
# or failed for timeout exceeded (4). 1 ir returned on error and 2 for bad
# input parameters
#
function poll_canceled_status_with_timeout()
{
  if [ -z $1 ];then
    echo "A submission Id must be provided to poll_status_with_timeout()"
    return 2
  else
    local SUBID=$1
  fi

  if [ -z $2 ];then
    echo "A timeout must be provided to poll_status_with_timeout()"
    return 2
  else
    local Timeout=$2
  fi

  echo "Checking status for job ID: $SUBID" 

  previous_status="None"
  t=0
  while test $t -lt $Timeout
  do
    new_get_status_result $SUBID
    status=$?

    if [ "$status" -eq 1 ]; then
      echo "error retrieving the status with get_status_result()"
      return 1
    fi

    if [ "$status" -eq 6 ]; then
      echo "Job done"
      return 0
    fi
     
    if [ "$status" -eq 3 ]; then
      echo "Job failed"
      return 3
    fi
    #if [ "$status" -eq 4 ]; then
      echo "Waiting for status changes" 
      sleep 10
      t=`expr $t + 10`
      echo "Time is $t timeout is $Timeout"  
    #fi

    if [ "$t" -eq "$Timeout" ]; then
      echo "Exceded timeout of $Timeout seconds"
      return 4
    else
      continue
    fi
  done

}

