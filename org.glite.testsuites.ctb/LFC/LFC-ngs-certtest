#!/bin/sh
##############################################################################
# Copyright (c) Members of the EGEE Collaboration. 2004.
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS
# OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################
#
# AUTHORS: Victor Galaktionov. CERN/JINR.
# Test program based on program LFC-certtest written by Gianni Pucciani, CERN
#
##############################################################################

showUsage () {
    echo "                                           "
    echo "Usage:  LFC-ngs-certtest.sh                "
    echo "                                           "
}

exitFailure ()	{
    echo "------------------------------------------------"
    echo "END `date`"
    echo "-TEST FAILED-"
    exit $STATE_CRITICAL
}

#######################
#Parsing the arguments#
#######################

if [ "$1" = "-h" ] || [ "$1" = "-help" ] || [ "$1" = "--help" ] || [ $# -gt 0 ]; then
    showUsage
    exit $STATE_CRITICAL
fi

###################################
# Check for environment variables #
###################################

PROGNAME=`/bin/basename $0`
export PROGPATH=`echo $0 | sed -e 's,[\\/][^\\/][^\\/]*$,,'`
export FILE=$PROGPATH/$PROGNAME
echo "Work file=$FILE"

echo "Program: $PROGNAME, path: $PROGPATH"

if [ -e $PROGPATH/LFC-ngs-certconfig ]; then
    source $PROGPATH/LFC-ngs-certconfig
    echo "vo=$VO"
    echo "LFC_HOST=$LFC_HOST"
    echo "LCG_GFAL_INFOSYS=$LCG_GFAL_INFOSYS"
else
    echo "The file $PROGPATH/LFC-ngs-certconfig must be sourced in order to run the tests"
    exitFailure
fi

if [ -z "$VO" ]; then
    echo "You need to set VO in order to run the tests"
    exitFailure
fi

if [ -z "$LFC_HOST" ]; then
    echo "You need to set LFC_HOST in order to run the tests"
    exitFailure
fi

#########
# START #
#########

echo "START `date` "
echo "------------------------------------------------"

####################################
# Checking if there is valid proxy #
####################################

#echo "Check if running glite:"
#echo "Start: $LCG_LOCATION/bin/lcg-infosites --vo $VO se"
#$LCG_LOCATION/bin/lcg-infosites --vo $VO se
#echo "Ret=$?"
echo "------------------------------------------------"

#$LCG_LOCATION/bin/lfc-ls /grid/dteam/vgalakti
#echo "Ret: $?"
#$LCG_LOCATION/bin/lfc-ls /grid/dteam
#$LCG_LOCATION/bin/lfc-ls /grid/dteam/vgalakti

#echo "Start $GLITE_LOCATION/bin/glite-voms-proxy-info -all"
#$GLITE_LOCATION/bin/glite-voms-proxy-info -all
#echo  "Ret: $?"

echo "Check proxy certificate"
ProxyExist=`$GLITE_LOCATION/bin/glite-voms-proxy-info 2>/dev/null | grep timeleft | wc -l`
ProxyExpired=`$GLITE_LOCATION/bin/glite-voms-proxy-info 2>/dev/null | grep  "timeleft  : 0:00:00" | wc -l`

#echo "ProxyExist=$ProxyExist, ProxyExpired=$ProxyExpired"
#ProxyExist=1
#ProxyExpired=0 
if [ $ProxyExist -gt 0 -a $ProxyExpired -eq 0 ]; then
  #nop
  :
else
    echo "Valid proxy is needed for this test!"
    $GLITE_LOCATION/bin/voms-proxy-info
    if [ $ProxyExpired -gt 0 ]; then
	echo "Proxy credential expired!"
    fi
    exitFailure
fi
$GLITE_LOCATION/bin/glite-voms-proxy-info 2>/dev/null | grep  "timeleft" 
echo "Proxy is valid"
########################
# Launch all the tests #
########################

declare -a tests_failed
failed="no"

#testdir=$PROGPATH/tests

#############
# CLI tests #
#############

echo ""
if [ "$CLI" = "yes" ]; then
    echo "*** RUNNING CLI TEST SET ****"

    tests_list=`cat $PROGPATH/test-cli-ngs.lst`

    count=1
    for item in ${tests_list[*]}
    do
	rm -rf  /tmp/${item}_result.txt
	echo -n "$count. executing $item"

	$PROGPATH/tests/${item} $LFC_HOST   > /tmp/${item}_result.txt
	res=$?
  
	if [ "$res" != 0 ]; then 
	    echo -e "\t\t  -  FAILED"
	    failed="yes"
	    tests_failed=( "${tests_failed[@]}" "$item" )
	else
	    echo -e "\t\t  - PASSED OK"
	fi
	let count=$count+1
    done
    echo "*** End of cycle for LFC CLI commands"
else
    echo "*CLI tests skipped*"
fi

echo ""
if [ "$API_PYTHON" = "yes" ]; then
    echo "*** RUNNING API PYTHON TEST SET ***"

    tests_list=`cat $PROGPATH/test-api-ngs.lst`

    count=1
    for item in ${tests_list[*]}
    do
	rm -rf  /tmp/${item}_result.txt
	echo -n "$count. executing $item"

	$PROGPATH/tests/${item} $LFC_HOST   > /tmp/${item}_result.txt
	res=$?
	
	if [ "$res" != 0 ]; then 
	    echo -e "\t\t   - FAILED"
	    failed="yes"
	    tests_failed=( "${tests_failed[@]}" "$item" )
	else
	    echo -e "\t\t -  PASSED - OK"
	fi
	let count=$count+1
    done
    echo "*** End of cycle for LFC Python API commands"
else
    echo "*Python API tests skipped*"
fi

if test $failed == "yes"
then
    echo "Test is failed"
    exit $STATE_CRITICAL
fi    

echo "Test passed - OK"
exit $STATE_OK

