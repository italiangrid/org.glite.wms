#!/bin/sh
##############################################################################
# Copyright (c) Members of the EGEE Collaboration. 2004.
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS
# OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################
#
# AUTHORS: Gianni Pucciani, CERN
#
##############################################################################

showUsage ()
{
 echo "                                           "
 echo "Usage:  LFC-certtest.sh [-f <config file>] [--lfc <LFC_HOST>]                  "
 echo "                                           "
}

exitFailure ()
{
echo "------------------------------------------------"
echo "END `date`"
echo "-TEST FAILED-"
exit -1
}

#######################
#Parsing the arguments#
#######################
if [ "$1" = "-h" ] || [ "$1" = "-help" ] || [ "$1" = "--help" ]; then
  showUsage
  exit 2
fi

###################################
# Check for environment variables #
###################################

#Parse arguments
while [ $# -ne 0 ]; do
  case "$1" in
    -f)
      shift
      conffile=$1
      shift
      ;;
    '--lfc')
      shift
      LFC_HOST_ARG=$1
      shift
      ;;
    *|'')
      echo "Unknown option '$1'"
      exit
      ;;
  esac
done

if [ "x$conffile" = "x" ]; then
  #Default value
  conffile="./FTS-certconfig"
fi
echo "Using $conffile"

if [ -e $conffile ]; then
  source $conffile
else
  echo "The file $conffile must be sourced in order to run the tests"
  exitFailure
fi

if [ -n "$LFC_HOST_ARG" ]; then
  hostname=$LFC_HOST_ARG
elif [ -n "$LFC_HOST" ]; then
  hostname=$LFC_HOST
else
  echo "You ned to set LFC_HOST in LFC-certconfig or use the --lfc argument"
  exitFailure
fi

if [ -z "$VO" ]; then
  echo "You need to set VO in order to run the tests"
  exitFailure
fi

if [ -z "$LFC_HOST" ]; then
  echo "You need to set LFC_HOST in order to run the tests"
  exitFailure
fi

#########
# START #
#########


####################################
# Create a directory for log files #
####################################

id=`date +%y%m%d%H%M%S`
if [ "x$LOGSLOCATION" == "x" ];then
  cp=`pwd`
  loglocation=$cp/logs_$id
  mkdir -p $loglocation
else
  loglocation=$LOGSLOCATION/logs_$id
  mkdir -p $loglocation
fi

if [ ! -d $loglocation ];then
  echo   "Error while creating log directory $loglocation"
  exitFailure
else
  echo "Log files will be stored in $loglocation"
fi


#########
# START #
#########

echo "START `date` "
echo "------------------------------------------------"
echo "LFC_HOST=$LFC_HOST"

####################################
# Checking if there is valid proxy #
####################################

ProxyExist=`voms-proxy-info 2>/dev/null | grep timeleft | wc -l`

ProxyExpired=`voms-proxy-info 2>/dev/null | grep  "timeleft  : 0:00:00" | wc -l`

if [ $ProxyExist -gt 0 -a $ProxyExpired -eq 0 ]; then
  #nop
  :
else
  echo "Valid proxy is needed for this test!"
  if [ $ProxyExpired -gt 0 ]; then
    echo "Proxy credential expired!"
  fi
  exitFailure
fi

########################
# Launch all the tests #
########################

declare -a tests_failed
declare -a tests_warnings
failed=no
warning=no

testdir=./tests

pushd $testdir >> /dev/null
touch testfile 2> /dev/null
if [ $? -ne 0 ]; then
  echo "LFC test directory is not writable, if you are on AFS be sure to have a valid token"
  exitFailure
fi

#############
# CLI tests #
#############

pushd cli >> /dev/null

if [ "$CLI" = "yes" ]; then
  echo "*Running CLI test set*"
  tests_list=`cat test-cli.lst`
#  tests_list=( LFC-cli-mkdir LFC-cli-rmdir LFC-cli-ping LFC-cli-setcom \
#                LFC-cli-delcom LFC-cli-rename LFC-cli-ln LFC-cli-getacl \
#                LFC-cli-setacl )
  for item in ${tests_list[*]}
  do
    rm -rf ${item}_result.txt testfile
    echo "Executing $item"
    echo "./$item $hostname" > $loglocation/${item}_result.txt
    ./$item $hostname >> $loglocation/${item}_result.txt 2>&1
    res=$?
    grep '\-TEST FAILED\-' $loglocation/${item}_result.txt >> /dev/null
    if [ "$?" = 0 -o "$res" != 0 ]; then
      echo "$item FAILED"
      failed=yes
      tests_failed=( "${tests_failed[@]}" "$item" )
    else
      echo "$item PASSED"
    fi
  done
else
  echo "*CLI tests skipped*"
fi

popd >> /dev/null

##############
# API_PYTHON #
##############

pushd python-api >> /dev/null

#These SAME variables are needed to run the python scripts
export SAME_OK=0
export SAME_ERROR=1
export SAME_WARNING=3
export SAME_SENSOR_HOME=`pwd`
export SAME_SENSOR_WORK=`pwd`

if [ "$API_PYTHON" = "yes" ]; then
  echo "*Running API_PYTHON test set*"
  tests_list=`cat test-api-python.lst`
  for item in ${tests_list[*]}
  do
    rm -rf ${item}_result.txt testfile
    echo "Executing $item"
    echo "./$item $hostname" > $loglocation/${item}_result.txt
    ./$item $hostname >> $loglocation/${item}_result.txt 2>&1
    res=$?
    grep '\-TEST FAILED\-' $loglocation/${item}_result.txt >> /dev/null
    if [ "$?" = 0 -o "$res" != 0 ]; then
      if [ "$res" == "3" ]; then
        echo "$item WARNING"
        warning=yes
        tests_warnings=( "${tests_failed[@]}" "$item" )
      else
        echo "$item FAILED"
        failed=yes
        tests_failed=( "${tests_failed[@]}" "$item" )
      fi
    else
      echo "$item PASSED"
    fi
  done
else
  echo "*API_PYTHON tests skipped*"
fi

popd >> /dev/null

echo "------------------------------------------------"
echo "END `date`"

#########################
# Analyse tests outcome #
#########################

if [ $failed == "yes" ]; then
  echo "TEST_FAILED"
  echo "The following tests failed:"
  for item in ${tests_failed[*]}
  do
    echo "$item: results in $loglocation/${item}_result.txt"
  done
elif [ $warning == "yes" ]; then
  echo "TEST PASSED with warnings"
  for item in ${tests_warnings[*]}
  do
    echo "$item: results in $loglocation/${item}_result.txt"
  done
else
  echo "TEST PASSED"
fi

