#!/usr/bin/env  python
# test has been developed by Robert Harakaly and changed for SAM by Victor Galaktionov 
# rename a LFC file or directory in the name server (lfc_rename)  

import os, lfc, sys, commands
from testClass import _test, _ntest

global testHome,lfc_vo 

class test_ok(_test):
    def info(self):
	return "lfc_rename OK "
    def clean(self):
        lfc.lfc_unlink(self.new_name)
    def prepare(self):
        self.guid = commands.getoutput('uuidgen').split('/n')[0]
        self.name = lfc_vo + "/python_filerename_test"    # Victor
        ret = lfc.lfc_creatg(self.name,self.guid,0664)
        self.stat=lfc.lfc_filestatg()
        ret=lfc.lfc_statg(self.name, "", self.stat)

    def test(self):
        self.new_name= lfc_vo + "/python_filerenamed_test"  # Victor
	ret = lfc.lfc_rename(self.name,self.new_name)
        stat=lfc.lfc_filestatg()
        ret=lfc.lfc_statg(self.new_name, "", stat)
        return (stat,ret)
    def ret(self):
        return self.stat
    def compare(self, testVal, retVal):
        (ret, retRetVal) = retVal
        (test, testRetVal) = testVal
        retval = True
        if (retRetVal == testRetVal):
            retval = retval & ( test.nlink == ret.nlink )
	    retval = retval & ( test.filesize == ret.filesize )
            retval = retval & ( test.fileclass == ret.fileclass )
            retval = retval & ( test.status == ret.status )
            retval = retval & ( test.guid == ret.guid )
        else:
            retval = False
        return retval

#	rename inexisting file
#	rename existing file but without privileges

class lfc_rename_test:
    def __init__(self):
	self.name = "lfc_rename_test"
        self.tests=[test_ok]

    def run(self):
        retVal = True
        for testclass in self.tests:
            testInstance = testclass()
            testInstance.prepare()
            ret1 = testInstance.compare(testInstance.test(), (testInstance.ret(), testInstance.getRetVal()))
            testInstance.clean()
            retVal = retVal & ret1
            if ret1:
                print "%-60s[OK]" % testInstance.info()
            else:
                print "%-60s[FAILED]" % testInstance.info()
        return retVal


#os.environ['LFC_HOME'] = 'lxb1941.cern.ch:/grid/dteam'
#os.environ['LFC_HOST'] = 'lxb1941.cern.ch'
#testHome = "python_lfc_test"
#lfc_rename_test().run()

#************* Interface for SAM and Python tests ***************
print "<pre>"
print "Start test:  rename a LFC file or directory in the name server (lfc_rename)"
print "1. Prepare environment"

vo_name=os.environ['SAME_VO']
lfc_host = sys.argv[1]
lfc_home = lfc_host + ":/grid/" + vo_name
testHome = "python_lfc_test"

os.environ['LFC_HOME'] = lfc_home
os.environ['LFC_HOST'] = lfc_host

same_ok   = int(os.environ['SAME_OK'])
same_err  = int(os.environ['SAME_ERROR'])
lfc_vo    = "/grid/" + vo_name

print "2. Start test run()"
ret = lfc_rename_test().run()


print "3. Ret test code: %s" % ret
print "Exit"
print "</pre>"

if ( ret == True ):
    print "Test is OK"
    sys.exit(same_ok)
else:
    print "Test is failure"
    sys.exit(same_err)
                        


