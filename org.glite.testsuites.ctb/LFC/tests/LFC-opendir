#!/usr/bin/env python
# test has been developed by Robert Harakaly and changed for SAM by Victor Galaktionov 

import os, lfc, sys, commands, errno
from testClass import _test, _ntest

global testHome,lfc_vo 

class test_OK(_test):
    def info(self):
	return "Test open directory: "
    def prepare(self):
        self.name= lfc_vo + "/lfc_opendir_test" #   "/grid/dteam/lfc_opendir_test"
        lfc.lfc_mkdir(self.name, 0775)
    def clean(self):
        lfc.lfc_rmdir(self.name)
    def test(self):
        dir = lfc.lfc_opendir(self.name)
        return (dir,0)
    def ret(self):
        retval=lfc.lfc_DIR()
        return retval
    def compare(self, testVal, retVal):
        (ret, retRetVal) = retVal
        (test, testRetVal) = testVal
        if (test != None):
            retval = True
        else:
            retval = False
        return retval


class test_ENAMETOOLONG(_ntest):
    def info(self):
        return "Test with path too long (ENAMETOOLONG): "
    def prepare(self):
        self.path = "a"
        for a in range(0,lfc.CA_MAXPATHLEN):
            self.path = self.path + "a"
    def test(self):
        dir = lfc.lfc_opendir(self.path)
        return (dir,lfc.cvar.serrno,-1)
    def ret(self):
        return (None, errno.ENAMETOOLONG)
    def compare(self, testVal, retVal):
        ((ret, reterr), retRetVal) = retVal
        (test, testerr, testRetVal) = testVal
        if ((ret == test) & (reterr == testerr)):
            retval = True
        else:
            retval = False
        return retval

class test_EACCES1(_ntest):
    def info(self):
        return "Test permission denied on path no read (EACCES): "
    def prepare(self):
        self.path=  lfc_vo + "/python_opendir_test/testfile"  # "/grid/dteam/python_opendir_test/testfile"
        guid = commands.getoutput('uuidgen').split('/n')[0]
        lfc.lfc_mkdir(os.path.dirname(self.path),0755)
        lfc.lfc_creatg(self.path,guid,0644)
        lfc.lfc_chmod(os.path.dirname(self.path),0111)
    def clean(self):
        lfc.lfc_chmod(os.path.dirname(self.path),0755)
        lfc.lfc_unlink(self.path)
        lfc.lfc_rmdir(os.path.dirname(self.path))
    def test(self):
        dir = lfc.lfc_opendir(os.path.dirname(self.path))
        return (dir,lfc.cvar.serrno,-1)
    def ret(self):
        return (None, errno.EACCES)
    def compare(self, testVal, retVal):
        ((ret, reterr), retRetVal) = retVal
        (test, testerr, testRetVal) = testVal
        if ((retRetVal == testRetVal) & (reterr == testerr)):
            retval = True
        else:
            retval = False
        return retval

class test_EACCES2(_ntest):
    def info(self):
        return "Test permission denied on path nosearch (EACCES): "
    def prepare(self):
        self.path=     lfc_vo + "/python_opendir_test/testfile"  # "/grid/dteam/python_opendir_test/testfile"
        lfc.lfc_mkdir(os.path.dirname(self.path),0755)
        lfc.lfc_mkdir(self.path, 0644)
    def clean(self):
        lfc.lfc_rmdir(self.path)
        lfc.lfc_rmdir(os.path.dirname(self.path))
    def test(self):
        dir = lfc.lfc_opendir(self.path)
        return (dir,lfc.cvar.serrno,-1)
    def ret(self):
        return (None, errno.EACCES)
    def compare(self, testVal, retVal):
        ((ret, reterr), retRetVal) = retVal
        (test, testerr, testRetVal) = testVal
        if ((retRetVal == testRetVal) & (reterr == testerr)):
            retval = True
        else:
            retval = False
        return retval


class test_EINVAL3(_ntest):
    def info(self):
        return "Test SE name length exeeds CA_MAXGUILEN (EINVAL): "
    def prepare(self):
        self.guid=commands.getoutput('uuidgen').split('/n')[0]
        self.name= lfc_vo + "lfc_getreplica_test" # "/grid/dteam/lfc_getreplica_test"
        lfc.lfc_creatg(self.name, self.guid, 0664)
    def clean(self):
        lfc.lfc_unlink(self.name)
    def test(self):
        se = ""
        sfn = "sfn://test-se.cern.ch" + lfc_vo + "/hary/lfc_getreplica_test"
        for i in range (0,lfc.CA_MAXNAMELEN+1):
            se = se + "a"
        ret = lfc.lfc_addreplica(self.guid, None, se, sfn,"-","D","","")
        return (None,lfc.cvar.serrno,ret)
    def ret(self):
        return (None, errno.EINVAL) 
    def compare(self, testVal, retVal):
        ((ret, reterr), retRetVal) = retVal
        (test, testerr, testRetVal) = testVal
        if ((retRetVal == testRetVal) & (reterr == testerr)):
            retval = True
        else:
            retval = False
        return retval

class test_ENOENT(_ntest):
    def info(self):
        return "Opendir on nonexisting file (ENOENT): "
    def test(self):
        dir = lfc.lfc_opendir("/nonexistingdirectory")
        return (dir,lfc.cvar.serrno,-1)
    def ret(self):
        return (None, errno.ENOENT)
    def compare(self, testVal, retVal):
        ((ret, reterr), retRetVal) = retVal
        (test, testerr, testRetVal) = testVal
        if ((ret == test) & (reterr == testerr)):
            retval = True
        else:
            retval = False
        return retval


class lfc_addreplica_test:
    def __init__(self):
	self.name = "lfc_addreplica_test"
        self.tests=[test_OK, test_ENAMETOOLONG, test_EACCES1, test_EACCES2, test_ENOENT]

    def run(self):
        retVal = True
        for testclass in self.tests:
            testInstance = testclass()
            testInstance.prepare()
            ret1 = testInstance.compare(testInstance.test(), (testInstance.ret(), testInstance.getRetVal()))
            testInstance.clean()
            retVal = retVal & ret1
            if ret1:
                print "%-60s[OK]" % testInstance.info()
            else:
                print "%-60s[FAILED]" % testInstance.info()
        return retVal


#os.environ['LFC_HOME'] = 'lxb1941.cern.ch:/grid/dteam'
#os.environ['LFC_HOST'] = 'lxb1941.cern.ch'
#testHome = "python_lfc_test"
#lfc_addreplica_test().run()

#************* Interface for SAM and Python tests ***************
print "<pre>"
print "Start test LFC-opendir"
print "1. Prepare environment"

vo_name=os.environ['SAME_VO']
lfc_host = sys.argv[1]
lfc_home = lfc_host + ":/grid/" + vo_name
lfc_vo   = "/grid/" + vo_name

os.environ['LFC_HOME'] = lfc_home
os.environ['LFC_HOST'] = lfc_host

same_ok   = int(os.environ['SAME_OK'])
same_err  = int(os.environ['SAME_ERROR'])

print "2. Start test run()"

testHome = "python_lfc_test"
ret = lfc_addreplica_test().run()


print "3. Ret test code: %s" % ret
print "Exit"
print "</pre>"

if ( ret == True) :
    print "Test is OK"
    sys.exit(same_ok)
else:
    print "Test is failure"
    sys.exit(same_err)
    