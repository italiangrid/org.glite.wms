#!/usr/bin/env python
# The test has been  developed by Robert Harakaly and changed for SAM by Victor Galaktionov 
#*** oldname: lfc_addreplica_test.py

import os, lfc, sys, commands, errno
from testClass import _test, _ntest

global testHome,lfc_vo

class test_OK(_test):
    def info(self):
	return "Test adding replica (guid): "
    def prepare(self):
        self.guid=commands.getoutput('uuidgen').split('/n')[0]
        self.name=lfc_vo + "/lfc_getreplica_test"
        lfc.lfc_creatg(self.name, self.guid, 0664)
    def clean(self):
        lfc.lfc_delreplica(self.guid, None, self.sfn)
        lfc.lfc_unlink(self.name)
    def test(self):
        self.sfn="sfn://test-se.cern.ch" + lfc_vo + "/hary/lfc_getreplica_test"
        lfc.lfc_addreplica(self.guid, None, "test-se.cern.ch", self.sfn, '-', 'D', "my-pool", "/pool")

        ret, list = lfc.lfc_getreplica(self.name, "", "")
        return (list,ret)
    def ret(self):
        retval=lfc.lfc_filereplica()
        retval.status="-"
        retval.sfn=self.sfn
        retval.f_type="D"
        retval.poolname="my-pool"
        retval.fs="/pool"
        return retval
    def compare(self, testVal, retVal):
        (ret, retRetVal) = retVal
        (test, testRetVal) = testVal
        retval = True
        if (retRetVal == testRetVal):
            retval = retval & ( test[0].sfn == ret.sfn )
            retval = retval & ( test[0].status == ret.status )
            retval = retval & ( test[0].f_type == ret.f_type )
            retval = retval & ( test[0].poolname == ret.poolname )
            retval = retval & ( test[0].fs == ret.fs )

        else:
            retval = False
        return retval



class test_OK_id(_test):
    def info(self):
        return "Test adding replica (fileid): "
    def prepare(self):
        self.guid=commands.getoutput('uuidgen').split('/n')[0]
        self.name= lfc_vo + "/lfc_getreplica_test"
        lfc.lfc_creatg(self.name, self.guid, 0664)
    def clean(self):
        lfc.lfc_delreplica(self.guid, None, self.sfn)
        lfc.lfc_unlink(self.name)
    def test(self):
        self.sfn="sfn://test-se.cern.ch" + lfc_vo + "/hary/lfc_getreplica_test"
        id = lfc.lfc_fileid()
        lfc.lfc_statx(self.name, id, lfc.lfc_filestat())
        lfc.lfc_addreplica("", id, "test-se.cern.ch", self.sfn, '-', 'D', "my-pool", "/pool")

        ret, list = lfc.lfc_getreplica(self.name, "", "")
        return (list,ret)
    def ret(self):
        retval=lfc.lfc_filereplica()
        retval.status="-"
        retval.sfn=self.sfn
        retval.f_type="D"
        retval.poolname="my-pool"
        retval.fs="/pool"
        return retval
    def compare(self, testVal, retVal):
        (ret, retRetVal) = retVal
        (test, testRetVal) = testVal
        retval = True
        if (retRetVal == testRetVal):
            retval = retval & ( test[0].sfn == ret.sfn )
            retval = retval & ( test[0].status == ret.status )
            retval = retval & ( test[0].f_type == ret.f_type )
            retval = retval & ( test[0].poolname == ret.poolname )
            retval = retval & ( test[0].fs == ret.fs )

        else:
            retval = False
        return retval

class test_EINVAL1(_ntest):
    def info(self):
        return "Test existing replica nonmatching guid/fileid (EINVAL): "
    def prepare(self):
        self.sfn="sfn://test-se.cern.ch" + lfc_vo + "/hary/lfc_getreplica_test"
        self.guid=commands.getoutput('uuidgen').split('/n')[0]
        self.name=lfc_vo + "/lfc_getreplica_test"
        lfc.lfc_creatg(self.name, self.guid, 0664)
        self.name1=lfc_vo + "/lfc_getreplica_test1"
        self.guid1=commands.getoutput('uuidgen').split('/n')[0]
    def clean(self):
        lfc.lfc_delreplica(self.guid, None, self.sfn)
        lfc.lfc_unlink(self.name)
        lfc.lfc_unlink(self.name1)
    def test(self):
        id = lfc.lfc_fileid()
        lfc.lfc_statx(self.name1, id, lfc.lfc_filestat())
        ret = lfc.lfc_addreplica(self.guid, id, os.getenv("LFC_HOST"), self.sfn, '-', 'D', "", "")
        return (None,lfc.cvar.serrno,ret)
    def ret(self):
        return (None, errno.EINVAL)
    def compare(self, testVal, retVal):
        ((ret, reterr), retRetVal) = retVal
        (test, testerr, testRetVal) = testVal
        print reterr, testerr
        if ((retRetVal == testRetVal) & (reterr == testerr)):
            retval = True
        else:
            retval = False
        return retval

class test_EINVAL2(_ntest):
    def info(self):
        return "Test guid length exeeds CA_MAXGUILEN (EINVAL): "
    def test(self):
        guid = ""
        sfn = "sfn://test-se.cern.ch" + lfc_vo + "/hary/lfc_getreplica_test"
        for i in range (0,lfc.CA_MAXGUIDLEN+1):
            guid = guid + "a"
        ret = lfc.lfc_addreplica(guid, None, os.getenv("LFC_HOST"), sfn ,"-","D","","")
        return (None,lfc.cvar.serrno,ret)
    def ret(self):
        return (None, errno.EINVAL)
    def compare(self, testVal, retVal):
        ((ret, reterr), retRetVal) = retVal
        (test, testerr, testRetVal) = testVal
        if ((retRetVal == testRetVal) & (reterr == testerr)):
            retval = True
        else:
            retval = False
        return retval

class test_EINVAL3(_ntest):
    def info(self):
        return "Test SE name length exeeds CA_MAXGUILEN (EINVAL): "
    def prepare(self):
        self.guid=commands.getoutput('uuidgen').split('/n')[0]
        self.name=lfc_vo + "/lfc_getreplica_test"
        lfc.lfc_creatg(self.name, self.guid, 0664)
    def clean(self):
        lfc.lfc_unlink(self.name)
    def test(self):
        se = ""
        sfn = "sfn://test-se.cern.ch" + lfc_vo + "/hary/lfc_getreplica_test"
        for i in range (0,lfc.CA_MAXNAMELEN+1):
            se = se + "a"
        ret = lfc.lfc_addreplica(self.guid, None, se, sfn,"-","D","","")
        return (None,lfc.cvar.serrno,ret)
    def ret(self):
        return (None, errno.EINVAL) 
    def compare(self, testVal, retVal):
        ((ret, reterr), retRetVal) = retVal
        (test, testerr, testRetVal) = testVal
        if ((retRetVal == testRetVal) & (reterr == testerr)):
            retval = True
        else:
            retval = False
        return retval

class test_ENOENT(_ntest):
    def info(self):
        return "Test existing replica nonexisting file (ENOENT): "
    def prepare(self):
        self.guid=commands.getoutput('uuidgen').split('/n')[0]
    def test(self):
        sfn = "sfn://test-se.cern.ch" + lfc_vo + "/hary/lfc_getreplica_test"
        ret = lfc.lfc_addreplica(self.guid, None,os.getenv("LFC_HOST"), sfn,"-","D","","")
        return (None,lfc.cvar.serrno,ret)
    def ret(self):
        return (None, errno.ENOENT)
    def compare(self, testVal, retVal):
        ((ret, reterr), retRetVal) = retVal
        (test, testerr, testRetVal) = testVal
        if ((retRetVal == testRetVal) & (reterr == testerr)):
            retval = True
        else:
            retval = False
        return retval


class lfc_addreplica_test:
    def __init__(self):
	self.name = "lfc_addreplica_test"
        self.tests=[test_OK, test_OK_id, test_EINVAL2, test_EINVAL3, test_ENOENT]

    def run(self):
        retVal = True
        for testclass in self.tests:
            print "Debug1: %s" % retVal
            testInstance = testclass()
            testInstance.prepare()
            print "Debug2: %s" % retVal
            ret1 = testInstance.compare(testInstance.test(), (testInstance.ret(), testInstance.getRetVal()))
            testInstance.clean()
            retVal = retVal & ret1
            print "Debug3: %s" % retVal
            if ret1:
                print "%-60s[OK]" % testInstance.info()
            else:
                print "%-60s[FAILED]" % testInstance.info()
        return retVal


#os.environ['LFC_HOME'] = 'lxb1941.cern.ch:/grid/dteam'
#os.environ['LFC_HOST'] = 'lxb1941.cern.ch'
#testHome = "python_lfc_test"
#lfc_addreplica_test().run()

#************* Interface for SAM and Python tests ***************
print "<pre>"
print "Start test"
print "1. Prepare environment"

vo_name=os.environ['SAME_VO']
lfc_host = sys.argv[1]
lfc_home = lfc_host + ":/grid/" + vo_name

os.environ['LFC_HOME'] = lfc_home
os.environ['LFC_HOST'] = lfc_host
lfc_vo = "/grid/" + vo_name

same_ok   = int(os.environ['SAME_OK'])
same_err  = int(os.environ['SAME_ERROR'])

print "2. Start test run()"

testHome = "python_lfc_test"
ret = lfc_addreplica_test().run

print "3. Ret test code: %s" % ret
print "Exit"
print "</pre>"

if (ret == True):
    print "Test is OK"
    sys.exit(same_ok)
else:
    print "Test is failure"
    sys.exit(same_err)
