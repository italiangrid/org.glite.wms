#!/usr/bin/env python
# test has been developed by Robert Harakaly and changed for SAM by Victor Galaktionov
# get information about a LFC file or directory in the name server (lfc_statr)


import os, lfc, sys, commands
from testClass import _test, _ntest

global testHome,lfc_vo

class test_existing_replica(_test):
    def info(self):
	return "Test existing replica: "
    def prepare(self):
        self.name=lfc_vo + "/lfc_statr_test"
        self.sfn="sfn://test-se.cern.ch/" + lfc_vo + "/hary/lfc_statr_test"

        statg = lfc.lfc_filestatg()
        if not lfc.lfc_statg(self.name,"",statg):
            ret, list = lfc.lfc_getreplicas([statg.guid], "")
            for i in xrange(0,len(list)):
                lfc.lfc_delreplica(statg.guid, None, list[i].sfn)
            lfc.lfc_unlink(self.name)

        self.guid=commands.getoutput('uuidgen').split('/n')[0]
        lfc.lfc_creatg(self.name, self.guid, 0664)
        lfc.lfc_addreplica(self.guid, None, os.getenv("LFC_HOST"), self.sfn, '-', 'D', "", "")
    def clean(self):
        lfc.lfc_delreplica(self.guid, None, self.sfn)
        lfc.lfc_unlink(self.name)
    def test(self):
        statg=lfc.lfc_filestatg()
        ret=lfc.lfc_statr(self.sfn, statg)
        return (statg,ret)
    def ret(self):
        retval=lfc.lfc_filestatg()
        retval.fileid=25159L
        retval.filemode=33204
        retval.nlink=1
        retval.uid=137
        retval.gid=101
        retval.filesize=0L
        retval.atime=1184059742
        retval.mtime=1171381061
        retval.ctime=1171381061
        retval.fileclass=0
        retval.status='-'
        retval.guid=self.guid
        retval.csumtype="w"
        retval.csumvalue=" "
        return retval
    def compare(self, testVal, retVal):
        (ret, retRetVal) = retVal
        (test, testRetVal) = testVal
        retval = True
        if (retRetVal == testRetVal):
            retval = retval & ( test.guid == ret.guid )
        else:
            retval = False
        return retval


class test_nonexisting_replica(_ntest):
    def info(self):
	return "Test nonexisting replica: "
    def test(self):
        statg=lfc.lfc_filestatg()
        ret=lfc.lfc_statr("sfn://test-se.cern.ch/" + lfc_vo + "/hary/lfc_statr_test1", statg)
        return (statg,ret)
    def ret(self):
        retval=lfc.lfc_filestatg()
        retval.fileid=0L
        retval.filemode=0
        retval.nlink=-1
        retval.uid=0
        retval.gid=0
        retval.filesize=0L
        retval.atime=0
        retval.mtime=0
        retval.ctime=0
        retval.fileclass=0
        retval.status=' '
        retval.guid=""
        retval.csumtype=""
        retval.csumvalue=""
        return retval

    def compare(self, testVal, retVal):
        (ret, retRetVal) = retVal
        (test, testRetVal) = testVal
        if (retRetVal == testRetVal):
            retval = True
        else:
            retval = False
        return retval


class lfc_statr_test:
    def __init__(self):
	self.name = "lfc_statr_test"
        self.tests=[test_existing_replica, test_nonexisting_replica]

    def run(self):
        retVal = True
        for testclass in self.tests:
            testInstance = testclass()
            testInstance.prepare()
            ret1 = testInstance.compare(testInstance.test(), (testInstance.ret(), testInstance.getRetVal()))
            testInstance.clean()
            retVal = retVal & ret1
            if ret1:
                print "%-60s[OK]" % testInstance.info()
            else:
                print "%-60s[FAILED]" % testInstance.info()
        return retVal


#os.environ['LFC_HOME'] = 'lxb1941.cern.ch:/grid/dteam'
#os.environ['LFC_HOST'] = 'lxb1941.cern.ch'
#testHome = "python_lfc_test"
#lfc_statr_test().run()

#os.environ['LFC_HOME'] = 'lxb1941.cern.ch:/grid/dteam'
#os.environ['LFC_HOST'] = 'lxb1941.cern.ch'
#testHome = "python_lfc_test"
#lfc_statr_test().run()

#************* Interface for SAM and Python tests ***************
print "<pre>"
print "Start test: get information about a LFC file or directory in the name server (lfc_statr) "
print "1. Prepare environment"

vo_name=os.environ['SAME_VO']
lfc_host = sys.argv[1]
lfc_home = lfc_host + ":/grid/" + vo_name

os.environ['LFC_HOME'] = lfc_home
os.environ['LFC_HOST'] = lfc_host

same_ok   = int(os.environ['SAME_OK'])
same_err  = int(os.environ['SAME_ERROR'])
lfc_vo    = "/grid/" + vo_name

print "2. Start test run()"
testHome = "python_lfc_test"
ret = lfc_statr_test().run()

print "3. Ret test code: %s" % ret
print "Exit"
print "</pre>"

if ( ret == True ):
    print "Test is OK"
    sys.exit(same_ok)
else:
    print "Test is failure"
    sys.exit(same_err)