#!/bin/bash
# Date: 01/12/2006                                                                          #
# Author: Victor Galaktionov e-mail: victor.galaktionov@cern.ch                             #
# Description of the test: Test ACL list command (get-ACL) for role-based context           #
#                                                                                           #
# Input Parameters:                                                                         #
#       - VO name                                                                           #    
#       - VO host name                                                                      #
#       - groupname                                                                         #
#       - rolename                                                                          #
#       - fake user certificate file path                                                   #
# Requisites:                                                                               #
#	- VOMS server                                                                       #
#       - 1 configured VO which is empty                                                    #
#                                                                                           #
#                                                                                           #    
#############################################################################################
#                                                                                           #
#                                                                                           #
#############################################################################################

echo "<pre>"
export voms_host=$1
source $SAME_SENSOR_HOME/tests/config_file

rm -rf $voms_tmp
rm -rf $voms_stderr
rm -rf $tempo

date
echo "<br>"
echo "Test VOMS-listACLRole:"
echo "<br>"
echo "VO=$vo_name"
echo "<br>"
echo "group=$GROUP"
echo "<br>"
echo "role=$ROLE"
echo "<br>"
echo "fake user=$USER"
echo "<br>"

USER1_SUBJECT=$(openssl x509 -in $USER1 -noout -subject | sed -e 's/^subject=[ ]*//')
USER1_ISSUER=$(openssl x509 -in $USER1 -noout -issuer | sed -e 's/^issuer=[ ]*//')

USER2_SUBJECT=$(openssl x509 -in $USER2 -noout -subject | sed -e 's/^subject=[ ]*//')
USER2_ISSUER=$(openssl x509 -in $USER2 -noout -issuer | sed -e 's/^issuer=[ ]*//')

USER3_SUBJECT=$(openssl x509 -in $USER3 -noout -subject | sed -e 's/^subject=[ ]*//')
USER3_ISSUER=$(openssl x509 -in $USER3 -noout -issuer | sed -e 's/^issuer=[ ]*//')

USER4_SUBJECT=$(openssl x509 -in $USER4 -noout -subject | sed -e 's/^subject=[ ]*//')
USER4_ISSUER=$(openssl x509 -in $USER4 -noout -issuer | sed -e 's/^issuer=[ ]*//')

echo "SCENARIO: list ACL for a non-existent group (empty VO)"
echo "<br>"

voms-admin --vo=$vo_name --host $voms_host get-ACL "/$vo_name/Role=$ROLE" > $voms_stderr
grep "org.glite.security.voms.admin.database.NoSuchRoleException" $voms_stderr > /dev/null

if [ $? == 1 ]; then
    echo "Unexpected message while listing the ACL for a non-existent role"
    echo "<br>"
    cat $voms_stderr
    echo "<br>"
    echo "Test has failed"
    echo "<br>"
    exit $SAME_ERROR
fi

echo "SCENARIO: Create group <$GROUP>, role <$ROLE> and add 3 ACL entries (for USER1, USER3, USER4 - see the configuration file)."
echo "<br>"

voms-admin --vo=$vo_name --host $voms_host create-group "/$vo_name/$GROUP"
voms-admin --vo=$vo_name --host $voms_host create-role "$ROLE"

voms-admin --vo=$vo_name --host $voms_host add-ACL-entry "/$vo_name/$GROUP/Role=$ROLE" $USER1 "CONTAINER_READ,CONTAINER_WRITE" FALSE
voms-admin --vo=$vo_name --host $voms_host add-ACL-entry "/$vo_name/$GROUP/Role=$ROLE" $USER3 "ATTRIBUTES_READ,ATTRIBUTES_WRITE" FALSE
voms-admin --vo=$vo_name --host $voms_host --nousercert add-ACL-entry "/$vo_name/$GROUP/Role=$ROLE" "$USER4_SUBJECT" "$USER4_ISSUER" "ACL_READ,ACL_WRITE" FALSE
voms-admin --vo=$vo_name --host $voms_host --nousercert remove-ACL-entry "/$vo_name/$GROUP/Role=$ROLE" "$USER4_SUBJECT" "$USER4_ISSUER" FALSE
voms-admin --vo=$vo_name --host $voms_host --nousercert add-ACL-entry "/$vo_name/$GROUP/Role=$ROLE" "$USER4_SUBJECT" "$USER4_ISSUER" "REQUESTS_READ,ACL_DEFAULT" FALSE
voms-admin --vo=$vo_name --host $voms_host get-ACL "/$vo_name/$GROUP/Role=$ROLE" > $voms_tmp

SET_PERM_LIST1=$(grep "^($USER1_SUBJECT,$USER1_ISSUER): " $voms_tmp | sed -e "s/^([^\)]*): //")
SET_PERM_LIST2=$(grep "^($USER3_SUBJECT,$USER3_ISSUER): " $voms_tmp | sed -e "s/^([^\)]*): //")
SET_PERM_LIST3=$(grep "^($USER4_SUBJECT,$USER4_ISSUER): " $voms_tmp | sed -e "s/^([^\)]*): //")

echo "Check added ACL entries"
echo "<br>"

if ! (echo $SET_PERM_LIST1 | grep CONTAINER_READ | grep -q CONTAINER_WRITE); then
   voms-admin --vo=$vo_name --host $voms_host delete-group "/$vo_name/$GROUP"
   voms-admin --vo=$vo_name --host $voms_host delete-role "$ROLE"
   echo "Error listing the ACE for $USER1_SUBJECT; missing right"
   echo "<br>"
   echo "Test has failed"
   echo "<br>"
   exit $SAME_ERROR
fi

if ! (echo $SET_PERM_LIST2 | grep ATTRIBUTES_READ | grep -q ATTRIBUTES_WRITE); then
   voms-admin --vo=$vo_name --host $voms_host delete-group "/$vo_name/$GROUP"
   voms-admin --vo=$vo_name --host $voms_host delete-role "$ROLE"
   echo "Error listing the ACE for $USER3_SUBJECT; missing right"
   echo "<br>"
   echo "Test has failed"
   echo "<br>"
   exit $SAME_ERROR
fi

if ! (echo $SET_PERM_LIST3 | grep REQUESTS_READ | grep -q ACL_DEFAULT); then
   voms-admin --vo=$vo_name --host $voms_host delete-group "/$vo_name/$GROUP"
   voms-admin --vo=$vo_name --host $voms_host delete-role "$ROLE"
   echo "Error listing the ACE for $USER4_SUBJECT; missing right"
   echo "<br>"
   echo "Test has failed"
   echo "<br>"
   exit $SAME_ERROR
fi

if ((echo $SET_PERM_LIST3 | grep -q ACL_READ) || (echo $SET_PERM_LIST3 | grep -q ACL_WRITE)); then
   voms-admin --vo=$vo_name --host $voms_host delete-group "/$vo_name/$GROUP"
   voms-admin --vo=$vo_name --host $voms_host delete-role "$ROLE"
   echo "Error listing the ACE for $USER4_SUBJECT; unexpected right"
   echo "<br>"
   echo "Test has failed"
   echo "<br>"
   exit $SAME_ERROR
fi

echo "Cleaning tasks"
echo "<br>"

voms-admin --vo=$vo_name --host $voms_host delete-group "/"$vo_name"/"$GROUP
voms-admin --vo=$vo_name --host $voms_host delete-role "$ROLE"

rm -rf $voms_tmp
rm -rf $voms_stderr
rm -rf $tempo

echo "Test OK"
echo "<pre>"
exit $SAME_OK

