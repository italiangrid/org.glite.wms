#!/bin/bash
# Date: 21/03/2007                                                                          #
# Revisesd: March 2008                                                                      #
# Author: Victor Galaktionov e-mail: victor.galaktionov@cern.ch                             #
# Description of the test: check "attribute' for voms-proxy-init                            #
#                                                                                           #
# Input Parameters:                                                                         #
#       - VO name                                                                           #
#       - VO host name                                                                      #
#       - User certificate                                                                  #
# Requisites:                                                                               #
#       - VOMS server                                                                       #
#       - 1 configured VO                                                                   #
#       - user certificate                                                                  #
#       - user key                                                                          #
#       - vomses:  VOMS description                                                         # 
#                                                                                           #
#############################################################################################
#                                                                                           #
# Note on security issues: the host and user certificates used by this test are dummy ones  #
# provided by the test utils package.                                                       #
#                                                                                           #
#############################################################################################
Groups=( "group1" "group2" "group3" "group4" "group5" )
Roles=( "Role1" "Role2" "Role3" "Role4" "Role5" )

function crGroups {
for group in ${Groups[*]}
do
    groupi="/$vo_name/$group"
    echo "Create group: $groupi"
    voms-admin --vo=$vo_name --host $voms_host create-group "$groupi"
done
}
function delGroups {
for group in ${Groups[*]}
do
    groupi="/$vo_name/$group"
    #echo "Delete group: $groupi"
    voms-admin --vo=$vo_name --host $voms_host delete-group $groupi
done
}
function crRoles {
for rolei in ${Roles[*]}
do
    #echo "Create Role=$rolei"
    voms-admin --vo=$vo_name --host $voms_host create-role $rolei
done
}
function delRoles {
for rolei in ${Roles[*]}
do
    #echo "Delete Role=$rolei"
    voms-admin --vo=$vo_name --host $voms_host delete-role $rolei
done
}
function clearTask {
    echo "Delete user, groups, roles"
    voms-admin --vo=$vo_name --host $voms_host --nousercert delete-user "$USER_SUBJECT" "$USER_ISSUER" 
    delGroups
    delRoles
}
echo "<pre>"
export voms_host=$1
source $SAME_SENSOR_HOME/tests/pr_config_file

rm -rf $voms_tmp

echo
date
echo "VOMS-PROXY-INIT: check option: voms-proxy-init with attributes"
echo "VO: $vo_name"
echo "VOMS: $VOMSES"
echo "cert: $USERCERT"
echo "key: $USERKEY"
echo "PWS: $PWS"
NG=${#Groups[*]}

echo "1. Create new user"
#voms-admin --vo=$vo_name -h $voms_host delete-user $USER
voms-admin --vo=$vo_name --host $voms_host create-user $USER
USER_SUBJECT=$(openssl x509 -in $USER -noout -subject | sed -e 's/^subject=[ ]*//')
USER_ISSUER=$(openssl x509 -in $USER -noout -issuer | sed -e 's/^issuer=[ ]*//')
echo "US=$USER_SUBJECT"
echo "UI=$USER_ISSUER"

#voms-proxy-init -voms $vo_name -vomses $VOMSES -cert $USERCERT -key $USERKEY -pwstdin < $PWS

echo "List users:"
voms-admin --vo=$vo_name --host $voms_host list-users

echo "1.1. Create $NG groups"

crGroups
echo "List groups"
voms-admin --vo=$vo_name --host $voms_host list-groups

echo "1.2. Create $NG Roles"

crRoles
echo "List Roles"
voms-admin --vo=$vo_name --host $voms_host list-roles 


echo "1.3. Add user to groups as group member"

for group in ${Groups[*]}
do
    groupi="/$vo_name/$group"
    echo "Add member to group: $groupi"
    voms-admin --vo=$vo_name --host $voms_host --nousercert add-member $groupi "$USER_SUBJECT" "$USER_ISSUER" 
done


echo "1.3.1. List user groups:"
voms-admin --vo=$vo_name --host $voms_host --nousercert list-user-groups "$USER_SUBJECT" "$USER_ISSUER"

echo "1.3.2. Check members for each group - list members"
for group in ${Groups[*]}
do
    groupi="/$vo_name/$group"
    echo "Members in  group: $groupi"
    voms-admin --vo=$vo_name --host $voms_host list-members $groupi
done


echo "1.4. Assign Roles to users in 5 groups"

co=0
for group in ${Groups[*]}
do
    role=${Roles[co]}
    groupi="/$vo_name/$group"
    echo "Assign role=$role in  group $groupi to user"
    #voms-admin --vo=$vo_name --host $voms_host assign-role $groupi $role $USER
    voms-admin --vo=$vo_name --host $voms_host --nousercert assign-role $groupi $role "$USER_SUBJECT" "$USER_ISSUER"
    let co=co+1
done

echo "1.4.1. List user roles:"
voms-admin --vo=$vo_name --host $voms_host --nousercert list-user-roles "$USER_SUBJECT" "$USER_ISSUER"

echo "2. Destroy, Create and check proxy"
voms-proxy-destroy

echo "2.1. Create proxy"
voms-proxy-init -voms $vo_name -vomses $VOMSES -cert $USERCERT -key $USERKEY -pwstdin < $PWS
if [ $? = 0 ]; then
   echo "Exit code  is OK"
else
    echo "Test is failed"
    clearTask        
    exit $SAME_ERROR
fi
               
#echo "2.2.Extract by openssl from usercert.pem"
#user_subject=`openssl x509 -in $USER -noout -subject | cut -d" " -f2-5`
#echo "DN=$user_subject"

echo "2.2. Check user DN"
voms-proxy-info -all > $voms_tmp

cat $voms_tmp
grep "$USER_SUBJECT" $voms_tmp

if [ $? == 1 ]; then
    echo "Test has failed"
    clearTask
    exit $SAME_ERROR
fi

echo "Check result -fqan"

voms-proxy-info -fqan > $voms_tmp

grep "$vo_name/Role=NULL/Capability=NULL" $voms_tmp
if [ $? == 1 ]; then
	echo "Test has failed"
	clearTask
	exit $SAME_ERROR
fi

for group in ${Groups[*]}
do
    groupi="/$vo_name/$group"
    grep "$groupi/Role=NULL/Capability=NULL" $voms_tmp
	if [ $? == 1 ]; then
	    echo "Test has failed"
	    clearTask
	    exit $SAME_ERROR
	fi
done


echo "Test is OK"
echo "Clear task"
clearTask

echo "</pre>"
exit $SAME_OK                  
