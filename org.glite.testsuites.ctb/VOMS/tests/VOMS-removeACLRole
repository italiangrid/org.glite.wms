#!/bin/bash
# Date: 01/12/2006                                                                          #
# Author: Victor Galaktionov e-mail: victor.galaktionov@cern.ch                             #
# Description of the test: Remove ACL entry for a role-based context                        #
#                                                                                           #
# Input Parameters:                                                                         #
#       - VO name                                                                           #
#       - VO host name                                                                      #
#       - groupname                                                                         #
#       - rolename                                                                          "
#       - fake user certificate file path                                                   #
# Requisites:                                                                               #
#	- VOMS server                                                                       #
#       - 1 configured VO which is empty                                                    #
#                                                                                           #
#                                                                                           #    
#############################################################################################
#                                                                                           #
#                                                                                           #
#############################################################################################

echo "<pre>"
export voms_host=$1
source $SAME_SENSOR_HOME/tests/config_file

rm -rf $voms_tmp
rm -rf $voms_stderr
rm -rf $tempo

date
echo "<br>"
echo "Test VOMS-removeACLGroup:"
echo "<br>"
echo "VO=$vo_name"
echo "<br>"
echo "group=$GROUP"
echo "<br>"
echo "role=$ROLE"
echo "<br>"
echo "fake user=$USER"
echo "<br>"

USER1_SUBJECT=$(openssl x509 -in $USER1 -noout -subject | sed -e 's/^subject=[ ]*//')
USER1_ISSUER=$(openssl x509 -in $USER1 -noout -issuer | sed -e 's/^issuer=[ ]*//')

USER2_SUBJECT=$(openssl x509 -in $USER2 -noout -subject | sed -e 's/^subject=[ ]*//')
USER2_ISSUER=$(openssl x509 -in $USER2 -noout -issuer | sed -e 's/^issuer=[ ]*//')

USER3_SUBJECT=$(openssl x509 -in $USER3 -noout -subject | sed -e 's/^subject=[ ]*//')
USER3_ISSUER=$(openssl x509 -in $USER3 -noout -issuer | sed -e 's/^issuer=[ ]*//')

USER4_SUBJECT=$(openssl x509 -in $USER4 -noout -subject | sed -e 's/^subject=[ ]*//')
USER4_ISSUER=$(openssl x509 -in $USER4 -noout -issuer | sed -e 's/^issuer=[ ]*//')

echo "SCENARIO: Try to remove an ACL entry for a non-existent role (empty VO)"
echo "<br>"

voms-admin --vo=$vo_name --host $voms_host remove-ACL-entry "/$vo_name/Role=$ROLE" $USER FALSE > $voms_stderr
grep "org.glite.security.voms.admin.database.NoSuchRoleException" $voms_stderr > /dev/null

if [ $? == 1 ]; then
    echo "Unexpected behavior when trying to remove an ACL entry for a non-existent role."
    echo "<br>"
    cat $voms_stderr
    echo "<br>"
    echo "Test has failed"
    echo "<br>"
    exit $SAME_ERROR
fi

echo "SCENARIO: Create a group hierarchy /$vo_name/$GROUP/$GROUP and two roles (${ROLE}1 and ${ROLE}2), ACL entries and test the removal from role-based context"
echo "<br>"

voms-admin --vo=$vo_name --host $voms_host create-group "/$vo_name/$GROUP"
voms-admin --vo=$vo_name --host $voms_host create-group "/$vo_name/$GROUP/$GROUP"

voms-admin --vo=$vo_name --host $voms_host create-role "${ROLE}1"
voms-admin --vo=$vo_name --host $voms_host create-role "${ROLE}2"

# Add ACL entry for USER1, context is the group and its subgroup. Thus this ACL entries will be set for the two roles too inside the group contexts.
voms-admin --vo=$vo_name --host $voms_host --nousercert add-ACL-entry "/$vo_name/$GROUP" "$USER1_SUBJECT" "$USER1_ISSUER" "CONTAINER_READ,CONTAINER_WRITE" FALSE
voms-admin --vo=$vo_name --host $voms_host --nousercert add-ACL-entry "/$vo_name/$GROUP/$GROUP" "$USER1_SUBJECT" "$USER1_ISSUER" "ACL_READ,ACL_WRITE" FALSE

# Now remove the ACL entry for USER1 from the ${ROLE}1 context under /$vo_name/$GROUP with propagation disabled. It should still exists in the ${ROLE}2 contexts under /$vo_name/$GROUP and in both ${ROLE}1 and ${ROLE}2 contexts under /$vo_name/$GROUP/$GROUP.
voms-admin --vo=$vo_name --host $voms_host --nousercert remove-ACL-entry "/$vo_name/$GROUP/Role=${ROLE}1" "$USER1_SUBJECT" "$USER1_ISSUER" FALSE

# Define a cleanup function
function doCleanUp {
    voms-admin --vo=$vo_name --host $voms_host delete-group "/"$vo_name"/"$GROUP/$GROUP
    voms-admin --vo=$vo_name --host $voms_host delete-group "/"$vo_name"/"$GROUP
    voms-admin --vo=$vo_name --host $voms_host delete-role "${ROLE}1"
    voms-admin --vo=$vo_name --host $voms_host delete-role "${ROLE}2"
}

# Define a function that inspects the ACL entries for USER1 for the whole hierarchy.
function checkHierarchy {

   echo "<BR>Checking ACL for /$vo_name/$GROUP"
   voms-admin --vo=$vo_name --host $voms_host get-ACL "/$vo_name/$GROUP" > $voms_tmp

   if ! (grep -q "^($USER1_SUBJECT,$USER1_ISSUER): " $voms_tmp); then
       doCleanUp
       echo "Error while removing an ACL entry from role-based context /$vo_name/$GROUP/Role=${ROLE}1; The ACE was removed from the group context /$vo_name/$GROUP too. Stop."
       echo "<br>"
       cat $voms_tmp
       echo "<br>"
       echo "Test has failed"
       echo "<br>"
       exit $SAME_ERROR
   fi

   echo "<BR>Checking ACL for /$vo_name/$GROUP/Role=${ROLE}1"
   voms-admin --vo=$vo_name --host $voms_host get-ACL "/$vo_name/$GROUP/Role=${ROLE}1" > $voms_tmp

   if grep -q "^($USER1_SUBJECT,$USER1_ISSUER): " $voms_tmp; then
       doCleanUp
       echo "Error while removing an ACL entry from role-based context /$vo_name/$GROUP/Role=${ROLE}1; The ACE was not removed successfully. Stop."
       echo "<br>"
       cat $voms_tmp
       echo "<br>"
       echo "Test has failed"
       echo "<br>"
       exit $SAME_ERROR
   fi

   echo "<BR>Checking ACL for /$vo_name/$GROUP/Role=${ROLE}2"
   voms-admin --vo=$vo_name --host $voms_host get-ACL "/$vo_name/$GROUP/Role=${ROLE}2" > $voms_tmp

   if ! (grep -q "^($USER1_SUBJECT,$USER1_ISSUER): " $voms_tmp); then
       doCleanUp
       echo -n "Error while removing an ACL entry from role-based context /$vo_name/$GROUP/Role=${ROLE}1; "
       echo "The ACE was also removed from role-based context /$vo_name/$GROUP/Role=${ROLE}2. Stop."
       echo "<br>"
       cat $voms_tmp
       echo "<br>"
       echo "Test has failed"
       echo "<br>"
       exit $SAME_ERROR
   fi

   echo "<BR>Checking ACL for /$vo_name/$GROUP/$GROUP"
   voms-admin --vo=$vo_name --host $voms_host get-ACL "/$vo_name/$GROUP/$GROUP" > $voms_tmp

   if ! (grep -q "^($USER1_SUBJECT,$USER1_ISSUER): " $voms_tmp); then
       doCleanUp
       echo -n "Error while removing an ACL entry from role-based context /$vo_name/$GROUP/Role=${ROLE}1; "
       echo "The ACE was also removed from group-based context /$vo_name/$GROUP/$GROUP. Stop."
       echo "<br>"
       cat $voms_tmp
       echo "<br>"
       echo "Test has failed"
       echo "<br>"
       exit $SAME_ERROR
   fi

   echo "<BR>Checking ACL for /$vo_name/$GROUP/$GROUP/Role=${ROLE}1"
   voms-admin --vo=$vo_name --host $voms_host get-ACL "/$vo_name/$GROUP/$GROUP/Role=${ROLE}1" > $voms_tmp

   if ! (grep -q "^($USER1_SUBJECT,$USER1_ISSUER): " $voms_tmp); then
       doCleanUp
       echo -n "Error while removing an ACL entry from role-based context /$vo_name/$GROUP/Role=${ROLE}1; "
       echo "The ACE was also removed from role-based context /$vo_name/$GROUP/$GROUP/Role=${ROLE}1. Stop."
       echo "<br>"
       cat $voms_tmp
       echo "<br>"
       echo "Test has failed"
       echo "<br>"
       exit $SAME_ERROR
   fi

   echo "<BR>Checking ACL for /$vo_name/$GROUP/$GROUP/Role=${ROLE}2"
   voms-admin --vo=$vo_name --host $voms_host get-ACL "/$vo_name/$GROUP/$GROUP/Role=${ROLE}2" > $voms_tmp

   if ! (grep -q "^($USER1_SUBJECT,$USER1_ISSUER): " $voms_tmp); then
       doCleanUp
       echo -n "Error while removing an ACL entry from role-based context /$vo_name/$GROUP/Role=${ROLE}1; "
       echo "The ACE was also removed from role-based context /$vo_name/$GROUP/$GROUP/Role=${ROLE}1. Stop."
       echo "<br>"
       cat $voms_tmp
       echo "<br>"
       echo "Test has failed"
       echo "<br>"
       exit $SAME_ERROR
   fi
}

checkHierarchy

echo "SCENARIO: Create a group hierarchy /$vo_name/$GROUP/$GROUP and two roles (${ROLE}1 and ${ROLE}2), ACL entries and test the removal from role-based context; PROPAGATE is enabled. The result should be the same because the context is role-based."
echo "<br>"

doCleanUp

voms-admin --vo=$vo_name --host $voms_host create-group "/$vo_name/$GROUP"
voms-admin --vo=$vo_name --host $voms_host create-group "/$vo_name/$GROUP/$GROUP"

voms-admin --vo=$vo_name --host $voms_host create-role "${ROLE}1"
voms-admin --vo=$vo_name --host $voms_host create-role "${ROLE}2"

# Add ACL entry for USER1, context is the group and its subgroup. Thus this ACL entries will be set for the two roles too inside the group contexts.
voms-admin --vo=$vo_name --host $voms_host --nousercert add-ACL-entry "/$vo_name/$GROUP" "$USER1_SUBJECT" "$USER1_ISSUER" "CONTAINER_READ,CONTAINER_WRITE" FALSE
voms-admin --vo=$vo_name --host $voms_host --nousercert add-ACL-entry "/$vo_name/$GROUP/$GROUP" "$USER1_SUBJECT" "$USER1_ISSUER" "ACL_READ,ACL_WRITE" FALSE

# Now remove the ACL entry for USER1 from the ${ROLE}1 context under /$vo_name/$GROUP with propagation enabled. It should still exists in the ${ROLE}2 contexts under /$vo_name/$GROUP and in both ${ROLE}1 and ${ROLE}2 contexts under /$vo_name/$GROUP/$GROUP.
voms-admin --vo=$vo_name --host $voms_host --nousercert remove-ACL-entry "/$vo_name/$GROUP/Role=${ROLE}1" "$USER1_SUBJECT" "$USER1_ISSUER" TRUE

echo "<BR>Checking ACL for /$vo_name/$GROUP"
voms-admin --vo=$vo_name --host $voms_host get-ACL "/$vo_name/$GROUP" > $voms_tmp
checkHierarchy

echo "<BR>SCENARIO: Check the effect of ACL entry removal for a group on its role contexts."

doCleanUp

voms-admin --vo=$vo_name --host $voms_host create-group "/$vo_name/$GROUP"
voms-admin --vo=$vo_name --host $voms_host create-group "/$vo_name/$GROUP/$GROUP"

voms-admin --vo=$vo_name --host $voms_host create-role "${ROLE}1"
voms-admin --vo=$vo_name --host $voms_host create-role "${ROLE}2"

# Add ACL entry for USER1, context is the group and its subgroup with propagation enabled.. Thus this ACL entries will be set for the two roles too inside the group contexts, the subgroup and its two subroles.
voms-admin --vo=$vo_name --host $voms_host --nousercert add-ACL-entry "/$vo_name/$GROUP" "$USER1_SUBJECT" "$USER1_ISSUER" "CONTAINER_READ,CONTAINER_WRITE" TRUE

# Add additional PERMISSION in the ACL lists of the four role contexts
voms-admin --vo=$vo_name --host $voms_host --nousercert add-ACL-entry "/$vo_name/$GROUP/Role=${ROLE}1" "$USER1_SUBJECT" "$USER1_ISSUER" "ACL_READ,ACL_WRITE" FALSE

# Add additional PERMISSION in the ACL lists of the four role contexts
voms-admin --vo=$vo_name --host $voms_host --nousercert add-ACL-entry "/$vo_name/$GROUP/Role=${ROLE}1" "$USER1_SUBJECT" "$USER1_ISSUER" "ACL_DEFAULT,MEMBERSHIP_WRITE" FALSE
voms-admin --vo=$vo_name --host $voms_host --nousercert add-ACL-entry "/$vo_name/$GROUP/$GROUP/Role=${ROLE}1" "$USER1_SUBJECT" "$USER1_ISSUER" "ALL" FALSE
voms-admin --vo=$vo_name --host $voms_host --nousercert add-ACL-entry "/$vo_name/$GROUP/Role=${ROLE}2" "$USER1_SUBJECT" "$USER1_ISSUER" "ACL_DEFAULT,ATTRIBUTES_WRITE" FALSE
voms-admin --vo=$vo_name --host $voms_host --nousercert add-ACL-entry "/$vo_name/$GROUP/$GROUP/Role=${ROLE}2" "$USER1_SUBJECT" "$USER1_ISSUER" "REQUESTS_WRITE,ATTRIBUTES_READ" FALSE

# Now remove the ACL entry for USER1 from the ACL of /$vo_name/$GROUP context with propagation enabled. It should be remove from also from: /$vo_name/$GROUP/${ROLE}1, /$vo_name/$GROUP/${ROLE}2, /$vo_name/$GROUP/$GROUP, /$vo_name/$GROUP/$GROUP/${ROLE}1, /$vo_name/$GROUP/$GROUP/${ROLE}2
voms-admin --vo=$vo_name --host $voms_host --nousercert remove-ACL-entry "/$vo_name/$GROUP" "$USER1_SUBJECT" "$USER1_ISSUER" TRUE

function checkHierarchy2 {

   echo "<BR>Checking ACL for /$vo_name/$GROUP"
   voms-admin --vo=$vo_name --host $voms_host get-ACL "/$vo_name/$GROUP" > $voms_tmp

   if grep -q "^($USER1_SUBJECT,$USER1_ISSUER): " $voms_tmp; then
       doCleanUp
       echo "Error: ACL entry not removed from /$vo_name/$GROUP. Stop."
       echo "<br>"
       cat $voms_tmp
       echo "<br>"
       echo "Test has failed"
       echo "<br>"
       exit $SAME_ERROR
   fi

   echo "<BR>Checking ACL for /$vo_name/$GROUP/Role=${ROLE}1"
   voms-admin --vo=$vo_name --host $voms_host get-ACL "/$vo_name/$GROUP/Role=${ROLE}1" > $voms_tmp

   if grep -q "^($USER1_SUBJECT,$USER1_ISSUER): " $voms_tmp; then
       doCleanUp
       echo "Error: ACL entry not removed from /$vo_name/$GROUP/Role=${ROLE}1. Stop."
       echo "<br>"
       cat $voms_tmp
       echo "<br>"
       echo "Test has failed"
       echo "<br>"
       exit $SAME_ERROR
   fi

   echo "<BR>Checking ACL for /$vo_name/$GROUP/Role=${ROLE}2"
   voms-admin --vo=$vo_name --host $voms_host get-ACL "/$vo_name/$GROUP/Role=${ROLE}2" > $voms_tmp

   if grep -q "^($USER1_SUBJECT,$USER1_ISSUER): " $voms_tmp; then
       doCleanUp
       echo "Error: ACL entry not removed from /$vo_name/$GROUP/Role=${ROLE}2. Stop."
       echo "<br>"
       cat $voms_tmp
       echo "<br>"
       echo "Test has failed"
       echo "<br>"
       exit $SAME_ERROR
   fi

   echo "<BR>Checking ACL for /$vo_name/$GROUP/$GROUP"
   voms-admin --vo=$vo_name --host $voms_host get-ACL "/$vo_name/$GROUP/$GROUP" > $voms_tmp

   if grep -q "^($USER1_SUBJECT,$USER1_ISSUER): " $voms_tmp; then
       doCleanUp
       echo "Error: ACL entry not removed from /$vo_name/$GROUP/$GROUP. Stop."
       echo "<br>"
       cat $voms_tmp
       echo "<br>"
       echo "Test has failed"
       echo "<br>"
       exit $SAME_ERROR
   fi

   echo "<BR>Checking ACL for /$vo_name/$GROUP/$GROUP/Role=${ROLE}1"
   voms-admin --vo=$vo_name --host $voms_host get-ACL "/$vo_name/$GROUP/$GROUP/Role=${ROLE}1" > $voms_tmp

   if grep -q "^($USER1_SUBJECT,$USER1_ISSUER): " $voms_tmp; then
       doCleanUp
       echo "Error: ACL entry not removed from /$vo_name/$GROUP/$GROUP/Role=${ROLE}1. Stop."
       echo "<br>"
       cat $voms_tmp
       echo "<br>"
       echo "Test has failed"
       echo "<br>"
       exit $SAME_ERROR
   fi

   echo "<BR>Checking ACL for /$vo_name/$GROUP/$GROUP/Role=${ROLE}2"
   voms-admin --vo=$vo_name --host $voms_host get-ACL "/$vo_name/$GROUP/$GROUP/Role=${ROLE}2" > $voms_tmp

   if grep -q "^($USER1_SUBJECT,$USER1_ISSUER): " $voms_tmp; then
       doCleanUp
       echo "Error: ACL entry not removed from /$vo_name/$GROUP/$GROUP/Role=${ROLE}2. Stop."
       echo "<br>"
       cat $voms_tmp
       echo "<br>"
       echo "Test has failed"
       echo "<br>"
       exit $SAME_ERROR
   fi
}

checkHierarchy2

echo "Cleaning tasks."
echo "<br>"

doCleanUp

rm -rf $voms_tmp
rm -rf $voms_stderr
rm -rf $tempo

echo "Test OK"
echo "</pre>"
exit $SAME_OK

