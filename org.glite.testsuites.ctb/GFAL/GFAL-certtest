#!/bin/sh
##############################################################################
# Copyright (c) Members of the EGEE Collaboration. 2004.
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS
# OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################
#
# AUTHORS: Gianni Pucciani, CERN
#
##############################################################################

showUsage ()
{
 echo
 echo "Usage:  $0 [-f <conf.file>] [--sehost <SE HOST>] [-h|--help] "
 echo "  <conf.file> Configuration file, default is FTS-certconfig"
 echo "  <SE HOST> Target SE for the tests, default is \$SE_HOST"

 echo
}

exitFailure ()
{
echo "------------------------------------------------"
echo "END `date`"
echo "-TEST FAILED-"
exit -1
}

#######################
#Parsing the arguments#
#######################
if [ "$1" = "-h" ] || [ "$1" = "-help" ] || [ "$1" = "--help" ]; then
  showUsage
  exit 2
fi

#Parse arguments
while [ $# -ne 0 ]; do
  case "$1" in
    -f)
      shift
      conffile=$1
      shift
      ;;
    '--sehost')
      shift
      SE_HOST_ARG=$1
      shift
      ;;
    *|'')
      echo "Unknown option '$1'"
      exit
      ;;
  esac
done

###################################
# Check for environment variables #
###################################

if [ "x$conffile" = "x" ]; then
  #Default value
  conffile="./GFAL-certconfig"
fi
echo "Using $conffile"

if [ -e $conffile ]; then
  source $conffile
else
  echo "The file $conffile must be sourced in order to run the tests"
  exitFailure
fi

if [ -n "$SE_HOST_ARG" ]; then
  sehost=$SE_HOST_ARG
elif [ -n "$SE_HOST" ]; then
  sehost=$SE_HOST
else
  echo "You ned to set SE_HOST in GFAL-certconfig or use the --sehost argument"
  exitFailure
fi


if [ -z "$VO" ]; then
  echo "You need to set VO in order to run the tests"
  exitFailure
fi

if [ -z "$LFC_HOST" ]; then
  echo "You need to set LFC_HOST in order to run the tests"
  exitFailure
fi

#if [ -z "$SE_HOST" ]; then
#  echo "You need to set SE_HOST in order to run the tests"
#  exitFailure
#fi

####################################
# Create a directory for log files #
####################################

id=`date +%y%m%d%H%M%S`
if [ -z "$LOGSLOCATION" ]; then
  cp=`pwd`
  loglocation=$cp/logs_$id
  mkdir -p $loglocation
else
  loglocation=$LOGSLOCATION/logs_$id
  mkdir -p $loglocation
fi

if [ ! -d $loglocation ];then
  echo   "Error while creating log directory $loglocation"
  exitFailure
else
  echo "Log files will be stored in $loglocation"
fi

#########
# START #
#########

echo "START `date` "
echo `rpm -qa | grep -i gfal`
echo "SE: $sehost"
echo "------------------------------------------------"

####################################
# Checking if there is valid proxy #
####################################

ProxyExist=`voms-proxy-info 2>/dev/null | grep timeleft | wc -l`

ProxyExpired=`voms-proxy-info 2>/dev/null | grep  "timeleft  : 0:00:00" | wc -l`

if [ $ProxyExist -gt 0 -a $ProxyExpired -eq 0 ]; then
  #nop
  :
else
  echo "Valid proxy is needed for this test!"
  if [ $ProxyExpired -gt 0 ]; then
    echo "Proxy credential expired!"
  fi
  exitFailure
fi

########################
# Launch all the tests #
########################

declare -a tests_failed
failed=no

if [ x$GFAL_BASIC == "xyes" ]; then
  
  echo "*Executing GFAL BASIC tests"
  testdir=./tests
  tests_list=( test-gfal.sh )

  pushd $testdir >> /dev/null
  touch testfile 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "GFAL test directory is not writable, if you are on AFS be sure to have a valid token"
    exitFailure
  fi

  for item in ${tests_list[*]}
  do
    rm -rf $loglocation/${item}_result.txt testfile
    echo "Executing $item"
    echo "./$item -v $VO -l $LFC_HOST -d $sehost " > $loglocation/${item}_result.txt
    ./$item -v $VO -l $LFC_HOST -d $sehost >> $loglocation/${item}_result.txt 2>&1
    res=$?
    grep '\-TEST FAILED\-' $loglocation/${item}_result.txt >> /dev/null
    if [ "$?" = 0 -o "$res" != 0 ]; then
      echo "$item FAILED"
      failed=yes
      tests_failed=( "${tests_failed[@]}" "$item" )
    else
      echo "$item PASSED"
    fi
  done
  popd >> /dev/null
else
 echo "*WARNING: GFAL Basic tests skipped"
fi

#########################
# Analyse tests outcome #
#########################
if [ $failed = "yes" ]; then

  echo "TEST_FAILED"
  echo "The following tests failed:"
  for item in ${tests_failed[*]}
  do
    echo "$item: results in tests/${item}_result.txt"
  done
else
    echo "TEST_PASSED"
fi

##############
# PYTHON API #
##############
declare -a tests_failed
failed=no

if [ x$GFAL_PYTHON_API == "xyes" ]; then
  
  echo "*Executing GFAL Python API tests"
  testdir=./tests/API-python/

  pushd $testdir >> /dev/null
  tests_list=( GFAL_abortfiles GFAL_access GFAL_bringonline GFAL_chmod GFAL_close GFAL_closedir GFAL_creat GFAL_deletesurls GFAL_get GFAL_getstatus GFAL_ls GFAL_lseek GFAL_mkdir GFAL_open GFAL_opendir GFAL_pin GFAL_prestage GFAL_prestagestatus GFAL_read GFAL_readdir GFAL_release GFAL_rename GFAL_rmdir GFAL_set_xfer_done GFAL_set_xfer_running GFAL_stat GFAL_turlsfromsurls GFAL_unlink GFAL_write )
  touch testfile 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "GFAL test directory is not writable, if you are on AFS be sure to have a valid token"
    exitFailure
  fi
  
  for item in ${tests_list[*]}
  do
    rm -rf $loglocation/${item}_result.txt testfile
    echo "Executing $item"
    echo "./$item $sehost " > $loglocation/${item}_result.txt
    ./$item $sehost >> $loglocation/${item}_result.txt 2>&1
    res=$?
    if [ "$res" != 0 ]; then
      echo "$item FAILED"
      failed=yes
      tests_failed=( "${tests_failed[@]}" "$item" )
    else
      if [ $item == GFAL_mkdir ] || [ $item == GFAL_rmdir ]; then
        echo "$item PASSED with warnings, bug# 52502"
      else
        echo "$item PASSED"
      fi
    fi
  done
  popd >> /dev/null
else
 echo "*WARNING: GFAL Python API tests skipped"
fi

echo "------------------------------------------------"
echo "END `date`"

#########################
# Analyse tests outcome #
#########################

if [ $failed = "yes" ]; then

  echo "TEST_FAILED"
  echo "The following tests failed:"
  for item in ${tests_failed[*]}
  do
    echo "$item: results in $loglocation/${item}_result.txt"
  done
  exit 1
else
  echo "TEST_PASSED (check bug# 52502 though)"
  exit 0
fi

