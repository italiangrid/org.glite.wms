#!/usr/bin/env python
# change access mode of a file/directory (gfal_chmod)

import os,sys,errno,lfc
sys.path.append("/opt/lcg/lib/python2.3/site-packages/")
sys.path.append("/opt/lcg/lib64/python2.4/site-packages/")
import gfal
from testClass import _test, _ntest
global prot
global vo_name
global path
global flag
flag = 0

#=== FUNCTION ================================================================
# Prints the usage
#=============================================================================

def usage():
    print "Usage:  " + sys.argv[0] + " <SE>"

#=== FUNCTION ================================================================
# Checks for a valid proxy.
#=============================================================================

def check_proxy():
    vo_name = result = os.popen("voms-proxy-info --vo").read()[:-1]
    if not vo_name:
        print "Error: Couldn't find a valid proxy."
        sys.exit(1)

check_proxy()
vo_name = result = os.popen("voms-proxy-info --vo").read()[:-1]

#=== FUNCTION ================================================================
# Parse input arguments 
#=============================================================================
def check_arguments(): 
	if (len(sys.argv) != 2):
        	usage()
        	sys.exit(1)

check_arguments()    

se = sys.argv[1]

infosys = result = os.popen("echo $LCG_GFAL_INFOSYS").read()[:-1]

setype = result = os.popen("ldapsearch -x -H ldap://" + infosys + " -b 'mds-vo-name=local,o=grid' -LLL '(&(objectClass=GlueSEControlProtocol)(GlueChunkKey=GlueSEUniqueid=" + se + "))' | grep 'GlueSEControlProtocolType' | awk 'BEGIN { FS = \" \" } ; {print $2 }' |uniq").read()[:-1]

#path = result = os.popen("ldapsearch -x -H ldap://" + infosys + " -b 'mds-vo-name=local,o=grid' -LLL '(&(GlueSALocalID:dn:=" + vo_name + ")(GlueSEUniqueID:dn:=" + se + "))' GlueSAPath | awk 'BEGIN { FS = \"GlueSAPath: \" } ; {print $2 }'").read()[2:-2]

path = "grid/" + vo_name + ""

#print path

path1 =  result = os.popen("ldapsearch -x -H ldap://" + infosys + " -b 'mds-vo-name=local,o=grid' -LLL '(&(GlueSALocalID:dn:=" + vo_name + ")(GlueSEUniqueID:dn:=" + se + "))' GlueSAPath | awk 'BEGIN { FS = \"GlueSAPath: \" } ; {print $2 }' |awk 'BEGIN { FS = \"/\" } ; {print $2 }'").read()[2:-2]

lfc_host = result = os.popen("lcg-infosites --vo "+ vo_name +"  -f lfc").read()[:-1]

os.environ['LFC_HOST'] = lfc_host

VO = result = os.popen("echo dteam | tr 'a-z' 'A-Z'").read()[:-1]

os.environ["VO_"+ VO +"_DEFAULT_SE"] = se 

defa = result = os.popen("echo $VO_"+ VO +"_DEFAULT_SE").read()[:-1]

#print ("defa", defa)

#=== FUNCTION ================================================================
# test preperation
#=============================================================================
class test_rename_ok(_test):
    def info(self):
        return "gfal_rename: rename a file (gfal_rename)"
    def test(self):
	self.name = prot + path + "/gfal_rename_test"
	self.name1 = prot +  path + "/gfal_rename1_test"
	ret = gfal.gfal_creat(self.name, 0775)
	ret = gfal.gfal_rename(self.name, self.name1)
	error1 = gfal.gfal_get_errno()
	code = 0
	print ("return",ret)
	print ("gfal.gfal_get_errno", gfal.gfal_get_errno())
	print "http://savannah.cern.ch/bugs/?52813"
	if (error1 == code):
                ret = True
        else:
                ret = False
        return ret
    def clean(self):
        gfal.gfal_unlink(self.name1)
    
class test_EACCES(_ntest):
    def info(self):
        return "gfal_rename errors: Access denied (EACCES)"
    def test(self):
        self.name = prot + path  
	self.name1 = prot + path + vo_name
        ret = gfal.gfal_rename(self.name, self.name1)
	error1 = gfal.gfal_get_errno()
	print ("return", ret)
	print ("gfal.gfal_get_errno", gfal.gfal_get_errno())
        print ("EACCES", errno.EACCES)
        code = errno.EACCES
        if (error1 == code):
                ret = True
        else:
                ret = False
        return ret
   # def clean(self):
    #    gfal.gfal_unlink(self.name)

class test_ENOENT(_ntest):
    def info(self):
        return "gfal_rename errors: A component does not exist (ENOENT)"
    def test(self):
        self.name =  prot + path + vo_name
        ret = gfal.gfal_rename(self.name, self.name)
	error1 = gfal.gfal_get_errno()
	print ("return", ret)
	print ("gfal.gfal_get_errno", gfal.gfal_get_errno())
	print ("ENOENT", errno.ENOENT)
        code = errno.ENOENT
        if (error1 == code):
                ret = True
        else:
                ret = False
        return ret
    #def clean(self):
#	gfal.gfal_unlink(self.name)
	
class test_ENOTDIR(_ntest):
    def info(self):
        return "gfal_creat errors: a component is not a directory (ENOTDIR)"
    def test(self):
	self.name = prot + se + path + vo_name + "/gfal/gfal_creat_test"
        gfal.gfal_creat(os.path.dirname(self.name),0755)
	ret = gfal.gfal_creat(self.name,0755)
	print ("gfal.gfal_get_errno", gfal.gfal_get_errno())
        print ("ENOTDIR", errno.ENOTDIR)
	error1 = gfal.gfal_get_errno()
        code = errno.ENOTDIR
        if (error1 == code):
                ret = True
        else:
                ret = False
        return ret
    def clean(self):
	gfal.gfal_unlink(os.path.dirname(self.name))
	
class test_EFAULT(_ntest):
    def info(self):
        return "gfal_rename errors: name is a NULL pointer (EFAULT)"
    def test(self):
        self.name = prot + se + path + vo_name 
        ret = gfal.gfal_rename(None,None)
	print ("return", ret)
	print ("gfal.gfal_get_errno", gfal.gfal_get_errno())
        print ("EFAULT", errno.EFAULT)
	error1 = gfal.gfal_get_errno()
        code = errno.EFAULT
        if (error1 == code):
                ret = True
        else:
                ret = False
        return ret
#    def clean(self):
#        gfal.gfal_unlink(self.name)

class test_EINVAL(_ntest):
    def info(self):
        return "gfal_rename errors: name has an invalid syntax (EINVAL)"
    def test(self):
	self.name = "lfn:" + path + "/gfal_rename_test"
        ret = gfal.gfal_rename(self.name,self.name)
	print ("return", ret)
	print ("gfal.gfal_get_errno", gfal.gfal_get_errno())
        print ("EINVAL", errno.EINVAL)
	error1 = gfal.gfal_get_errno()
        code = errno.EINVAL
        #print("code", code)
        if (error1 == code):
                ret = True
        else:
                ret = False
        return ret
    #def clean(self):
    #    gfal.gfal_unlink(self.name)

class test_EPROTONOSUPPORT(_ntest):
    def info(self):
        return "gfal_rename errors: Access method not supported (EPROTONOSUPPORT)"
    def test(self):
        self.name = "sfn://" + se + path + "/gfal_rmdir_test"
        #print ("self.name", self.name)
        ret = gfal.gfal_rename(self.name, self.name)
        print ("return", ret)
        print ("gfal.gfal_get_errno", gfal.gfal_get_errno())
        print ("EPROTONOSUPPORT", errno.EPROTONOSUPPORT)
        error1 = gfal.gfal_get_errno()
        code = errno.EPROTONOSUPPORT
        if (error1 == code):
                ret = True
        else:
                ret = False
        return ret
    #def clean(self):
     #   gfal.gfal_unlink(self.name)

class gfal_rename_test:
    def __init__(self):
        self.tests=[test_rename_ok, test_EACCES, test_ENOENT, test_EFAULT, test_EINVAL, test_EPROTONOSUPPORT]

    def run(self):
	flag = 0
        for testclass in self.tests:
            testInstance = testclass()
            testInstance.prepare()
	    ret1 = testInstance.test()	
            testInstance.clean()
            if ret1:
                print "%-60s[OK]" % testInstance.info()
		print ""
            else:
		flag = 1
                print "%-60s[FAILED]" % testInstance.info()
		print ""
	return flag

#************* Interface for Python tests ***************

if (setype == "SRM"):
	if (path1 == "dpm"):
		os.environ['LCG_RFIO_TYPE'] = path1	
	print "================================================================"
	print "Start test: rename a file or a directory (gfal_rename)"
	print "================================================================"
	#prot = "srm://"
	prot = "lfn:/"
	ret = gfal_rename_test().run()
	if ( ret == 1):
                print "Test failed"
		print ""
                sys.exit(2)
        else:
                print "Test is OK"
		print ""
                sys.exit(0)

if (setype == "classic"):
	print "================================================================"
	print sys.argv[1] +" - classic SE"
	print "Start test: rename a file or a directory (gfal_rename)"
	print "================================================================"
        #prot = "sfn://"
	prot = "lfn:/"
        ret = gfal_rename_test().run()
 	if ( ret == 1):
                print "Test failed"
		print ""
                sys.exit(2)
        else:
                print "Test is OK"
		print ""
                sys.exit(0)

if (setype == ""):
        print sys.argv[1] + " - unknown SE"
        sys.exit(1)

