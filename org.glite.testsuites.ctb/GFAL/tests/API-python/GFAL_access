#!/usr/bin/env python
# check existence/accessibility of a file/directory (gfal_access)

import os,sys,errno
sys.path.append("/opt/lcg/lib/python2.3/site-packages/")
sys.path.append("/opt/lcg/lib64/python2.4/site-packages/")
import gfal,lfc
from testClass import _test, _ntest
global prot
global vo_name
global path
global flag
flag = 0

#=== FUNCTION ================================================================
# Prints the usage
#=============================================================================

def usage():
    print "Usage:  " + sys.argv[0] + " <SE>"

#=== FUNCTION ================================================================
# Checks for a valid proxy.
#=============================================================================

def check_proxy():
    vo_name = result = os.popen("voms-proxy-info --vo").read()[:-1]
    if not vo_name:
        print "Error: Couldn't find a valid proxy."
        sys.exit(1)

check_proxy()
vo_name = result = os.popen("voms-proxy-info --vo").read()[:-1]

#=== FUNCTION ================================================================
# Parse input arguments 
#=============================================================================
def check_arguments(): 
	if (len(sys.argv) != 2):
        	usage()
        	sys.exit(1)

check_arguments()    

se = sys.argv[1]

infosys = result = os.popen("echo $LCG_GFAL_INFOSYS").read()[:-1]

setype = result = os.popen("ldapsearch -x -H ldap://" + infosys + " -b 'mds-vo-name=local,o=grid' -LLL '(&(objectClass=GlueSEControlProtocol)(GlueChunkKey=GlueSEUniqueid=" + se + "))' | grep 'GlueSEControlProtocolType' | awk 'BEGIN { FS = \" \" } ; {print $2 }' |uniq").read()[:-1]

path = result = os.popen("ldapsearch -x -H ldap://" + infosys + " -b 'mds-vo-name=local,o=grid' -LLL '(&(GlueSALocalID:dn:=" + vo_name + ")(GlueSEUniqueID:dn:=" + se + "))' GlueSAPath | awk 'BEGIN { FS = \"GlueSAPath: \" } ; {print $2 }'").read()[2:-2]

path1 =  result = os.popen("ldapsearch -x -H ldap://" + infosys + " -b 'mds-vo-name=local,o=grid' -LLL '(&(GlueSALocalID:dn:=" + vo_name + ")(GlueSEUniqueID:dn:=" + se + "))' GlueSAPath | awk 'BEGIN { FS = \"GlueSAPath: \" } ; {print $2 }' |awk 'BEGIN { FS = \"/\" } ; {print $2 }'").read()[2:-2]

lfc_host = result = os.popen("lcg-infosites --vo "+ vo_name +"  -f lfc").read()[:-1]

os.environ['LFC_HOST'] = lfc_host

VO = result = os.popen("echo dteam | tr 'a-z' 'A-Z'").read()[:-1]

os.environ['VO_"+ VO +"_DEFAULT_SE'] = se

#=== FUNCTION ================================================================
# test preperation
#=============================================================================
class test_access_ok(_test):
    def info(self):
        return "gfal_access: check existence of a file"
    def test(self):
	self.name = prot + se + path
	ret = gfal.gfal_access(self.name, os.R_OK)
	print ("return", ret)
	error1 = gfal.gfal_get_errno()
	code = 0
	print ("gfal.gfal_get_errno", gfal.gfal_get_errno())
	if (error1 == code):
                ret = True
        else:
                ret = False
        return ret
    #def clean(self):
    #    gfal.gfal_unlink(self.name)
    
class test_EACCES(_ntest):
    def info(self):
        return "gfal_access errors: Access denied (EACCES)"
    def test(self):
        self.name = prot + se + "/" + path1
	#print ("self.name", self.name) 
        ret = gfal.gfal_access(self.name, os.W_OK)
	print ("return", ret)
	error1 = gfal.gfal_get_errno()
	print ("gfal.gfal_get_errno", gfal.gfal_get_errno())
        print ("EACCES", errno.EACCES)
        code = errno.EACCES
        if (error1 == code):
                ret = True
        else:
                ret = False
        return ret
   # def clean(self):
    #    gfal.gfal_unlink(self.name)

class test_ENOENT(_ntest):
    def info(self):
        return "gfal_access errors: component doesn't exist (ENOENT)"
    def test(self):
        self.name =  prot + se + path + vo_name + "/gfal_test"
        ret = gfal.gfal_access(self.name,os.R_OK)
	error1 = gfal.gfal_get_errno()
	print ("return", ret)
	print ("gfal.gfal_get_errno", gfal.gfal_get_errno())
	print ("ENOENT", errno.ENOENT)
        code = errno.ENOENT
        if (ret == self.retVal):
                ret = True
        else:
                ret = False
        return ret
    #def clean(self):
    #	gfal.gfal_unlink(self.name)
	
class test_EFAULT(_ntest):
    def info(self):
        return "gfal_access errors: filename is a NULL pointer (EFAULT)"
    def test(self):
        self.name = prot + se + path
        ret = gfal.gfal_access(None, os.R_OK)
	print ("return", ret)
	print ("gfal.gfal_get_errno", gfal.gfal_get_errno())
        print ("EFAULT", errno.EFAULT)
	print "http://savannah.cern.ch/bugs/?52645"
	error1 = gfal.gfal_get_errno()
        code = errno.EFAULT
        if (error1 == code):
                ret = True
        else:
                ret = False
        return ret
#    def clean(self):
#        gfal.gfal_unlink(self.name)

class test_EINVAL(_ntest):
    def info(self):
        return "gfal_access errors: filename has an invalid syntax (EINVAL)"
    def test(self):
        self.name = prot + se + path
	#print ("self.name", self.name)
        ret = gfal.gfal_access("0",-9)
	print ("return", ret)
	print ("gfal.gfal_get_errno", gfal.gfal_get_errno())
        print ("EINVAL", errno.EINVAL)
	error1 = gfal.gfal_get_errno()
        code = errno.EINVAL
        #print("code", code)
        if (error1 == code):
                ret = True
        else:
                ret = False
        return ret
    #def clean(self):
     #   gfal.gfal_unlink(self.name)

class gfal_access_test:
    def __init__(self):
        self.tests=[test_access_ok, test_ENOENT, test_EACCES, test_EINVAL, test_EFAULT]

    def run(self):
	flag = 0
        for testclass in self.tests:
            testInstance = testclass()
            testInstance.prepare()
	    ret1 = testInstance.test()	
            testInstance.clean()
	    if ret1:
                print "%-60s[OK]" % testInstance.info()
		print ""
            else:
                print "%-60s[FAILED]" % testInstance.info()
		print ""
		flag = 1
        return flag

#************* Interface for Python tests ***************

if (setype == "SRM"):
	if (path1 == "dpm"):
                os.environ['LCG_RFIO_TYPE'] = path1
	print "===================================================="
	print "Start test: check existence of a file (gfal_access)"
	print "===================================================="
	prot = "srm://"
	ret = gfal_access_test().run()
	if ( ret == 1):
		print "Test failed"
		print ""
		sys.exit(2)
	else:
		print "Test is OK"	
		print ""
		sys.exit(0)

if (setype == "classic"):
	print "===================================================="
	print sys.argv[1] +" - classic SE"
	print "Classic SEs aren't officially supported GFAL"
	print "Start test: check existence of a file (gfal_access)"
	print "===================================================="
        prot = "sfn://"
        ret = gfal_access_test().run()
        if ( ret == 1 ):
		print "Test failed"
		print ""
		sys.exit(2)
        else:
                print "Test is OK"
		print ""
		sys.exit(0)

if (setype == ""):
        print sys.argv[1] + " - unknown SE"
        sys.exit(1)
