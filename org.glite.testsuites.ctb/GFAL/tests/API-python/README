GFAL tests

This directory contains various tests for testing
a GFAL API methods. They are not complete, however
in a working state and can be further developed.

To run the test:

./<script> <SE>

Example:

./GFAL_access some.cern.ch

Notes:

1)
To run the test you shouldn't be root, and the
GFAL client libraries has to be installed on the
usual location. You can use a UI for this purpose.

2)
Test is OK returns 0.
Test failed returns 2.
In other cases (not correctly usage and so on) returns 1.

Tests features:
1) GFAL_abortfiles (create and close file)

2) GFAL_access (check access to dir /path/VO_name/ for example /dpm/cern.ch/home/dteam/
path is specify by command ldapsearch -x -H ldap://" LCG_GFAL_INFOSYS " -b 'mds-vo-name=local,o=grid' -LLL '(&(GlueSALocalID:dn:=" vo_name  ")(GlueSEUniqueID:dn:=" SE  "))' GlueSAPath)  )

3) GFAL_bringonline (create and close file by path see GFAL_access)

4) GFAL_chmod (create file on lfn)

5) GFAL_close (create and close file by path see GFAL_access)

6) GFAL_closedir (open and close dir on lfn:/grid/vo_name for example lfn:/grid/dteam)

7) GFAL_creat (create file by path see GFAL_access)

8) GFAL_deletesurls (create and close file by path see GFAL_access)

9) GFAL_get (create and close file by path see GFAL_access)

10) GFAL_getstatus (create and close file by path see GFAL_access and command gfal_get)

11) GFAL_ls (ls dir /path/VO_name/ by path see GFAL_access)

12) GFAL_lseek (create and close and open file by path see GFAL_access)

13) GFAL_mkdir (create dir by path see GFAL_access)

14) GFAL_open (create file by path see GFAL_access)

15) GFAL_opendir (open dir on lfn:/grid/vo_name for example lfn:/grid/dteam)

16) GFAL_pin (create and close file by path see GFAL_access and command gfal_bringonline)

17) GFAL_prestage (create and close file by path see GFAL_access)

18) GFAL_prestagestatus (create and close file by path see GFAL_access and command gfal_prestage)

19) GFAL_read (create and close and open file by path see GFAL_access)

20) GFAL_readdir (open dir on lfn:/grid/vo_name for example lfn:/grid/dteam)

21) GFAL_release (create and close file by path see GFAL_access and command gfal_bringonline)

22) GFAL_rename (create file on lfn:/grid/vo_name for example lfn:/grid/dteam)

23) GFAL_rmdir (make dir by path see GFAL_access)

24) GFAL_set_xfer_done (create and close file by path see GFAL_access)

25) GFAL_set_xfer_running (create and close file by path see GFAL_access)

26) GFAL_stat (information  about dir by path see GFAL_access)

27) GFAL_turlsfromsurls (create and close file by path see GFAL_access)

28) GFAL_write (create and close and open file by path see GFAL_access)

29) GFAL_unlink (create and close file by path see GFAL_access)
 

Output of the tests.

For example:
./GFAL_access lxb7608v1.cern.ch
====================================================
Start test: check existence of a file (gfal_access)
====================================================
('return', 0)
('gfal.gfal_get_errno', 0)
gfal_access: check existence of a file                      [OK]

('return', -1)
('gfal.gfal_get_errno', 2)
('ENOENT', 2)
gfal_access errors: component doesn't exist (ENOENT)        [OK]

('return', -1)
('gfal.gfal_get_errno', 13)
('EACCES', 13)
gfal_access errors: Access denied (EACCES)                  [OK]

('return', -1)
('gfal.gfal_get_errno', 22)
('EINVAL', 22)
gfal_access errors: filename has an invalid syntax (EINVAL) [OK]

('return', -1)
('gfal.gfal_get_errno', 22)
('EFAULT', 14)
http://savannah.cern.ch/bugs/?52645
gfal_access errors: filename is a NULL pointer (EFAULT)     [FAILED]

Test failed
===================================================

'return' - RETURN VALUE. This routine returns 0 if the operation was successful or -1 if the operation failed.
In different cases  return value  can be  file descriptor  or something else integer. ('return'  may be 4 or 6  and so on)
It is specify for more self-descriptiveness.


'gfal.gfal_get_errno' is code  of error.  It should be 0 if command works correctly.
In other cases 'gfal.gfal_get_errno'  should be similar code of error.
Code of erors are 'ENOENT', 'EACCES', 'EINVAL', 'EFAULT'  and so on.

('ENOENT', 2) - is correctly value.
('gfal.gfal_get_errno', 2) - is return value of command.
If they are similar is OK  otherwise FAILED.

Each couple separate by space.

At the end you can see Test OK if all OK or Test failed if one of test is Failed.

