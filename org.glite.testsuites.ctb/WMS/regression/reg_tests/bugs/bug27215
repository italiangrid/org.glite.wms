#!/bin/sh

test_bug27215_pre () {
 echo
# Check for variables that are needed in test_bug1 and which should be defined globally in
# the *sh that is sourced in regTest
# Return REGTEST_FAIL if something is not O.K. otherwise return $REGTEST_OK
echo "running test for bug $bugNr: WM to set the maximum output sandbox size"
}
                                                                                                                      
test_bug27215_post () {
 echo
# Cleanup after running test_bug1. Unset all variables that were set in test_bug1
# Delete files created during the test run.
if [ "x$jobstatus" == "x${statuses[5]}" ]; then
report_line "$jdl" "The job with jobid $jobid successfully finished" $report_name
report_line "$jdl" "Output was successfully retrieved under $outputdir" $report_name
else
report_line "$jdl" "Test failed" $report_name
report_line "$jdl" "$error_msg" $report_name
fi
report_footer $report_name
cd - >/dev/null
}


test_bug27215 () {
# Main test
# Return values REGTEST_FAIL, REGTEST_TIMEOUT or REGTEST_OK

statuses[0]=Submitted
statuses[1]=Waiting
statuses[2]=Ready
statuses[3]=Scheduled
statuses[4]=Running
statuses[5]=Done
statuses[6]=Abort

MAX_STATUS_ITERATIONS=100
CHECK_STATUS_INTERVAL=30

sanity_check() { # 1 - test_dir  2 - wms.conf
  bad=0
  if [ -z $1 ]; then
    bad=1
  else
    if [ -z $2 ]; then
      bad=1
    fi
  fi
  if [ $bad -eq 1 ]; then
    echo "usage: testplan_list test_dir wms.conf"
    return 1
  fi
  if [ -r "$app_path/config/testplan_functions" ]; then
    . $app_path/config/testplan_functions
  else
    echo "File testplan_functions not found. Quitting.."
    return 1
  fi
  return 0
}

app_path=`pwd`
exit_code=-1
exit_while=-1
sanity_check $1 $2
if [ $? -eq 0 ]; then
        app_path=`pwd`
	report_name="$app_path/reports/report${bugNr}.html"
        echo "report: $report_name"
	rm -rf $report_name
        report_header "Test results: bug $bugNr - WM to set the maximum output sandbox size" $report_name 
	cd $1
	if [ -e "${bugNr}.jdl" ]; then 
         jdl=${bugNr}.jdl 
         echo "$jdl"
         log "processing $jdl"
         submit_single_job $jdl "$app_path/$2"
         base="${jdl:0:${#jdl}-4}"
          if [ -r "${base}_pre" ]; then
            . "${base}_pre" # precondition
          fi
          if [ "x$jobid" == "xERROR" ]; then
            log "got an error while submitting..."
            if [ "$error_msg" == "Error - Proxy File Not Found" ]; then
              return 1
              break
            fi
          else
            log "job submitted with id: $jobid"
          fi
         rm -f $tmpfile
         jobstatus=X
         iterations=1
         while [ true ]; do
           log "Sleeping $CHECK_STATUS_INTERVAL seconds"
           sleep $CHECK_STATUS_INTERVAL
           get_status $jobid
           if [ "X$jobstatus" == "XERROR" ]; then
             log "Error getting status for job: $jobid"
             break
           else
             log "waiting for $jobid to complete, current status: $jobstatus"
           fi
           if [ "x$jobstatus" == "x${statuses[5]}" ]; then
             exit_while=1
           fi
           if [ "x$jobstatus" == "x${statuses[6]}" ]; then
             exit_while=1
           fi
           if [ $exit_while -eq 1 ]; then
             exit_code=`glite-wms-job-status $jobid|awk '/Exit code/{print $3}' || echo 1`
             exit_status=`glite-wms-job-status -v 3  $jobid|awk '/t Status/{print $4}' || echo 1`
             log "$jobid done $exit_status with exit code $exit_code"
           break
          fi
      iterations=`expr $iterations + 1`
      if [ $iterations -gt $MAX_STATUS_ITERATIONS ]; then
        log "hit maximum number of iterations while checking for status"
        exit_code=-2
        return 1
        break
      fi
    done
    if [ "x$jobstatus" == "x${statuses[5]}" ]; then # get output
      output_dir=`glite-wms-job-output $jobid|awk '/tmp/{print $3}' || echo 1`
    fi
  else
   log "There is no .jdl file for bug ${bugNr}" 
   exit_code=-2
   return 1
   break
  fi 
fi
}
