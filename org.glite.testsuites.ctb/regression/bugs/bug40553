##############################################################################
# Copyright (c) Members of the EGEE Collaboration. 2004.
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS
# OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################
#
# AUTHORS: Dimitar Shiyachki <Dimitar.Shiyachki@cern.ch>
#
##############################################################################

test_bug40553_pre () {

   gcc -I/opt/lcg/include/dpm -L/opt/lcg/lib -ldpm -ldl \
       native/bug40553.c -o native/bug40553
   retcode=$?

   if [ $retcode -ne 0 ]; then 
      echo "Native code did not compile successfully. Abort."
      return $REGTEST_FAIL
   fi

   return $REGTEST_OK
}

test_bug40553_post () {

   lcg-del -l srm://$DPM_HOST/dpm/cern.ch/home/$VO/bug_40553_file
   dpm-releasespace --token_desc bug_40553_space
   rm -f native/bug40553

   return $REGTEST_OK
}

python_script="

import dpm
import sys
result, pools = dpm.dpm_getpools()
if result :
   sys.exit(1)
for pool in pools :
   result, filesystems = dpm.dpm_getpoolfs(pool.poolname)
   if result :
      print pool.poolname
      sys.exit(2)
   fscount = 0
   for filesystem in filesystems :
      if filesystem.status == 0 :
         fscount += 1
   if fscount >= 2 :
      print pool.poolname
      sys.exit(0)
sys.exit(3)

"

test_bug40553 () {

   #
   # Find a pool that has at least two filesystems so that one can be drained
   # 

   poolname=$(python -c "$python_script")

   retcode=$?
   if [ $retcode -eq 1 ]; then
      echo "Error listing pools."
      return $REGTEST_FAIL
   fi
   if [ $retcode -eq 2 ]; then
      echo "Error listing filesystems for pool $poolname."
      return $REGTEST_FAIL
   fi
   if [ $retcode -eq 3 ]; then
      echo "No pools with at least 2 active filesystems were found. Drain cannot be tested."
      return $REGTEST_FAIL
   fi

   echo "Pool selected: $poolname"

   #
   # Reserve space on the selected pool and create a volatile file
   #

   token_guid=$(dpm-reservespace --gspace 512M --poolname $poolname --token_desc bug_40553_space)

   ret_code=$?
   if [ $ret_code -ne 0 ]; then
      echo "Unable to reserve space. Abort"
      return $REGTEST_FAIL
   fi

   turl=$(./native/bug40553 srm://$DPM_HOST/dpm/cern.ch/home/$VO/bug_40553_file $token_guid)

   ret_code=$?
   if [ $ret_code -ne 0 ]; then
      echo "Unable to create a volatile file. Abort."
      return $REGTEST_FAIL
   fi

   fshost=$(echo $turl | cut -f 1 -d ' ' | sed -e 's/gsiftp:\/\/\([^:/]*\).*/\1/')
      
   echo "dpm_disk selected for drain: $fshost"

   command="
      export DPM_HOST=localhost;
      export DPNS_HOST=localhost;
      export PATH=$PATH:/opt/lcg/bin;
      dpm-drain --server $fshost;"

   ssh -2 -l root $DPM_HOST $command

   #
   # Check whether the drain completed successfully and the location of the file
   #

   ret_code=$?

   if [ $ret_code -eq 255 ]; then
      echo "ssh error"
      return $REGTEST_FAIL
   elif [ $retcode -ne 130 ] && [ $retcode -ne 0 ]; then
      echo "dpm-drain exited with error code $ret_code"
      return $REGTEST_FAIL
   fi

   gt_result=$(lcg-gt srm://$DPM_HOST/dpm/cern.ch/home/$VO/bug_40553_file gsiftp)
   new_host=$(echo $gt_result | grep gsiftp | sed -e 's/gsiftp:\/\/\([^:/]*\).*/\1/')
   req_id=$(echo $gt_result | grep -v gsiftp | head -1)

   if [ "$new_host" != "$fshost" ]; then
      echo "The volatile file was replicated to the new place."
      return $REGTEST_OK
   else
      return $REGTEST_FAIL
   fi
}

