##############################################################################
# Copyright (c) Members of the EGEE Collaboration. 2004.
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS
# OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################
#
# AUTHORS: Alvaro Fernandez, IFIC (CSIC)
#
##############################################################################

test_bug29509_pre () {
OLD_PYTHONPATH=$PYTHONPATH
export PYTHONPATH=/opt/glite/lib/:$PYTHONPATH

LOCAL_FILE=${TMPDIR-/tmp}/bugtest29509_$$.py

if [ -z $VO ]; then
    echo "VO variable not defined"
    return ${REGTEST_FAIL}
fi

if [ -z $WMPROXY_URL ]; then
    echo "VO variable not defined"
    return ${REGTEST_FAIL}
fi

cat <<- FIN > $LOCAL_FILE 
#!/usr/bin/python
# -*- coding: iso-8859-15 -*-
import sys

from wmproxymethods import *
import SOAPpy  #Error Type

#url=  "https://cg08.ific.uv.es:7443/glite_wms_wmproxy_server"
url="$WMPROXY_URL"
#url="https://lxbra2303.cern.ch:7443/glite_wms_wmproxy_server"
client = Wmproxy(url)

print "Testing WMPROXY python bug#29509 at url: " +url

#Method to obtain information of the service itself

###################
# JDL preparation #
###################
#Method (not yet supported):  getJobTemplateFalse
#IN =  jobType (JobTypeList)
#IN =  executable (string)
#IN =  arguments (string)
#IN =  requirements (string)
#IN =  rank (string)
#OUT = jdl (string)

jdl="Executable	= \"/bin/hostname\"; Arguments	= \"\"; StdOutput = \"std.out\"; StdError = \"std.err\"; OutputSandbox = {\"std.out\"}; VirtualOrganisation = \"${VO}\"; requirements = true; rank = 1;"

print jdl

################
# Sending Jobs #
################
#Before invoking services such as submission, a delegation process is needed to transfer client proxy credentials to the server host. Delegated credentials are uniquely identified by the association of the delegation identifier, provided by user, and the userâ€™s DN within the credentials.


#method=1 	# native method to delegate credentials (not yet implemented in python)
#method=2 	# delegate credentials based on glite-proxy-cert
#method=3	# delegate credentials using already available UI-client:glite-wms-job-delegate-proxy

method=3
delegateOk=0
delegationId = "myDelegationId2"

print "Delegate credentials using already available UI-client:glite-wms-job-delegate-proxy"
commandString="glite-wms-job-delegate-proxy -d " + delegationId + " --endpoint " + url 
print commandString
ifile,ofile=os.popen4(commandString )
sfile=ofile.read()
if sfile.find("Error -")>=0:
   print "Warning : \n" +sfile + '\n'
else:	
   delegateOk=1

print "Delegation done\n"

print "Submitting the job\n"

# Simple jobSubmission
task = client.jobSubmit ( jdl, delegationId )

print "Job submitted\n"

#bug#29509
try:
   print "Printing job representation..."
   print task.toString()
except:
   print "Error in method toString()"
   sys.exit(1)

#Elsewhere, correct
sys.exit(0)
FIN

chmod 755 $LOCAL_FILE

}

test_bug29509_post () {
export PYTHONPATH=$OLD_PYTHONPATH
#rm -f $LOCAL_FILE
unset LOCAL_FILE
}


test_bug29509 () {

echo "A job will be submmited and get its string representation... "
$LOCAL_FILE

if [ $? -ne ${REGTEST_OK} ]; then
 return ${REGTEST_FAIL}
fi


#arrives here so everything fine
return $REGTEST_OK
 
}

