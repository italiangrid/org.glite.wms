DM libraries on WN 32/64 compatibility testing
==============================================
Author: Andreas Unterkircher

On a WN installed on a x86_64 macbine in compatibility mode one should be able to execute 32bit as well as 64bit executables using the data management (DM) client libraries.

One has to check for the libraries

libdpm.so
libgfal.so
(libgfal_pthr.so - not checked at the moment)
liblcg_util.so
liblfc.so

To do this one has to excute binaries that dynamically link to these libraries and make sure that the execution works (i.e. no linking errors etc.). For every binary on must execute a 32bit and a 64bit version and the output must be the same. One could write some C code using all this libraries or use already some existing binaries resp. code to do this. We describe the second approach.

Setup:
Install the WN & configure it with yaim. Select a pool account. Place a valid proxy on the WN and set X509_USER_PROXY accordingly.

1. Look at LD_LIBRARY_PATH. It should have /opt/lcg/lib as well as /opt/lcg/lib64

2. Check that the directories /opt/lcg/lib (32bit libs) and /opt/lcg/lib64 (64bit libs) exist and contain the same libraries.

3. Check for liblcg_util.so, libgfal.so, libgssapi_error and various globus libs 
Test lcg_utils commands with the test-lcg-utils.sh (part of the UI tests). Find out if the lcg_util commands in /opt/lcg/bin are 32bit or 64bit (with the "file" command). Install the lcg_util commands with the same version but with other bitness in some local directory (get lcg_utils from ETICS repository). Modify the lcg_utils commands in test-lcg-utils.sh such that the ones in the local directory are being used. Run the the test-lcg-utils.sh. The output should be the same as the run with the lcg_util commands from the installed rpm. Now you should have tested 32bit as well as 64bit lcg_util commands.

4. Check for libgfal.so, libcgsi_plugin_gsoap, libcrypto, libssl, libvomsc and various globus libs

Find out if the GFAL-client commands in /opt/lcg/bin are 32bit or 64bit. Install the GFAL-client commands with the same version but other bitness in some local directory.

Use the test-gfal.sh test (form GFAL tests). Modify the gcc options in the script so that it compiles on 64bit:
gcc -I/opt/glite/../lcg/include -L/opt/glite/../lcg/lib64 -L/opt/glite/../globus/lib
Modify the script to point to the 64bit GFAL-clients commands.
Run the test.
Modify the gcc options in the script so that you can compile a 32bit binary:
gcc -I/opt/glite/../lcg/include -L/opt/glite/../lcg/lib -L/opt/glite/../globus/lib -m32
Modify the script to point to the 32bit GFAL-clients commands.
Run the test.
The output should be the same for both runs.

5. Check for liblfc.so

Check out the LFC tests and look into LFC/tests/bulk-methods. Compile LFC_GET_TEST for 32 bit as well as 64 bit. I had to compile the 32bit version on a native 32bit machine. Modify the LFC-cli-bulk test such that it uses the 64bit resp. 32bit version of LFC_GET_TEST and run the test for 32 and 64 bit. You should get the same output. To run the test do "./LFC-cli-bulk <lfc-host>". To run the test without SAM you have to define some env vars (adapt the vars to your setup):

export SAME_VO=ops
export SAME_OK=10
export SAME_ERROR=50
export SAME_WARNING=40
export SAME_HOME=/home/dteam001/org.glite.testsuites.ctb
export LFC_HOME=/grid/ops
export LFC_HOST=prod-lfc-shared-central.cern.ch

6. Check for libdpm.so

Check out the DPM tests. Compile tests/DPM-api.c for 64bit 
 gcc -I/opt/lcg/include/dpm -L/opt/lcg/lib64 -o DPM-api DPM-api.c -ldpm -ldl
and 32bit (I did this on a native 32bit machine)
 gcc -I/opt/lcg/include/dpm -L/opt/lcg/lib -o DPM-api DPM-api.c -ldpm -ldl
Run the test twice (32/64 bit). The output should be the same.To run the tests you need to set (adapt to your needs):

export DPM_HOST=lxdpm101.cern.ch
export DPNS_HOST=lxdpm101.cern.ch
export DPM_TEST_PATH=/dpm/cern.ch/home/ops/test1

