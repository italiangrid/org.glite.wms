#!/usr/bin/python

import os,sys
import re, string
import log4py

from CREAMTestUtils import testsuite_utils, job_utils, job_poller

def usage():
    manPage = testsuite_utils.ManPage()
    
    manPage.shortDescr = 'submit and cancel a sequence of jobs'
    manPage.synopsis = '[OPTION] -R | --resourceURI RESOURCEURI'
    manPage.description = '''Submit a sequence of simple jobs with a specified rate \
and then try to cancel them'''

    manPage.parameters.append(('-h', '--help' , '', 'print this message and exit'))
    manPage.parameters.append(('-r', '--rate', 'SLEEP_TIME', '''\
the sleep time in seconds between two consecutive submissions(Default 30s, Min 5s)'''))
    manPage.parameters.append(('-n', '--numberOfJob', 'NUM', 'the number of jobs to submit (Default 1)'))
    manPage.parameters.append(('-m', '--maxRunningJobs', 'NUM', '''\
the max number of job which can be enqueued in the service (Default 100)'''))
    manPage.parameters.append(('-D', '--delegationType', 'DELEGATIONTYPE','''\
specify the delegation management type: single, one delegated proxy for all submissions,\
or multiple, one delegated proxy per job (DEFAULT is single)'''))
    manPage.parameters.append(('-R', '--resourceURI', 'RESOURCEURI','''\
define the URI of the resource under testing, the format is \
<host>[:<port>]/cream-<lrms>-<queue>. \
This option is mandatory and no default value is defined'''))
    manPage.parameters.append(('-C', '--maxConcurrentSubmit', 'NUM', '''\
define the number of concurrent submit, (DEFAULT is 1)'''))
    manPage.parameters.append(('-j', '--jdl', 'JDLFILE', '''\
define the path for the jdl file, if omitted a predefined jdl will \
be used with simple sleep as executable'''))
    
    manPage.env.append(('GLITE_LOCATION', 'location of gLite packages (DEFAULT=/opt/glite)'))
    manPage.env.append(('X509_USER_PROXY', 'location of the user proxy'))
    manPage.env.append(('MONITORED_CANCEL_CONFIG_FILE','''\
location of the configuration file for this test'''))
    
    manPage.display()
    
    sys.exit(0)

def failure(reason):
    print reason
    sys.exit(1)

class JobProcessed(job_utils.JobProcessed):
    
    def __init__(self):
        job_utils.JobProcessed.__init__(self)
        
    def canPurge(self, jobStatus, failureReason=''):
        return jobStatus=='CANCELLED'


class JobPoller(job_poller.JobPoller):
    
    logger = log4py.Logger().get_instance(classid="JobPoller")
    
    def __init__(self, parameters, pManager=None):
        job_poller.JobPoller.__init__(self, parameters, pManager)
        self.finishedJobs = JobProcessed()
        self.runningJobs = []
        
    def put(self, uri, timestamp):
        self.lock.acquire()
        JobPoller.logger.info("Submitted job: " + uri)
        self.table[uri] = job_utils.BooleanTimestamp(timestamp)
        self.lock.release()

    def manageRunningState(self, currId):
        if self.table[currId].scheduled:
            JobPoller.logger.debug("Cannot reschedule cancel for job %s" % currId)
        else:
            self.table[currId].scheduled = True
            JobPoller.logger.debug("Scheduling %s for cancel" % currId)
            self.runningJobs.append(currId)
    
    def processRunningJobs(self):
        job_utils.eraseJobs(self.runningJobs, cmd='cancel')
        self.runningJobs = []
    
    def shutdown(self):
        job_poller.JobPoller.shutdown(self)
        if self.tableOfResults['CANCELLED']<>self.parameters.numberOfJob:
            return 1
        return 0



def main():
    logger = log4py.Logger().get_instance(classid="main")
    
    parameters = testsuite_utils.Parameters()
    parameters.register('rate', 'd', 30, testsuite_utils.checkRate)
    parameters.register('numberOfJob', 'd', 1, testsuite_utils.atLeastOne)
    parameters.register('maxRunningJobs', 'd', 100, testsuite_utils.atLeastOne)
    parameters.register('delegationType', 's', 'single', testsuite_utils.checkRenewType,'D')
    parameters.register('resourceURI', 's', '', testsuite_utils.checkResourceURI, 'R')
    parameters.register('maxConcurrentSubmit', 'd', 1, testsuite_utils.atLeastOne, 'C')
    parameters.register('jdl', 's')

    if os.environ.has_key("MONITORED_CANCEL_CONFIG_FILE"):
        confFileName = os.environ["MONITORED_CANCEL_CONFIG_FILE"]
    else:
        confFileName = None

    try:

        parameters.parseConfigFileAndOptList(sys.argv[1:], confFileName)

    except testsuite_utils.BadValueException, ex:
        print "ERROR: %s\n\nUsage:" % ex
        usage()
    except IOError, ioError:
        failure("Cannot read configuration file: " + confFileName + " " + str(ioError))
    except Exception, exception:
        failure("Error parsing parameters " + str(exception))
        
    if parameters.help:
        usage()

    if parameters.jdl=='':
        parameters.jdl = testsuite_utils.createTempJDL(parameters.rate*10, logger)
        if parameters.jdl==None:
            sys.exit(1)
    
    vomsManager = job_utils.VOMSProxyManager(parameters, logger)
    pollerThread = JobPoller(parameters, vomsManager)
    renewalManager = job_utils.ProxyRenewer(parameters, pollerThread, \
                                            vomsManager, logger)

    pollerThread.start()
    #renewalManager.start()
    pollerThread.join()
    renewalManager.halt()

    exitCode = pollerThread.shutdown()
    
    sys.exit(exitCode)
    
if __name__ == "__main__":
    main()
