#!/usr/bin/python

import os, os.path
import sys
import re, string
from CREAMTestUtils import testsuite_utils, job_utils, job_poller
import log4py

from CREAMTestUtils.submit_pool import JobSubmitterPool

def usage():
    manPage = testsuite_utils.ManPage()
    
    manPage.shortDescr = 'submit a sequence of jobs using an expiring proxy'
    manPage.synopsis = '[OPTION] -R | --resourceURI RESOURCEURI --vo VONAME'
    manPage.description = '''Submit a sequence of simple jobs with a specified rate \
using one or more voms-proxies whose lifetime is shorter than the duration of the job.
The job is a simple sleep.'''

    manPage.parameters.append(('-h', '--help' , '', 'print this message and exit'))
    manPage.parameters.append(('-r', '--rate', 'SLEEP_TIME', '''\
the sleep time in seconds between two consecutive submissions(Default 30s, Min 5s)'''))
    manPage.parameters.append(('-n', '--numberOfJob', 'NUM', 'the number of jobs to submit (Default 1)'))
    manPage.parameters.append(('-m', '--maxRunningJobs', 'NUM', '''\
the max number of job which can be enqueued in the service (Default 100)'''))
    manPage.parameters.append(('-R', '--resourceURI', 'RESOURCEURI','''\
define the URI of the resource under testing, the format is \
<host>[:<port>]/cream-<lrms>-<queue>. \
This option is mandatory and no default value is defined'''))
    manPage.parameters.append(('-C', '--maxConcurrentSubmit', 'NUM', '''\
define the number of concurrent submit, (DEFAULT is 1)'''))
    manPage.parameters.append(('', '--vo', 'VONAME', '''the name of the vo required for creating \
the voms-proxy, this parameter is mandatory'''))
    manPage.parameters.append(('', '--valid', 'HH:MM', '''the lifetime of the created voms-proxy, \
the forma is HH:MM (Default 00:10)'''))
    
    manPage.env.append(('GLITE_LOCATION', 'location of gLite packages (DEFAULT=/opt/glite)'))
    manPage.env.append(('X509_USER_CERT', 'location of the user certificate'))
    manPage.env.append(('X509_USER_KEY', 'location of the user key'))
    manPage.env.append(('MONITORED_PROXY_EXPIRED_CONFIG_FILE','''\
location of the configuration file for this test'''))
    
    manPage.display()
    
    sys.exit(0)

def failure(reason):
    print reason
    sys.exit(1)


class JobProcessed(job_utils.JobProcessed):
    
    def __init__(self):
        job_utils.JobProcessed.__init__(self)
        
    def canPurge(self, jobStatus, failureReason=''):
        return jobStatus=='DONE-FAILED' and failureReason=='Proxy is expired'
    
class JobPoller(job_poller.JobPoller):
    
    def __init__(self, parameters):
        job_poller.JobPoller.__init__(self, parameters)
        self.finishedJobs = JobProcessed()
        
    def shutdown(self):
        job_poller.JobPoller.shutdown(self)
        if self.tableOfResults['DONE-FAILED']<>self.parameters.numberOfJob:
            return 1
        return 0
    
    
def main():
    
    logger = log4py.Logger().get_instance(classid="main")
    
    parameters = testsuite_utils.Parameters()
    parameters.register('rate', 'd', 30, testsuite_utils.checkRate)
    parameters.register('numberOfJob', 'd', 1, testsuite_utils.atLeastOne)
    parameters.register('maxRunningJobs', 'd', 100, testsuite_utils.atLeastOne)
    #parameters.register('delegationID', 's', optChar='D')
    parameters.register('resourceURI', 's', '', testsuite_utils.checkResourceURI, 'R')
    parameters.register('maxConcurrentSubmit', 'd', 1, testsuite_utils.atLeastOne, 'C')
    #parameters.register('jdl', 's')
    parameters.register('vo', 's', optChar='1')
    parameters.register('valid', 's', '00:10', testsuite_utils.checkValid, '2')
    
    if os.environ.has_key("MONITORED_PROXY_EXPIRED_CONFIG_FILE"):
        confFileName = os.environ["MONITORED_PROXY_EXPIRED_CONFIG_FILE"]
    else:
        confFileName = None
    
    try:

        parameters.parseConfigFileAndOptList(sys.argv[1:], confFileName)

    except testsuite_utils.BadValueException, ex:
        print "ERROR: %s\n\nUsage:" % ex
        usage()
    except IOError, ioError:
        failure("Cannot read configuration file: " + confFileName + " " + str(ioError))
    except Exception, exception:
        failure("Error parsing parameters " + str(exception))
                
    if parameters.help:
        usage()

    if parameters.vo=='':
        print "Vo name is not defined"
        usage()
        
    tokens = string.split(parameters.valid, ':')
    elaps = int(tokens[0])*3600 + int(tokens[1])*60
    setattr(parameters, 'jdl', testsuite_utils.createTempJDL(elaps*2, logger))
    if parameters.jdl==None:
        sys.exit(1)
    setattr(parameters, 'delegationType', 'multiple')
    
    pollerThread = JobPoller(parameters)
    
    vomsManager = job_utils.VOMSProxyManager(parameters, logger)
    
    pollerThread.start()
    vomsManager.start()
    pollerThread.join()
    vomsManager.halt()
    exitCode = pollerThread.shutdown()
    
    sys.exit(exitCode)

if __name__ == "__main__":
    main()