import os, os.path
import sys
import re, string
import getopt
from CREAMTestUtils import testsuite_utils, job_utils, job_poller
import log4py

from CREAMTestUtils.submit_pool import JobSubmitterPool

def usage():
    manPage = testsuite_utils.ManPage()
    
    manPage.shortDescr = 'submit a sequence of jobs using an expiring proxy'
    manPage.synopsis = '[OPTION] -r | --resourceURI RESOURCEURI --vo VONAME'
    manPage.description = '''Submit a sequence of simple jobs with a specified rate \
using one or more voms-proxies whose lifetime is shorter than the duration of the job.
The job is a simple sleep.'''

    manPage.parameters.append(('-h', '--help' , '', 'print this message and exit'))
    manPage.parameters.append(('-r', '--rate', 'SLEEP_TIME', '''\
the sleep time in seconds between two consecutive submissions(Default 30s, Min 5s)'''))
    manPage.parameters.append(('-n', '--numberOfJob', 'NUM', 'the number of jobs to submit (Default 1)'))
    manPage.parameters.append(('-m', '--maxRunningJobs', 'NUM', '''\
the max number of job which can be enqueued in the service (Default 100)'''))
    manPage.parameters.append(('-D', '--delegationID', 'DELEGATIONID','''\
disable the auto-delegation for each submission and reuse the specified delegation ID'''))
    manPage.parameters.append(('-R', '--resourceURI', 'RESOURCEURI','''\
define the URI of the resource under testing, the format is \
<host>[:<port>]/cream-<lrms>-<queue>. \
This option is mandatory and no default value is defined'''))
    manPage.parameters.append(('-C', '--maxConcurrentSubmit', 'NUM', '''\
define the number of concurrent submit, (DEFAULT is 1)'''))
    manPage.parameters.append(('', '--vo', 'VONAME', '''the name of the vo required for creating \
the voms-proxy, this parameter is mandatory'''))
    manPage.parameters.append(('', '--valid', '''the lifetime of the created voms-proxy, \
the forma is HH:MM (Default 12:00)'''))
    
    manPage.env.append(('GLITE_LOCATION', 'location of gLite packages (DEFAULT=/opt/glite)'))
    manPage.env.append(('X509_USER_CERT', 'location of the user certificate'))
    manPage.env.append(('X509_USER_KEY', 'location of the user key'))
    manPage.env.append(('MONITORED_PROXY_EXPIRED_CONFIG_FILE','''\
location of the configuration file for this test'''))
    
    manPage.display()
    
    sys.exit(0)



class JobProcessed(job_utils.JobProcessed):
    
    def __init__(self, cmdTable):
        job_utils.JobProcessed.__init__(self, cmdTable)
        
    def canPurge(self, jobStatus):
        return jobStatus=='CANCELLED'
    
class JobPoller(job_poller.JobPoller):
    
    def __init__(self, parameters, cmds):
        job_poller.JobPoller.__init__(self, parameters, cmds)
        self.finishedJobs = JobProcessed(cmds)
        
    def shutdown(self):
        job_poller.JobPoller.shutdown(self)
        if self.tableOfResults['CANCELLED']<>self.parameters.numberOfJob:
            return 1
        return 0
    
    
def main():
    
    logger = log4py.Logger().get_instance(classid="main")
    
    parameters = testsuite_utils.Parameters()
    parameters.register('rate', 'd', 30, testsuite_utils.checkRate)
    parameters.register('numberOfJob', 'd', 1, testsuite_utils.atLeastOne)
    parameters.register('maxRunningJobs', 'd', 100, testsuite_utils.atLeastOne)
    parameters.register('delegationID', 's', optChar='D')
    parameters.register('resourceURI', 's', optChar='R')
    parameters.register('maxConcurrentSubmit', 'd', 1, testsuite_utils.atLeastOne, 'C')
    parameters.register('jdl', 's')
    parameters.register('vo', 's', optChar='1')
    parameters.register('valid', 's', '12:00', testsuite_utils.checkValid, '2')
    parameters.register('help', 'b')

    if os.environ.has_key("MONITORED_PROXY_EXPIRED_CONFIG_FILE"):
        confFileName = os.environ["MONITORED_PROXY_EXPIRED_CONFIG_FILE"]
        try:
            parameters.parseConfigFile(confFileName)
        except IOError, ioError:
            failure("Cannot read configuration file: " + confFileName + " " + str(ioError))
        except Exception, exception:
            failure("Cannot parse configuration file: " + confFileName + " " + str(exception))

    try:
        optlist, args = getopt.getopt(sys.argv[1:], parameters.getShortOptString(),
                                      parameters.getLongOptList())
        parameters.parseOptList(optlist)
    except getopt.GetoptError:
        print "Wrong arguments\n\nUsage:\n"
        usage()
    except Exception, exception:
        failure("Cannot parse option list " + str(exception))
        
    if parameters.help:
        usage()

    if parameters.resourceURI=='':
        print "Resource URI is not defined"
        usage()
    if parameters.vo=='':
        print "Vo name is not defined"
        usage()
        
    if parameters.jdl=='':
        parameters.jdl = testsuite_utils.createTempJDL(parameters.rate*5, logger)
        if parameters.jdl==None:
            sys.exit(1)
    
    gliteCeCommand = testsuite_utils.getCECommandTable()

    pollerThread = JobPoller(parameters, gliteCeCommand)
    proxyRenewer = job_utils.ProxyRenewer(parameters, gliteCeCommand, \
                                          pollerThread, logger)
    pollerThread.start()
    proxyRenewer.start()
    pollerThread.join()
    proxyRenewer.halt()
    exitCode = pollerThread.shutdown()
    
    sys.exit(exitCode)

if __name__ == "__main__":
    main()