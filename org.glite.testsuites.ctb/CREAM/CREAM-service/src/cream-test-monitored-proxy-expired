#!/usr/bin/python

import os, os.path
import sys
import re, string
from CREAMTestUtils import testsuite_utils, job_utils, job_poller

from CREAMTestUtils.submit_pool import JobSubmitterPool

def failure(reason):
    print reason
    sys.exit(1)


class JobProcessed(job_utils.JobProcessed):
    
    def __init__(self):
        job_utils.JobProcessed.__init__(self)
        
    def canPurge(self, jobStatus, failureReason=''):
        return jobStatus=='DONE-FAILED' and failureReason=='Proxy is expired'
    
class JobPoller(job_poller.JobPoller):
    
    def __init__(self, parameters, iManager=None):
        job_poller.JobPoller.__init__(self, parameters, iManager=iManager)
        self.finishedJobs = JobProcessed()
        
    def shutdown(self):
        job_poller.JobPoller.shutdown(self)
        if self.tableOfResults['DONE-FAILED']<>self.parameters.numberOfJob:
            return 1
        return 0
    
    
def main():
    
    parameters = testsuite_utils.Parameters('submit a sequence of jobs using an expiring proxy',\
                                            '[OPTION] -R | --resourceURI RESOURCEURI --vo VONAME',\
                                            '''Submit a given number of jobs using a voms-proxy \
whose lifetime is shorter than the duration of the job. The job is a simple sleep whose duration is \
twice the duration of the related voms-proxy. The service must kill the job just before the \
proxy expiration.''')
    
    parameters.register('rate', 'd', 30, testsuite_utils.checkRate, descr='''\
set the sleep time in seconds between two polling operations (Default 30s, Min 5s)''')

    parameters.register('numberOfJob', 'd', 1, testsuite_utils.atLeastOne, descr='''\
set the number of jobs to submit (DEFAULT 1)''')
    
    parameters.register('maxRunningJobs', 'd', 100, testsuite_utils.atLeastOne, descr='''\
set the max number of job which can be enqueued in the service (DEFAULT 100)''')
    
    parameters.register('resourceURI', 's', '', testsuite_utils.checkResourceURI, 'R', \
                        descr='''define the URI of the resource under testing, the format is \
<host>[:<port>]/cream-<lrms>-<queue>. \
This option is mandatory and no default value is defined''')
    
    parameters.register('maxConcurrentSubmit', 'd', 1, testsuite_utils.atLeastOne, 'C',\
                        descr='''define the number of concurrent submit, (DEFAULT is 1)''')
    
    parameters.register('vo', 's', '', testsuite_utils.checkVO, '', descr='''\
set the VO name to be used for the test; this parameter is mandatory whenever \
X509_USER_CERT and X509_USER_KEY are defined, no default is available''')
    
    parameters.register('valid', 's', '00:10', testsuite_utils.checkValid, '', descr='''\
set the voms-proxy duration in the format HH:MM (DEFAULT 00:10)''')
    
    parameters.setDefaultEnvs()
    parameters.addEnvItem(('MONITORED_PROXY_EXPIRED_CONFIG_FILE','''\
location of the configuration file for this test. The configuration file contains a list \
of properties (the format is key=value); the set of keys correspond to the set \
of the long options of this test'''))

    if os.environ.has_key("MONITORED_PROXY_EXPIRED_CONFIG_FILE"):
        confFileName = os.environ["MONITORED_PROXY_EXPIRED_CONFIG_FILE"]
    else:
        confFileName = None
    
    try:

        parameters.parseConfigFileAndOptList(sys.argv[1:], confFileName)

    except testsuite_utils.BadValueException, ex:
        print "ERROR: %s\n\nUsage:" % ex
        parameters.display()
        sys.exit(1)
    except IOError, ioError:
        failure("Cannot read configuration file: " + confFileName + " " + str(ioError))
    except Exception, exception:
        failure("Error parsing parameters " + str(exception))
                
    if parameters.help:
        parameters.display()
        sys.exit(0)
        
    testsuite_utils.mainLogger.setup(parameters.logConf)

    if parameters.vo=='':
        print "Vo name is not defined"
        parameters.display()
        sys.exit(1)
        
    tokens = string.split(parameters.valid, ':')
    elaps = int(tokens[0])*3600 + int(tokens[1])*60
    setattr(parameters, 'jdl', testsuite_utils.createTempJDL(elaps*2))
    if parameters.jdl==None:
        sys.exit(1)
    setattr(parameters, 'delegationType', 'multiple')
    
    if parameters.interactive:
        interfaceMan = testsuite_utils.InterfaceManager()
    else:
        interfaceMan = None
    pollerThread = JobPoller(parameters, interfaceMan)
    
    vomsManager = job_utils.VOMSProxyManager(parameters)
    
    pollerThread.start()
    vomsManager.start()
    if parameters.interactive:
        interfaceMan.run()
        interfaceMan.close()
    pollerThread.join()
    vomsManager.halt()
    exitCode = pollerThread.shutdown()
    
    sys.exit(exitCode)

if __name__ == "__main__":
    main()