#!/usr/bin/python

import os, os.path
import sys
import re, string
import getopt
import threading
import time
import log4py

from CREAMTestUtils import testsuite_utils, job_utils, CEMonitorConsumer
from CREAMTestUtils import job_monitor

def usage():
    manPage = testsuite_utils.ManPage()
    
    manPage.shortDescr = 'submit and cancel a sequence of jobs'
    manPage.synopsis = '[OPTION]'
    manPage.description = '''Submit a sequence of simple jobs with a specified rate \
and then try to cancel them any changes in the job status \
are monitored via cemonitor notifications'''

    manPage.parameters.append(('-h', '--help' , '', 'print this message and exit'))
    manPage.parameters.append(('-r', '--rate', 'SLEEP_TIME', '''\
the sleep time in seconds between two consecutive notifications(Default 30s, Min 5s)'''))
    manPage.parameters.append(('-n', '--numberOfJob', 'NUM', 'the number of jobs to submit (Default 1)'))
    manPage.parameters.append(('-m', '--maxRunningJobs', 'NUM', '''\
the max number of job which can be enqueued in the service (Default 100)'''))
    manPage.parameters.append(('-D', '--delegationID', 'DELEGATIONID','''\
disable the auto-delegation for each submission and reuse the specified delegation ID'''))
    manPage.parameters.append(('-R', '--resourceURI', 'RESOURCEURI','''\
define the URI of the resource under testing, the format is \
<host>[:<port>]/cream-<lrms>-<queue>. \
This option is mandatory and no default value is defined'''))
    manPage.parameters.append(('-C', '--maxConcurrentSubmit', 'NUM', '''\
define the number of concurrent submit, (DEFAULT is 1)'''))
    manPage.parameters.append(('-j', '--jdl', 'JDLFILE', '''\
define the path for the jdl file, if omitted a predefined jdl will \
be used with simple sleep as executable'''))
    manPage.parameters.append(('-P', '--consumerPort', 'PORT', '''\
define the port for the consumer service (DEFAULT is 9000)'''))
    
    manPage.env.append(('GLITE_LOCATION', 'location of gLite packages (DEFAULT=/opt/glite)'))
    manPage.env.append(('X509_USER_PROXY', 'location of the user proxy'))
    manPage.env.append(('NOTIFIED_CANCEL_CONFIG_FILE','''\
location of the configuration file for this test'''))
    
    manPage.display()
    
    sys.exit(0)


def failure(reason):
    print reason
    sys.exit(1)

class JobMonitor(job_monitor.JobMonitor):
    
    def __init__(self, parameters, cmds):
        job_monitor.JobMonitor.__init__(self, parameters, cmds)
        #two different buffers are required:
        #one buffer for the purger process
        self.toCancel = []
        #one buffer for the notification mechanism
        self.runningJobs = []
        
    def manageNotifications(self):
        for (job, status) in self.runningJobs:
            if job in self.table:
                if self.table[job].scheduled:
                    JobMonitor.logger.warn("Cannot reschedule cancel for job %s (status %s)" \
                                           % (job, status))
                else:
                    JobMonitor.logger.info("Cancel job %s (status %s)" % (job, status))
                    self.toCancel.append(job)
        self.runningJobs = []
    
    def processNotifiedJobs(self):
        job_utils.eraseJobs(self.toCancel, self.cmdTable['cancel'], JobMonitor.logger)
        for item in self.toCancel:
            self.table[item].scheduled = True
        self.toCancel = []

    def put(self, uri, timestamp):
        self.lock.acquire()
        JobMonitor.logger.info("Submitted job: " + uri)
        self.table[uri] = job_utils.BooleanTimestamp(timestamp)
        self.lock.release()

    def notify(self, jobHistory):
        self.lock.acquire()
        self.lastNotifyTS = time.time()
        (jobId, status) = jobHistory[-1]
        JobMonitor.logger.debug("Notify %s (%s)" % (jobId, status))
        if status in JobMonitor.finalStates:
            self.notified.append((jobId, status))
        if status in JobMonitor.runningStates:
            self.runningJobs.append((jobId, status))
        self.lock.release()

    def shutdown(self):
        job_monitor.JobMonitor.shutdown(self)
        if self.tableOfResults['CANCELLED']<>self.parameters.numberOfJob:
            return 1
        return 0
        
        
def main():
    logger = log4py.Logger().get_instance(classid="main")

    parameters = testsuite_utils.Parameters()
    parameters.register('rate', 'd', 30, testsuite_utils.checkRate)
    parameters.register('numberOfJob', 'd', 1, testsuite_utils.atLeastOne)
    parameters.register('maxRunningJobs', 'd', 100, testsuite_utils.atLeastOne)
    parameters.register('delegationID', 's', optChar='D')
    parameters.register('resourceURI', 's', optChar='R')
    parameters.register('maxConcurrentSubmit', 'd', 1, testsuite_utils.atLeastOne, 'C')
    parameters.register('jdl', 's')
    parameters.register('consumerPort', 'd', 9000, testsuite_utils.checkPort, 'p')
    parameters.register('help', 'b')

    if os.environ.has_key("NOTIFIED_CANCEL_CONFIG_FILE"):
        confFileName = os.environ["NOTIFIED_CANCEL_CONFIG_FILE"]
        try:
            parameters.parseConfigFile(confFileName)
        except IOError, ioError:
            failure("Cannot read configuration file: " + confFileName + " " + str(ioError))
        except Exception, exception:
            failure("Cannot parse configuration file: " + confFileName + " " + str(exception))

    try:
        optlist, args = getopt.getopt(sys.argv[1:], parameters.getShortOptString(),
                                      parameters.getLongOptList())
        parameters.parseOptList(optlist)
    except getopt.GetoptError:
        print "Wrong arguments\n\nUsage:\n"
        usage()
    except Exception, exception:
        failure("Cannot parse option list " + str(exception))
        
    if parameters.help:
        usage()

    if parameters.resourceURI=='':
        print "Resource URI is not defined"
        usage()
        
    if parameters.jdl=='':
        parameters.jdl = testsuite_utils.createTempJDL(parameters.rate*5, logger)
        if parameters.jdl==None:
            sys.exit(1)

    gliteCeCommand = testsuite_utils.getCECommandTable()

    proxyFile = testsuite_utils.getProxyFile()
    
    servicePrefix = 'https://' + parameters.resourceURI[:string.find(parameters.resourceURI,'/') + 1]
    cemonURL = servicePrefix + "ce-monitor/services/CEMonitor"
        
    try:
        monitorThread = JobMonitor(parameters, gliteCeCommand)
        
        address = ('', parameters.consumerPort)
        consumer = CEMonitorConsumer.ConsumerServer(address, monitorThread, servicePrefix)
        
        subscrId = job_utils.subscribeToCREAMJobs(gliteCeCommand['subscribe'], cemonURL, \
                                                  parameters, proxyFile, logger)
        
        consumerThread = threading.Thread(target=consumer)
        consumerThread.start()
        
        monitorThread.start()
        monitorThread.join()
        exitCode = monitorThread.shutdown()
        
#        job_utils.unSubscribeToCREAMJobs(gliteCeCommand['unsubscribe'], cemonURL, \
#                                         subscrId, parameters, proxyFile, logger)
       
        consumer.halt()
        
    except Exception, e:
        failure(e)
        exitCode = 1
        
    sys.exit(exitCode)
        

if __name__ == "__main__":
    main()
