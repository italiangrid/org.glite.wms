/* LICENSE:
Copyright (c) Members of the EGEE Collaboration. 2010. 
See http://www.eu-egee.org/partners/ for details on the copyright
holders.  

Licensed under the Apache License, Version 2.0 (the "License"); 
you may not use this file except in compliance with the License. 
You may obtain a copy of the License at 

   http://www.apache.org/licenses/LICENSE-2.0 

Unless required by applicable law or agreed to in writing, software 
distributed under the License is distributed on an "AS IS" BASIS, 
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. 
See the License for the specific language governing permissions and 
limitations under the License.

END LICENSE */

#ifndef GLITE_WMS_ICE_UTIL_CREAMJOB_H
#define GLITE_WMS_ICE_UTIL_CREAMJOB_H

/**
 *
 * ICE and WMS Headers
 *
 */
#include "ice-core.h"
#include "iceUtils.h"
#include "iceConfManager.h"
#include "ClassadSyntax_ex.h"
#include "SerializeException.h"
#include "classad_distribution.h"
#include "glite/wms/common/configuration/ICEConfiguration.h"

/**
 *
 * Cream Client API C++ Headers
 *
 */
#include "glite/ce/cream-client-api-c/creamApiLogger.h"
#include "glite/ce/cream-client-api-c/job_statuses.h"
#include "glite/ce/cream-client-api-c/VOMSWrapper.h"
#include "glite/ce/cream-client-api-c/certUtil.h"
#include "glite/ce/cream-client-api-c/CEUrl.h"

/**
 *
 * Boost's headers
 *
 */
#include <boost/thread/recursive_mutex.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/filesystem/path.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/tuple/tuple.hpp>
#include <boost/regex.hpp>

/**
 *
 * System and STL C++ Headers
 *
 */
#include <exception>
#include <vector>
#include <string>
#include <ctime>
#include <set>

namespace api_util = glite::ce::cream_client_api::util;
namespace api      = glite::ce::cream_client_api;
namespace api_util = glite::ce::cream_client_api::util;
namespace fs       = boost::filesystem;

using namespace std;
using namespace glite::wms::ice::util;



namespace glite {
  namespace wms {
    namespace ice {
      namespace util {
        
		class CreamJob {

		protected:

		                            bool  m_new;

		 public:
		  static boost::recursive_mutex s_classad_mutex;
		  static int num_of_members( void ) { return 0; }

		public:

		 /**
		  *
		  * SETTER methods: set the Job's data members
		  *
		  */

		 /**
		  *
		  * GETTER methods: return the value of the Job's members
		  *
		  */

		 /**
		  *
		  * Database field name GETTER methods: return the names of the database column
		  *
		  */

		  CreamJob(
	  		
			) :  , m_new(true) { }

		  CreamJob() : , m_new(true) {}

		  void reset_change_flags( void ) {
		    ;
		    m_new = false;;
		  }

		  bool is_to_update( void ) const {
		    return ;
		  }

		  static std::string get_query_fields( void ) { 
		  			 return ""; }


		  std::string get_query_update_values( void ) const { 
		  			 return ; }

		  std::string get_query_values( void ) const { 
		  			 return ; }

		  static std::string get_createdb_query( void ) { 
		  			 return ""; }


		  void update_database( std::string& target ) const {
		    std::string sql= "UPDATE jobs SET ";

		    std::string _sql="";
		    if( _sql.empty() ) return;
		    if( boost::ends_with( _sql, ",") ) _sql = _sql.substr(0, _sql.length() -1 );
		    _sql += " WHERE " + this->grid_jobid_field() + "=" + glite::wms::ice::Ice::instance()->get_tmp_name() + this->grid_jobid( ) + glite::wms::ice::Ice::instance()->get_tmp_name() + ";";
		    target = sql + _sql;
		  }

		  virtual ~CreamJob( void ) {
		  }


		}; // class CreamJob
        } // namespace util
      } // namespace ice
    } // namespace wms
}; // namespace glite

#endif
