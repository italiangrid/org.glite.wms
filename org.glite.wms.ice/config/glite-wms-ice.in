#!/bin/sh


GLITE_LOCATION=${GLITE_LOCATION:-/opt/glite}

#########################################################
#
#				Integration changes
#. ${GLITE_LOCATION}/etc/glite-wms-vars.sh
#. ${GLITE_LOCATION}/libexec/glite-wms-services-certs.sh
#. ${GLITE_LOCATION}/etc/profile.d/glite-wms.sh
#. ${GLITE_LOCATION}/etc/profile.d/glite-wms-config.sh

. /etc/glite/profile.d/glite_setenv.sh 
########################################

 
GLITE_WMS_CONFIG_DIR=${GLITE_LOCATION}/etc/
export GLITE_WMS_CONFIG_DIR
this_script_name=$0

program_name=glite-wms-ice-safe
binpath=${GLITE_LOCATION}/bin/${program_name}
pid_file=${GLITE_WMS_TMP}/${program_name}.pid

running()
{
    #pidsafe=`/bin/ps -efu glite|grep ${GLITE_LOCATION}/bin/glite-wms-ice-safe|grep -v grep|awk '{print $2}'`  
    pidsafe=`/bin/ps h -o pid -C glite-wms-ice-safe`
#    pid=`/bin/ps -efu glite|grep ${GLITE_LOCATION}/bin/glite-wms-ice|grep -v grep|grep -v glite-wms-ice-safe|grep -v "sh -c"|awk '{print $2}'`
    pid=`/bin/ps h -o pid -C glite-wms-ice`
    
    
    if [ -z "${pidsafe}" ]; then
        return 1
    fi    
    
    return 0
}

ret_code=0

start()
{
    conf_file=glite_wms.conf
    GET_CONF=${GLITE_WMS_LOCATION}/bin/glite-wms-get-configuration
    if [ -f ${GET_CONF} ]; then
       err_logfile=`${GET_CONF} ICE.logfile`;
       su_dguser=`${GET_CONF} Common.DGUser`;
    else
       err_logfile="/dev/null"; # redirects output to /dev/null
       su_dguser="root"; # default root user
    fi


    echo -n "starting ICE... "
    if running; then
        echo "ok (already running)"
    else
        rm -f ${pid_file}
        # FIXME: This is a temporary fix for setting up the correct
        # LD_LIBRARY_PATH value 
        if [ -z "$LD_LIBRARY_PATH" ]; then
            LD_LIBRARY_PATH=/opt/log4cpp/lib/
        else
            LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/log4cpp/lib/
        fi
        export LD_LIBRARY_PATH
        su ${su_dguser} -c "${binpath} --conf ${conf_file} --daemon ${pid_file} >> ${err_logfile} 2>&1"
        # there is a race condition due to some delay between becoming
        # a daemon (hence returning control to this script) and
        # writing the pid file; the following sleep should be enough
        # to get around it
        sleep 1
        if running; then
            echo "ok"
        else
            echo "failure"
            ret_code=1
        fi
    fi
}

stop()
{
   echo -n "stopping ICE... "
#   pidsafe=`/bin/ps -efu glite|grep ${GLITE_LOCATION}/bin/glite-wms-ice-safe|grep -v grep|awk '{print $2}'`
#   pid=`/bin/ps -efu glite|grep ${GLITE_LOCATION}/bin/glite-wms-ice|grep -v grep|grep -v glite-wms-ice-safe|grep -v "sh -c"|awk '{print $2}'`
    pidsafe=`/bin/ps h -o pid -C glite-wms-ice-safe`
    pid=`/bin/ps h -o pid -C glite-wms-ice`
   
   kill $pidsafe
   sleep 1
   kill $pid
   sleep 1
   echo "ok"
   return
}

status()
{
    running
    RETVAL=$?
    if [ ${RETVAL} -eq 0 ]; then
	 pid=`/bin/ps h -o pid -C glite-wms-ice-safe`
        #pid=`cat ${pid_file} 2> /dev/null`
        echo "${binpath} (pid ${pid}) is running..."
    else
        echo "${binpath} is not running"
    fi
    return ${RETVAL}
}

usage()
{
    echo "Usage: ${this_script_name} {start|stop|restart|status}"
}

case $1 in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        if [ ${ret_code} -eq 0 ]; then
            start
        fi     
        ;;
    status)
        status
        ret_code=$?
        ;;
    *)
        usage
        ret_code=1
esac

exit ${ret_code}
