<?xml version="1.0" encoding="UTF-8" ?>
<!--
	Copyright (c) 2004 on behalf of the EU EGEE Project: 
	The European Organization for Nuclear Research (CERN), 
	Istituto Nazionale di Fisica Nucleare (INFN), Italy
	Datamat Spa, Italy
	Centre National de la Recherche Scientifique (CNRS), France
	CS Systeme d'Information (CSSI), France
	Royal Institute of Technology, Center for Parallel Computers (KTH-PDC), Sweden
	Universiteit van Amsterdam (UvA), Netherlands
	University of Helsinki (UH.HIP), Finland
	University of Bergen (UiB), Norway
	Council for the Central Laboratory of the Research Councils (CCLRC), United Kingdom

	Build file for the GLite Middleware WMS Subsystem
	
	Authors: Alberto Di Meglio <alberto.di.meglio@cern.ch>		
			 Joachim Flammer <Joachim.Flammer@cern.ch>
	Version info: $Id$
	Release: $Name$

	Revision history:
	$Log$
	Revision 1.15  2004/08/12 14:23:16  eronchie
	Updated

	Revision 1.14  2004/08/12 12:14:24  eronchie
	Updated
	
	Revision 1.13  2004/08/12 09:51:37  eronchie
	Updated
	
	Revision 1.12  2004/08/11 13:54:16  eronchie
	Updated classpath
	
	Revision 1.11  2004/08/11 13:43:20  eronchie
	Updated
	
	Revision 1.10  2004/08/11 12:15:30  eronchie
	WARNING: work in progress
	
	Revision 1.9  2004/08/11 10:05:08  eronchie
	Updated
	
	Revision 1.8  2004/08/11 08:42:50  eronchie
	Start adding partitioner
	
	Revision 1.7  2004/08/09 04:55:24  dimeglio
	Replaced rtag with tag
	
	Revision 1.6  2004/08/09 04:35:29  dimeglio
	Fixed inheritance of do.cvs.tag property
	
	Revision 1.5  2004/08/09 03:05:28  dimeglio
	Fixed inheritance of failonerror property
	
	Revision 1.4  2004/08/09 02:41:46  dimeglio
	Set default value for failonerror
	
	Revision 1.3  2004/08/08 19:51:45  dimeglio
	Added small.memory type of build
	
	Revision 1.2  2004/07/25 18:53:47  eronchie
	Renamed file
	
	
-->

<project name="wms-ui" default="dist">

	<description>
		Ant build file to build the GLite WMS UI Subsystem
	</description>
	
	<!-- =========================================
	     Import properties (order is important) 
	     ========================================= -->
	
	<!-- Import baseline & user properties -->
	<import file="../org.glite/project/baseline.properties.xml" />

	<!-- Import subsystem build properties, 
	                      subsystem properties & 
	                      subsystem common properties -->
	<import file="./project/properties.xml" />

	<!-- Import global build properties and global properties -->
	<import file="${global.properties.file}" />
				
	<!-- =========================================
		 Load dependencies properties files (order is important) 
	     ========================================= -->
	<property file="${user.dependencies.file}"/>
	<property file="${subsystem.dependencies.file}"/>
	<property file="${global.dependencies.file}"/>	
	
	<!-- =========================================
                 Load configure options
             ========================================= -->
        <import file="${global.configure.options.file}"/>
		
	<!-- =========================================
		 Import global task definitions
	     ========================================= -->
	<import file="${global.taskdefs.file}" />
	
	<!-- =========================================
	     Import global compiler definitions
  	     ========================================= -->
	<import file="${global.compilerdefs.file}" />
		
	<!-- =========================================
		 Import targets 
	     ========================================= -->
	<import file="${global.targets-common.file}" />
	
	<!-- =========================================
		 Load version file 
	     ========================================= -->
	<property file="${module.version.file}"/>
	
	<!-- ===============================================
		  Public common targets
	     =============================================== -->
	
	<target name="envinfo">
		<!-- Workspace paths -->
		<echo>*****************************************************************</echo>
		<echo>*****************************************************************</echo>
		<echo>****** ${subsystem.name}	</echo>
		<echo>*****************************************************************</echo>
		<echo>*****************************************************************</echo>
		<echo>  </echo>
		<echo>Global project path:	${global.dir}</echo>
		<echo>Global project name:	${global.name}</echo>
		<echo>Subsystem name:		${subsystem.name}</echo>
	</target>

	<target name="envcheck" depends="envinfo,defaultenvchecks" 
		description="Check environment configuration">
	</target>

	<target name="localinit" depends="envcheck">

		<echo> Preparing directories ... </echo>
		
		<mkdir dir="${stage.bin.dir}" />
		<mkdir dir="${stage.lib.dir}" />
		<mkdir dir="${stage.java.dir}" />
		<mkdir dir="${stage.inc.dir}" />
		<mkdir dir="${stage.int.dir}" />

		<mkdir dir="${dist.dir}" />

	</target>

	<target name="init" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="init"/>
		</antcall>
	</target>

	<target name="checkstyle" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="checkstyle"/>
		</antcall>
	</target>

	<target name="compile" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="compile"/>
		</antcall>
	</target>

	<target name="compiletest" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="compiletest"/>
		</antcall>
	</target>

	<target name="unittest" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="unittest"/>
		</antcall>
	</target>

	<target name="unitcoverage" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="unitcoverage"/>
		</antcall>
	</target>

	<target name="doc" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="doc"/>
		</antcall>
	</target>

    <target name="stage" depends="localinit">
            <antcall target="buildmodules">
                    <param name="target" value="stage"/>
            </antcall>
    </target>

	<target name="dist" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="dist"/>
		</antcall>
	</target>

	<target name="install" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="install"/>
		</antcall>
	</target>

	<target name="tag" if="do.cvs.tag"
		description="Apply tags.">
		
		<antcall target="buildmodules">
			<param name="target" value="tag"/>
		</antcall>

		<!-- TO DO: Add logic to update dependecies.properties file with new components tags -->
		
		<!-- Increment build number -->
		<propertyfile file="${module.version.file}">
		  <entry  key="module.version" value="${module.version}"/>
		  <entry  key="module.build" type="int" default="1" operation="+"/>
		  <entry  key="module.age" value="${module.age}"/>
		</propertyfile>
		<exec dir="${module.project.dir}" executable="cvs">
			<arg line="ci -m &quot;Incremented build number&quot; version.properties" />
		</exec>
		<var name="module.build" unset="true"/>
    	<property file="${module.version.file}" />
    	
		<!-- CVS Label -->
		<property name="cvs.label" value="${module.package.name}_B_${module.build}" />
		<exec dir="${workspace.abs.dir}" executable="cvs">
			<arg line="tag -aFR ${cvs.label} ${module.name}" />
		</exec>
	
	</target>

	<target name="all" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="all"/>
		</antcall>
	</target>

	<target name="clean">

		<property name="offline.repository" value="true" />
		<antcall target="buildmodules">
			<param name="target" value="clean"/>
		</antcall>

		<delete dir="${module.bin.dir}" />
		<delete dir="${module.lib.dir}" />
		<delete dir="${module.autosrc.dir}" />
		<delete dir="${module.autodoc.dir}" />
		<delete dir="${module.test.reports.dir}" />

	</target>

	<target name="cleanAll" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="cleanAll"/>
		</antcall>
	</target>

	<!-- ===============================================
		 Private targets
	     =============================================== -->
	
	<!-- ===============================================
		 Modules proxy targets
	     =============================================== -->

	<!-- component targets definitions tag = do not remove = -->

	<target name="partitioner" unless="setenvonly">
                <if>
                        <isset property="small.memory" />
                        <then>
                                <exec dir="${wms-ui.subsystem.dir}.partitioner" executable="${env.ANT_HOME}/bin/ant" failonerror="${failonerror}">
                                        <arg line="${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
                                </exec>
                        </then>
                        <else>
                                <ant dir="${wms-ui.subsystem.dir}.partitioner"
                            target="${target}"
                            inheritall="false" />
                        </else>
                </if>
        </target>

	<target name="api-cpp" unless="setenvonly">
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${wms-ui.subsystem.dir}.api-cpp" executable="${env.ANT_HOME}/bin/ant" failonerror="${failonerror}">
					<arg line="${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
				</exec>
			</then>
			<else>
				<ant dir="${wms-ui.subsystem.dir}.api-cpp"
	                    target="${target}"
	                    inheritall="false" />
			</else>
		</if>
	</target>

	<target name="api-java" unless="setenvonly" depends="jclassads, jglobus, log4j, edg-java-security">
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${wms-ui.subsystem.dir}.api-java" executable="${env.ANT_HOME}/bin/ant" failonerror="${failonerror}">
					<arg line="${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
				</exec>
			</then>
			<else>
				<ant dir="${wms-ui.subsystem.dir}.api-java"
	                    target="${target}"
	                    inheritall="false" />
			</else>
		</if>
	</target>

	<target name="cli-python" unless="setenvonly" depends="boost,classads,globus">
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${wms-ui.subsystem.dir}.cli-python" executable="${env.ANT_HOME}/bin/ant" failonerror="${failonerror}">
					<arg line="${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
				</exec>
			</then>
			<else>
				<ant dir="${wms-ui.subsystem.dir}.cli-python"
	                    target="${target}"
	                    inheritall="false" />
			</else>
		</if>
	</target>

	<target name="gui-java" unless="setenvonly" depends="boost,classads,globus">
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${wms-ui.subsystem.dir}.gui-java" executable="${env.ANT_HOME}/bin/ant" failonerror="${failonerror}">
					<arg line="${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
				</exec>
			</then>
			<else>
				<ant dir="${wms-ui.subsystem.dir}.gui-java"
	                    target="${target}"
	                    inheritall="false" />
			</else>
		</if>
	</target>

	<target name="partitioner" unless="setenvonly" depends="boost,classads,globus">
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${wms-ui.subsystem.dir}.partitioner" executable="${env.ANT_HOME}/bin/ant" failonerror="${failonerror}">
					<arg line="${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
				</exec>
			</then>
			<else>
				<ant dir="${wms-ui.subsystem.dir}.partitioner"
	                    target="${target}"
	                    inheritall="false" />
			</else>
		</if>
	</target>

	<target name="wrap-python" unless="setenvonly" depends="boost,classads,globus, swig">
                <if>
                        <isset property="small.memory" />
                        <then>
                                <exec dir="${wms-ui.subsystem.dir}.wrap-python" executable="${env.ANT_HOME}/bin/ant" failonerror="${failonerror}">
                                        <arg line="${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
                                </exec>
                        </then>
                        <else>
                                <ant dir="${wms-ui.subsystem.dir}.wrap-python"
                            target="${target}"
                            inheritall="false" />
                        </else>
                </if>
        </target>

	<target name="wrap-java" unless="setenvonly" depends="boost,classads,globus">
                <if>
                        <isset property="small.memory" />
                        <then>
                                <exec dir="${wms-ui.subsystem.dir}.wrap-java" executable="${env.ANT_HOME}/bin/ant" failonerror="${failonerror}">
                                        <arg line="${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
                                </exec>
                        </then>
                        <else>
                                <ant dir="${wms-ui.subsystem.dir}.wrap-java"
                            target="${target}"
                            inheritall="false" />
                        </else>
                </if>
        </target>

	<target name="gui-java" unless="setenvonly" depends="api-java, wrap-java">
                <if>
                        <isset property="small.memory" />
                        <then>
                                <exec dir="${wms-ui.subsystem.dir}.gui-java" executable="${env.ANT_HOME}/bin/ant" failonerror="${failonerror}">
                                        <arg line="${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${fa
ilonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
                                </exec>
                        </then>
                        <else>
                                <ant dir="${wms-ui.subsystem.dir}.gui-java"
                            target="${target}"
                            inheritall="false" />
                        </else>
                </if>
        </target>

	<target name="cli-python" unless="setenvonly" depends="cli-python">
                <if>
                        <isset property="small.memory" />
                        <then>
                                <exec dir="${wms-ui.subsystem.dir}.cli-python" executable="${env.ANT_HOME}/bin/ant" failonerr
or="${failonerror}">
                                        <arg line="${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${fa
ilonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
                                </exec>
                        </then>
                        <else>
                                <ant dir="${wms-ui.subsystem.dir}.cli-python"
                            target="${target}"
                            inheritall="false" />
                        </else>
                </if>
        </target>

	<!-- Main proxy -->
	<target name="buildmodules" depends="partitioner,
					     api-cpp,
   					     api-java,
					     wrap-python,
					     wrap-java,
					     gui-java,
					     cli-python" />
		
</project>
