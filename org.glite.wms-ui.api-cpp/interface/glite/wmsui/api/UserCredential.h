#ifndef  GLITE_WMS_UI_CLIENT_USERCREDENTIAL_H
#define GLITE_WMS_UI_CLIENT_USERCREDENTIAL_H
/*
 * UserCredential.h
 * Copyright (c) 2001 The European Datagrid Project - IST programme, all rights reserved.
 * Contributors are mentioned in the code where appropriate.
 *
 */


//#include <vector>
#include <sys/stat.h>
#include <exception>

/******************  VOMS  *****************/
#include "glite/security/voms/voms_api.h"

#define DEFAULT_SECURE_TMP_DIR  "/tmp"
#define FILE_SEPERATOR  "/"
#define PROXY_TIME_LIMIT 600  // minumin time-left proxy value accepted
// struct proxy_cred_desc ;
typedef struct proxy_cred_desc_struct proxy_cred_desc ;

namespace glite {
namespace wmsui {
namespace api {

/**
 * The UserCredential class provides methods that allow getting information about the user credentials.
 * It does not allow the creation of proxy certificates that have to be generated by using the grid-proxy-init
 * Globus command (the only way of handling credentials that is considered really safe).
 * Namely this is needed since the pass-phrase (very sensitive information) should not be passed through any complex
 *  (hence likely to be insecure) software components like GUI. It is recalled that proxy existence and correct
 * setting of the X509* variables is required by all job monitoring and control methods.
 * <p>
 * This class can manipulate standard proxies as well as VOMS certificates, in order to extract the extension information
 * The main operation are:
 * <ul>
 * <li> Read a proxy certificate and retrieve any possible information ( time left, subject, strengthetc...)
 * <li> Extract and check extensions such as VO name and VO groups from a VOMS certificate
 * </ul>

 *
 *@brief   Allow getting information about the user credentials
 * @version 0.1
 * @date 15 April 2002
 * @author Alessandro Maraschini <alessandro.maraschini@datamat.it>
*/


class  UserCredential{
  public:
	/** Default Constructor*/
	UserCredential() ;
	/** Default Destructor*/
	~UserCredential();
	/**Check if the Proxy Certificate is valid
	* @param   cred_path   the whole path of the proxy Certificate (if different from the default one)
	* @throws ProxyException   The proxy certificate is not valid
	* @throws CredProxyException   Unable to get the proxy certificate
	*/
	int checkProxy (const std::string& cred_path="")  ;
	/**
	*   Return the Issuer of the Proxy Certificate
	* @param   cred_path   the whole path of the proxy Certificate (if different from the default one)
	* @throws CredProxyException   Unable to get the proxy certificate
	*/
	std::string getIssuer      (const std::string& cred_path="") ;
	/**
	*    Return the Issuer of the Proxy Certificate
	* @param   cred_path   the whole path of the proxy Certificate (if different from the default one)
	* @throws CredProxyException   Unable to get the proxy certificate
	*/
	std::string getSubject     (const std::string& cred_path="");
	/**
	*   Return the Subject of the Proxy Certificate
	* @param   cred_path   the whole path of the proxy Certificate (if different from the default one)
	* @throws CredProxyException   Unable to get the proxy certificate
	*/
	int  getCredType    (const std::string& cred_path="") ;
	/**
	*    Return the Cred type of the Proxy Certificate
	* @param   cred_path   the whole path of the proxy Certificate (if different from the default one)
	* @throws CredProxyException   Unable to get the proxy certificate
	*/
	int  getStrenght    (const std::string& cred_path="")  ;
	/**
	*    Return the Strenght of the Proxy Certificate
	* @param   cred_path   the whole path of the proxy Certificate (if different from the default one)
	* @throws CredProxyException   Unable to get the proxy certificate
	*/
	int  getTimeLeft     (const std::string& cred_path="");
	/**
	*    Return the lasting time of the Proxy Certificate
	* @param  subj   a std::string variable where the subject will be copied to
	* @param   issuer    a std::string variable where the issuer will be copied to
	* @param  cred_type    an int  variable where the cred type will be copied to
	* @param   strength     an int  variable where the strength will be copied to
	* @param   time_left     an int variable where the time left will be copied to
	* @param   cred_path   the whole path of the proxy Certificate (if different from the default one)
	* @throws CredProxyException   Unable to get the proxy certificate
	*/
	void getInfo(   std::string& subj,
							std::string& issuer,
							int& cred_type,
							int& strength,
							int& time_left,
							const std::string& cred_path = "")  ;
	/**
	* Destroy the proxy file (if present)
	* @param   cred_path   the whole path of the proxy Certificate (if different from the default one)
	*/

	void destroy(const std::string& cred_path = "")  ;


	/*******************************
	* VIRTUAL ORGANISATION new FEATURES managing
	*******************************/
	/** 
	Retrieve the default Virtual Organisation name*/
	std::string  getDefaultVoName ();

	/**
	Retrieve the vector of all  the Virtual Organisation names */
	std::vector <std::string> getVoNames ();

	/** Retrieve all groups belonging to the specified VirtualOrganisation
	* @param voName the name of the Virtual Organisation where to retrieve groups */
	std::vector <std::string> getGroups ( const std::string& voName ) ;

	/**
	Returns the groups belonging to the default VirtualOrganisation*/
	std::vector <std::string > getDefaultGroups () ;

	/**
	Check wheater the specifie Virtual Organisation is contained in the Vo certificate extension
	* @return true if the VoName is present, false otherwise
	*/
	bool containsVo ( const std::string& voName )  ;



   private:
	char *                              proxy_file ;
	struct stat                        stx;
	static pthread_mutex_t     mutex;
	void load_voms ( vomsdata& d ) ;
	static std::vector <std::string> load_groups( voms &v ) ;
};

} // api
} // wmsui
} // glite

#endif
